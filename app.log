2023-10-23 09:57:27,744 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-23 09:57:27,745 - INFO - [33mPress CTRL+C to quit[0m
2023-10-23 09:57:31,276 - INFO - 127.0.0.1 - - [23/Oct/2023 09:57:31] "[33mGET / HTTP/1.1[0m" 404 -
2023-10-23 09:57:31,306 - INFO - 127.0.0.1 - - [23/Oct/2023 09:57:31] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
2023-10-23 09:57:49,488 - INFO - Question: Create separate line charts for 'MentHlth,' 'PhysHlth,' and 'GenHlth' to compare how they change with age.
2023-10-23 09:57:49,538 - INFO - Running PandasAI with openai LLM...
2023-10-23 09:57:49,538 - INFO - Prompt ID: ab7669e4-65d7-4bff-a3bd-ec967ea70bc4
2023-10-23 09:57:54,978 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 10483392 rows and 23 columns.
This is the metadata of the dataframe dfs[0]:
Diabetes_binary,HighBP,HighChol,CholCheck,BMI,Smoker,Stroke,HeartDiseaseorAttack,PhysActivity,Fruits,Veggies,HvyAlcoholConsump,AnyHealthcare,NoDocbcCost,GenHlth,MentHlth,PhysHlth,DiffWalk,Sex,Age,Education,Income,Diabetes_012
</dataframe>

<conversation>
User 1: Create separate line charts for 'MentHlth,' 'PhysHlth,' and 'GenHlth' to compare how they change with age.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-23 09:58:08,886 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd
import matplotlib.pyplot as plt

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare: Preprocessing and cleaning data if necessary
    df = dfs[0]
    
    # Process: Manipulating data for analysis
    age_groups = df.groupby('Age').mean()
    
    # Analyze: Conducting the actual analysis
    plt.plot(age_groups.index, age_groups['MentHlth'], label='Mental Health')
    plt.plot(age_groups.index, age_groups['PhysHlth'], label='Physical Health')
    plt.plot(age_groups.index, age_groups['GenHlth'], label='General Health')
    plt.xlabel('Age')
    plt.ylabel('Health Score')
    plt.title('Comparison of Health Scores with Age')
    plt.legend()
    plt.savefig('temp_chart.png')
    plt.close()
    
    return {"type": "plot", "value": "temp_chart.png"}
```

2023-10-23 09:58:08,888 - INFO - Saving charts to plots/ab7669e4-65d7-4bff-a3bd-ec967ea70bc4.png
2023-10-23 09:58:08,893 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/ab7669e4-65d7-4bff-a3bd-ec967ea70bc4.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/ab7669e4-65d7-4bff-a3bd-ec967ea70bc4.png" }
    """
    df = dfs[0]
    age_groups = df.groupby('Age').mean()
    plt.plot(age_groups.index, age_groups['MentHlth'], label='Mental Health')
    plt.plot(age_groups.index, age_groups['PhysHlth'], label='Physical Health')
    plt.plot(age_groups.index, age_groups['GenHlth'], label='General Health')
    plt.xlabel('Age')
    plt.ylabel('Health Score')
    plt.title('Comparison of Health Scores with Age')
    plt.legend()
    plt.savefig('plots/ab7669e4-65d7-4bff-a3bd-ec967ea70bc4.png')
    plt.close()
    return {'type': 'plot', 'value': 'plots/ab7669e4-65d7-4bff-a3bd-ec967ea70bc4.png'}
        ```
2023-10-23 09:58:11,837 - INFO - Answer: {'type': 'plot', 'value': 'plots/ab7669e4-65d7-4bff-a3bd-ec967ea70bc4.png'}
2023-10-23 09:58:11,837 - INFO - Executed in: 22.349625825881958s
2023-10-23 09:58:11,853 - INFO - 127.0.0.1 - - [23/Oct/2023 09:58:11] "GET /ask/Create%20separate%20line%20charts%20for%20'MentHlth,'%20'PhysHlth,'%20and%20'GenHlth'%20to%20compare%20how%20they%20change%20with%20age. HTTP/1.1" 200 -
2023-10-23 09:59:33,192 - INFO - Question: create a table for all the colums and their null values
2023-10-23 09:59:33,193 - INFO - Running PandasAI with openai LLM...
2023-10-23 09:59:33,194 - INFO - Prompt ID: 875f7f65-67c6-4dec-96c2-8d592c4fed20
2023-10-23 09:59:35,221 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 10483392 rows and 23 columns.
This is the metadata of the dataframe dfs[0]:
Diabetes_binary,HighBP,HighChol,CholCheck,BMI,Smoker,Stroke,HeartDiseaseorAttack,PhysActivity,Fruits,Veggies,HvyAlcoholConsump,AnyHealthcare,NoDocbcCost,GenHlth,MentHlth,PhysHlth,DiffWalk,Sex,Age,Education,Income,Diabetes_012
</dataframe>

<conversation>
User 1: create a table for all the colums and their null values
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-23 09:59:45,579 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Create a table for all the columns and their null values
    null_values = pd.DataFrame({
        'Column': dfs[0].columns,
        'Null Values': dfs[0].isnull().sum()
    })
    
    return {
        "type": "dataframe",
        "value": null_values
    }
```

2023-10-23 09:59:45,581 - INFO - Saving charts to plots/875f7f65-67c6-4dec-96c2-8d592c4fed20.png
2023-10-23 09:59:45,583 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/875f7f65-67c6-4dec-96c2-8d592c4fed20.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/875f7f65-67c6-4dec-96c2-8d592c4fed20.png" }
    """
    null_values = pd.DataFrame({'Column': dfs[0].columns, 'Null Values': dfs[0].isnull().sum()})
    return {'type': 'dataframe', 'value': null_values}
        ```
2023-10-23 09:59:46,874 - INFO - Answer: {'type': 'dataframe', 'value':                                     Column  Null Values
Diabetes_binary            Diabetes_binary      1268400
HighBP                              HighBP            0
HighChol                          HighChol            0
CholCheck                        CholCheck            0
BMI                                    BMI            0
Smoker                              Smoker            0
Stroke                              Stroke            0
HeartDiseaseorAttack  HeartDiseaseorAttack            0
PhysActivity                  PhysActivity            0
Fruits                              Fruits            0
Veggies                            Veggies            0
HvyAlcoholConsump        HvyAlcoholConsump            0
AnyHealthcare                AnyHealthcare            0
NoDocbcCost                    NoDocbcCost            0
GenHlth                            GenHlth            0
MentHlth                          MentHlth            0
PhysHlth                          PhysHlth            0
DiffWalk                          DiffWalk            0
Sex                                    Sex            0
Age                                    Age            0
Education                        Education            0
Income                              Income            0
Diabetes_012                  Diabetes_012      9214992}
2023-10-23 09:59:46,874 - INFO - Executed in: 13.681728839874268s
2023-10-23 09:59:46,875 - INFO - 127.0.0.1 - - [23/Oct/2023 09:59:46] "GET /ask/create%20a%20table%20for%20all%20the%20colums%20and%20their%20null%20values HTTP/1.1" 200 -
2023-10-23 10:01:00,207 - INFO - Question: create a table of number of rows and all the null values
2023-10-23 10:01:00,208 - INFO - Running PandasAI with openai LLM...
2023-10-23 10:01:00,209 - INFO - Prompt ID: 90ce457d-bf1b-47fd-bd02-568600aa0525
2023-10-23 10:01:02,149 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 10483392 rows and 23 columns.
This is the metadata of the dataframe dfs[0]:
Diabetes_binary,HighBP,HighChol,CholCheck,BMI,Smoker,Stroke,HeartDiseaseorAttack,PhysActivity,Fruits,Veggies,HvyAlcoholConsump,AnyHealthcare,NoDocbcCost,GenHlth,MentHlth,PhysHlth,DiffWalk,Sex,Age,Education,Income,Diabetes_012
</dataframe>

<conversation>
User 1: create a table of number of rows and all the null values
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-23 10:01:13,747 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Create a dictionary to store the results
    result = {}
    
    # Get the number of rows in each dataframe
    num_rows = [len(df) for df in dfs]
    result["Number of Rows"] = num_rows
    
    # Get the number of null values in each dataframe
    null_values = [df.isnull().sum().to_dict() for df in dfs]
    result["Null Values"] = null_values
    
    return result
```

2023-10-23 10:01:13,749 - INFO - Saving charts to plots/90ce457d-bf1b-47fd-bd02-568600aa0525.png
2023-10-23 10:01:13,751 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/90ce457d-bf1b-47fd-bd02-568600aa0525.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/90ce457d-bf1b-47fd-bd02-568600aa0525.png" }
    """
    result = {}
    num_rows = [len(df) for df in dfs]
    result['Number of Rows'] = num_rows
    null_values = [df.isnull().sum().to_dict() for df in dfs]
    result['Null Values'] = null_values
    return result
        ```
2023-10-23 10:01:13,752 - WARNING - Error of executing code
2023-10-23 10:01:13,752 - WARNING - Failed to execute code with a correction framework [retry number: 1]
2023-10-23 10:01:13,753 - ERROR - Failed with error: Traceback (most recent call last):
  File "/home/maadjavaidsiddique/.local/lib/python3.10/site-packages/pandasai/smart_datalake/__init__.py", line 337, in chat
    result = self._code_manager.execute_code(
  File "/home/maadjavaidsiddique/.local/lib/python3.10/site-packages/pandasai/helpers/code_manager.py", line 244, in execute_code
    return analyze_data(self._get_originals(dfs))
  File "<string>", line 20, in analyze_data
  File "<string>", line 20, in <listcomp>
TypeError: object of type 'NoneType' has no len()
. Retrying
2023-10-23 10:01:15,650 - INFO - Using prompt: 
You are provided with the following pandas DataFrames with the following metadata:

<dataframe>
Dataframe dfs[0], with 10483392 rows and 23 columns.
This is the metadata of the dataframe dfs[0]:
Diabetes_binary,HighBP,HighChol,CholCheck,BMI,Smoker,Stroke,HeartDiseaseorAttack,PhysActivity,Fruits,Veggies,HvyAlcoholConsump,AnyHealthcare,NoDocbcCost,GenHlth,MentHlth,PhysHlth,DiffWalk,Sex,Age,Education,Income,Diabetes_012
</dataframe>

The user asked the following question:
User 1: create a table of number of rows and all the null values

You generated this python code:
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Create a dictionary to store the results
    result = {}
    
    # Get the number of rows in each dataframe
    num_rows = [len(df) for df in dfs]
    result["Number of Rows"] = num_rows
    
    # Get the number of null values in each dataframe
    null_values = [df.isnull().sum().to_dict() for df in dfs]
    result["Null Values"] = null_values
    
    return result

It fails with the following error:
Traceback (most recent call last):
  File "/home/maadjavaidsiddique/.local/lib/python3.10/site-packages/pandasai/smart_datalake/__init__.py", line 337, in chat
    result = self._code_manager.execute_code(
  File "/home/maadjavaidsiddique/.local/lib/python3.10/site-packages/pandasai/helpers/code_manager.py", line 244, in execute_code
    return analyze_data(self._get_originals(dfs))
  File "<string>", line 20, in analyze_data
  File "<string>", line 20, in <listcomp>
TypeError: object of type 'NoneType' has no len()


Correct the python code and return a new python code that fixes the above mentioned error. Do not generate the same code again.

2023-10-23 10:01:26,546 - INFO - Saving charts to plots/90ce457d-bf1b-47fd-bd02-568600aa0525.png
2023-10-23 10:01:26,548 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/90ce457d-bf1b-47fd-bd02-568600aa0525.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/90ce457d-bf1b-47fd-bd02-568600aa0525.png" }
    """
    result = {}
    num_rows = [len(df) for df in dfs]
    result['Number of Rows'] = num_rows
    null_values = [(df.isnull().sum().to_dict() if df is not None else {}) for df in dfs]
    result['Null Values'] = null_values
    return result
        ```
2023-10-23 10:01:26,549 - WARNING - Error of executing code
2023-10-23 10:01:26,549 - WARNING - Failed to execute code with a correction framework [retry number: 2]
2023-10-23 10:01:26,550 - ERROR - Failed with error: Traceback (most recent call last):
  File "/home/maadjavaidsiddique/.local/lib/python3.10/site-packages/pandasai/smart_datalake/__init__.py", line 337, in chat
    result = self._code_manager.execute_code(
  File "/home/maadjavaidsiddique/.local/lib/python3.10/site-packages/pandasai/helpers/code_manager.py", line 244, in execute_code
    return analyze_data(self._get_originals(dfs))
  File "<string>", line 20, in analyze_data
  File "<string>", line 20, in <listcomp>
TypeError: object of type 'NoneType' has no len()
. Retrying
2023-10-23 10:01:28,746 - INFO - Using prompt: 
You are provided with the following pandas DataFrames with the following metadata:

<dataframe>
Dataframe dfs[0], with 10483392 rows and 23 columns.
This is the metadata of the dataframe dfs[0]:
Diabetes_binary,HighBP,HighChol,CholCheck,BMI,Smoker,Stroke,HeartDiseaseorAttack,PhysActivity,Fruits,Veggies,HvyAlcoholConsump,AnyHealthcare,NoDocbcCost,GenHlth,MentHlth,PhysHlth,DiffWalk,Sex,Age,Education,Income,Diabetes_012
</dataframe>

The user asked the following question:
User 1: create a table of number of rows and all the null values

You generated this python code:
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Create a dictionary to store the results
    result = {}
    
    # Get the number of rows in each dataframe
    num_rows = [len(df) for df in dfs]
    result["Number of Rows"] = num_rows
    
    # Get the number of null values in each dataframe
    null_values = [df.isnull().sum().to_dict() for df in dfs]
    result["Null Values"] = null_values
    
    return result

It fails with the following error:
Traceback (most recent call last):
  File "/home/maadjavaidsiddique/.local/lib/python3.10/site-packages/pandasai/smart_datalake/__init__.py", line 337, in chat
    result = self._code_manager.execute_code(
  File "/home/maadjavaidsiddique/.local/lib/python3.10/site-packages/pandasai/helpers/code_manager.py", line 244, in execute_code
    return analyze_data(self._get_originals(dfs))
  File "<string>", line 20, in analyze_data
  File "<string>", line 20, in <listcomp>
TypeError: object of type 'NoneType' has no len()


Correct the python code and return a new python code that fixes the above mentioned error. Do not generate the same code again.

2023-10-23 10:01:40,487 - INFO - Saving charts to plots/90ce457d-bf1b-47fd-bd02-568600aa0525.png
2023-10-23 10:01:40,490 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/90ce457d-bf1b-47fd-bd02-568600aa0525.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/90ce457d-bf1b-47fd-bd02-568600aa0525.png" }
    """
    result = {}
    num_rows = [len(df) for df in dfs if df is not None]
    result['Number of Rows'] = num_rows
    null_values = [(df.isnull().sum().to_dict() if df is not None else {}) for df in dfs]
    result['Null Values'] = null_values
    return result
        ```
2023-10-23 10:01:40,491 - INFO - Answer: {'Number of Rows': [], 'Null Values': [{}]}
2023-10-23 10:01:40,491 - INFO - Executed in: 40.28400111198425s
2023-10-23 10:01:40,491 - ERROR - Error processing question: 'type'
2023-10-23 10:01:40,491 - ERROR - Key Error: 'type'
2023-10-23 10:01:40,492 - INFO - 127.0.0.1 - - [23/Oct/2023 10:01:40] "[33mGET /ask/create%20a%20table%20of%20number%20of%20rows%20and%20all%20the%20null%20values HTTP/1.1[0m" 404 -
2023-10-23 10:02:14,940 - INFO - Question: how many rows are in this dataset
2023-10-23 10:02:14,941 - INFO - Running PandasAI with openai LLM...
2023-10-23 10:02:14,943 - INFO - Prompt ID: 2c47952d-0a4d-4be9-add7-0bbbccb36a5b
2023-10-23 10:02:16,893 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 10483392 rows and 23 columns.
This is the metadata of the dataframe dfs[0]:
Diabetes_binary,HighBP,HighChol,CholCheck,BMI,Smoker,Stroke,HeartDiseaseorAttack,PhysActivity,Fruits,Veggies,HvyAlcoholConsump,AnyHealthcare,NoDocbcCost,GenHlth,MentHlth,PhysHlth,DiffWalk,Sex,Age,Education,Income,Diabetes_012
</dataframe>

<conversation>
User 1: how many rows are in this dataset
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-23 10:02:27,272 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Get the number of rows in the dataset
    num_rows = dfs[0].shape[0]
    
    # Return the result as a string
    result = {
        "type": "string",
        "value": f"The dataset contains {num_rows} rows."
    }
    
    return result
```

2023-10-23 10:02:27,274 - INFO - Saving charts to plots/2c47952d-0a4d-4be9-add7-0bbbccb36a5b.png
2023-10-23 10:02:27,276 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/2c47952d-0a4d-4be9-add7-0bbbccb36a5b.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/2c47952d-0a4d-4be9-add7-0bbbccb36a5b.png" }
    """
    num_rows = dfs[0].shape[0]
    result = {'type': 'string', 'value': f'The dataset contains {num_rows} rows.'}
    return result
        ```
2023-10-23 10:02:28,230 - INFO - Answer: {'type': 'string', 'value': 'The dataset contains 10483392 rows.'}
2023-10-23 10:02:28,230 - INFO - Executed in: 13.289951801300049s
2023-10-23 10:02:28,231 - INFO - 127.0.0.1 - - [23/Oct/2023 10:02:28] "GET /ask/how%20many%20rows%20are%20in%20this%20dataset HTTP/1.1" 200 -
2023-10-23 11:07:08,962 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-23 11:07:08,962 - INFO - [33mPress CTRL+C to quit[0m
2023-10-23 11:07:12,831 - INFO - 127.0.0.1 - - [23/Oct/2023 11:07:12] "[33mGET / HTTP/1.1[0m" 404 -
2023-10-23 11:07:30,100 - INFO - Question: how many rows are in this dataset
2023-10-23 11:07:30,154 - INFO - Running PandasAI with openai LLM...
2023-10-23 11:07:30,155 - INFO - Prompt ID: 465cc01f-f88d-4658-a7fe-4737b225d1d2
2023-10-23 11:07:34,464 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 10483392 rows and 23 columns.
This is the metadata of the dataframe dfs[0]:
Diabetes_binary,HighBP,HighChol,CholCheck,BMI,Smoker,Stroke,HeartDiseaseorAttack,PhysActivity,Fruits,Veggies,HvyAlcoholConsump,AnyHealthcare,NoDocbcCost,GenHlth,MentHlth,PhysHlth,DiffWalk,Sex,Age,Education,Income,Diabetes_012
</dataframe>

<conversation>
User 1: how many rows are in this dataset
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-23 11:07:45,451 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Get the number of rows in the dataset
    num_rows = dfs[0].shape[0]
    
    # Return the result as a string
    result = {
        "type": "string",
        "value": f"The dataset contains {num_rows} rows."
    }
    
    return result
```

2023-10-23 11:07:45,453 - INFO - Saving charts to plots/465cc01f-f88d-4658-a7fe-4737b225d1d2.png
2023-10-23 11:07:45,456 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/465cc01f-f88d-4658-a7fe-4737b225d1d2.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/465cc01f-f88d-4658-a7fe-4737b225d1d2.png" }
    """
    num_rows = dfs[0].shape[0]
    result = {'type': 'string', 'value': f'The dataset contains {num_rows} rows.'}
    return result
        ```
2023-10-23 11:07:47,341 - INFO - Answer: {'type': 'string', 'value': 'The dataset contains 10483392 rows.'}
2023-10-23 11:07:47,342 - INFO - Executed in: 17.24143624305725s
2023-10-23 11:07:47,342 - INFO - 127.0.0.1 - - [23/Oct/2023 11:07:47] "GET /ask/how%20many%20rows%20are%20in%20this%20dataset HTTP/1.1" 200 -
2023-10-24 22:30:50,874 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8080
 * Running on http://192.168.100.17:8080
2023-10-24 22:30:50,874 - INFO - [33mPress CTRL+C to quit[0m
2023-10-24 22:30:50,878 - INFO -  * Restarting with watchdog (inotify)
2023-10-24 22:30:51,999 - WARNING -  * Debugger is active!
2023-10-24 22:30:52,084 - INFO -  * Debugger PIN: 833-982-128
2023-10-24 22:30:59,436 - INFO - 192.168.100.17 - - [24/Oct/2023 22:30:59] "[33mGET / HTTP/1.1[0m" 404 -
2023-10-24 22:30:59,665 - INFO - 192.168.100.17 - - [24/Oct/2023 22:30:59] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
2023-10-24 22:31:12,436 - INFO - Question: how many rows are in this dataset
2023-10-24 22:31:12,496 - INFO - Running PandasAI with openai LLM...
2023-10-24 22:31:12,496 - INFO - Prompt ID: 095ea84f-1f85-464c-99fe-5d9c7fd30bd1
2023-10-24 22:31:12,553 - INFO - 192.168.100.17 - - [24/Oct/2023 22:31:12] "GET /ask/how%20many%20rows%20are%20in%20this%20dataset HTTP/1.1" 200 -
2023-10-24 22:32:34,448 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:32:34,449 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:32:34,453 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:32:35,410 - INFO -  * Restarting with watchdog (inotify)
2023-10-24 22:32:41,655 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8080
 * Running on http://192.168.100.17:8080
2023-10-24 22:32:41,655 - INFO - [33mPress CTRL+C to quit[0m
2023-10-24 22:32:41,657 - INFO -  * Restarting with watchdog (inotify)
2023-10-24 22:32:42,833 - WARNING -  * Debugger is active!
2023-10-24 22:32:42,833 - INFO -  * Debugger PIN: 833-982-128
2023-10-24 22:32:47,959 - INFO - Question: how many rows are in this dataset
2023-10-24 22:32:48,009 - INFO - Running PandasAI with openai LLM...
2023-10-24 22:32:48,009 - INFO - Prompt ID: d90ff970-b203-4bab-b1a9-9b960ded79aa
2023-10-24 22:32:48,060 - INFO - 192.168.100.17 - - [24/Oct/2023 22:32:48] "GET /ask/how%20many%20rows%20are%20in%20this%20dataset HTTP/1.1" 200 -
2023-10-24 22:33:06,950 - INFO - Question: how many rows are in this dataset
2023-10-24 22:33:06,951 - INFO - Running PandasAI with openai LLM...
2023-10-24 22:33:06,952 - INFO - Prompt ID: 349213e3-26f2-4f74-9f32-81c0fb3c04bb
2023-10-24 22:33:07,005 - INFO - 192.168.100.17 - - [24/Oct/2023 22:33:07] "GET /ask/how%20many%20rows%20are%20in%20this%20dataset HTTP/1.1" 200 -
2023-10-24 22:33:14,709 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8080
 * Running on http://192.168.100.17:8080
2023-10-24 22:33:14,709 - INFO - [33mPress CTRL+C to quit[0m
2023-10-24 22:33:14,711 - INFO -  * Restarting with watchdog (inotify)
2023-10-24 22:33:15,864 - WARNING -  * Debugger is active!
2023-10-24 22:33:15,865 - INFO -  * Debugger PIN: 833-982-128
2023-10-24 22:33:27,645 - INFO - 127.0.0.1 - - [24/Oct/2023 22:33:27] "[33mGET / HTTP/1.1[0m" 404 -
2023-10-24 22:33:27,795 - INFO - 127.0.0.1 - - [24/Oct/2023 22:33:27] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
2023-10-24 22:33:38,496 - INFO - Question: how many rows are in this dataset
2023-10-24 22:33:38,549 - INFO - Running PandasAI with openai LLM...
2023-10-24 22:33:38,550 - INFO - Prompt ID: 1d65913b-e176-4f8a-8c6c-fd84b25adde6
2023-10-24 22:33:38,604 - INFO - 127.0.0.1 - - [24/Oct/2023 22:33:38] "GET /ask/how%20many%20rows%20are%20in%20this%20dataset HTTP/1.1" 200 -
2023-10-24 22:36:20,781 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-24 22:36:20,781 - INFO - [33mPress CTRL+C to quit[0m
2023-10-24 22:36:23,824 - INFO - 127.0.0.1 - - [24/Oct/2023 22:36:23] "[33mGET / HTTP/1.1[0m" 404 -
2023-10-24 22:36:24,019 - INFO - 127.0.0.1 - - [24/Oct/2023 22:36:24] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
2023-10-24 22:36:32,750 - INFO - Question: how many rows does this data have
2023-10-24 22:36:32,794 - INFO - Running PandasAI with openai LLM...
2023-10-24 22:36:32,794 - INFO - Prompt ID: 38b0bd30-083f-4273-b9a8-37972f258084
2023-10-24 22:36:32,847 - INFO - 127.0.0.1 - - [24/Oct/2023 22:36:32] "GET /ask/how%20many%20rows%20does%20this%20data%20have HTTP/1.1" 200 -
2023-10-24 22:38:34,358 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-24 22:38:34,358 - INFO - [33mPress CTRL+C to quit[0m
2023-10-24 22:38:37,827 - INFO - 127.0.0.1 - - [24/Oct/2023 22:38:37] "[33mGET / HTTP/1.1[0m" 404 -
2023-10-24 22:38:37,956 - INFO - 127.0.0.1 - - [24/Oct/2023 22:38:37] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
2023-10-24 22:38:46,429 - INFO - Question: how many rows does this data have
2023-10-24 22:38:46,472 - INFO - Running PandasAI with openai LLM...
2023-10-24 22:38:46,473 - INFO - Prompt ID: 3324bd44-55da-41fa-958a-672a4f249999
2023-10-24 22:38:46,526 - INFO - 127.0.0.1 - - [24/Oct/2023 22:38:46] "GET /ask/how%20many%20rows%20does%20this%20data%20have HTTP/1.1" 200 -
2023-10-24 22:40:22,255 - INFO - 127.0.0.1 - - [24/Oct/2023 22:40:22] "[33mGET / HTTP/1.1[0m" 404 -
2023-10-24 22:40:22,437 - INFO - 127.0.0.1 - - [24/Oct/2023 22:40:22] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
2023-10-24 22:40:33,195 - INFO - Question: how many rows are their
2023-10-24 22:40:33,196 - INFO - Running PandasAI with openai LLM...
2023-10-24 22:40:33,196 - INFO - Prompt ID: 6a856c81-aab7-4d9e-ae5a-3e8ac32004c6
2023-10-24 22:40:33,254 - INFO - 127.0.0.1 - - [24/Oct/2023 22:40:33] "GET /ask/how%20many%20rows%20are%20their HTTP/1.1" 200 -
2023-10-24 22:41:48,821 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8080
 * Running on http://192.168.100.17:8080
2023-10-24 22:41:48,821 - INFO - [33mPress CTRL+C to quit[0m
2023-10-24 22:41:48,824 - INFO -  * Restarting with watchdog (inotify)
2023-10-24 22:41:49,976 - WARNING -  * Debugger is active!
2023-10-24 22:41:49,976 - INFO -  * Debugger PIN: 122-408-852
2023-10-24 22:41:53,522 - INFO - 127.0.0.1 - - [24/Oct/2023 22:41:53] "[33mGET / HTTP/1.1[0m" 404 -
2023-10-24 22:41:53,720 - INFO - 127.0.0.1 - - [24/Oct/2023 22:41:53] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
2023-10-24 22:42:05,996 - INFO - Question: how many rows does this have
2023-10-24 22:42:06,054 - INFO - Running PandasAI with openai LLM...
2023-10-24 22:42:06,055 - INFO - Prompt ID: 395486ea-77e7-46a8-9358-1ec0d32ec6b6
2023-10-24 22:42:06,111 - INFO - 127.0.0.1 - - [24/Oct/2023 22:42:06] "GET /ask/how%20many%20rows%20does%20this%20have HTTP/1.1" 200 -
2023-10-24 22:42:19,853 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/main.py', reloading
2023-10-24 22:42:19,853 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/main.py', reloading
2023-10-24 22:42:19,855 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/main.py', reloading
2023-10-24 22:42:20,589 - INFO -  * Restarting with watchdog (inotify)
2023-10-24 22:42:29,623 - WARNING -  * Debugger is active!
2023-10-24 22:42:29,623 - INFO -  * Debugger PIN: 122-408-852
2023-10-24 22:42:29,760 - INFO - Question: how many rows does this have
2023-10-24 22:42:29,832 - INFO - Running PandasAI with openai LLM...
2023-10-24 22:42:29,833 - INFO - Prompt ID: 7742b0d3-899c-4e8a-8bc3-3ad5caa31602
2023-10-24 22:42:32,622 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 10483392 rows and 23 columns.
This is the metadata of the dataframe dfs[0]:
Diabetes_binary,HighBP,HighChol,CholCheck,BMI,Smoker,Stroke,HeartDiseaseorAttack,PhysActivity,Fruits,Veggies,HvyAlcoholConsump,AnyHealthcare,NoDocbcCost,GenHlth,MentHlth,PhysHlth,DiffWalk,Sex,Age,Education,Income,Diabetes_012
</dataframe>

<conversation>
User 1: how many rows does this have
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-24 22:42:44,550 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Get the number of rows in the dataframe
    num_rows = dfs[0].shape[0]
    
    # Return the result as a string
    result = {
        "type": "string",
        "value": f"The dataframe has {num_rows} rows."
    }
    
    return result
```

2023-10-24 22:42:44,552 - INFO - Saving charts to plots/7742b0d3-899c-4e8a-8bc3-3ad5caa31602.png
2023-10-24 22:42:44,557 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/7742b0d3-899c-4e8a-8bc3-3ad5caa31602.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/7742b0d3-899c-4e8a-8bc3-3ad5caa31602.png" }
    """
    num_rows = dfs[0].shape[0]
    result = {'type': 'string', 'value': f'The dataframe has {num_rows} rows.'}
    return result
        ```
2023-10-24 22:42:46,484 - INFO - Answer: {'type': 'string', 'value': 'The dataframe has 10483392 rows.'}
2023-10-24 22:42:46,484 - INFO - Executed in: 16.724751472473145s
2023-10-24 22:42:46,485 - INFO - 127.0.0.1 - - [24/Oct/2023 22:42:46] "GET /ask/how%20many%20rows%20does%20this%20have HTTP/1.1" 200 -
2023-10-24 22:42:59,016 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/main.py', reloading
2023-10-24 22:42:59,017 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/main.py', reloading
2023-10-24 22:42:59,019 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/main.py', reloading
2023-10-24 22:42:59,250 - INFO -  * Restarting with watchdog (inotify)
2023-10-24 22:43:00,448 - WARNING -  * Debugger is active!
2023-10-24 22:43:00,448 - INFO -  * Debugger PIN: 122-408-852
2023-10-24 22:43:04,422 - INFO - Question: how many rows does this have
2023-10-24 22:43:04,475 - INFO - Running PandasAI with openai LLM...
2023-10-24 22:43:04,475 - INFO - Prompt ID: cf1f8d47-c19d-4f9f-9462-367e058640ef
2023-10-24 22:43:04,527 - INFO - 127.0.0.1 - - [24/Oct/2023 22:43:04] "GET /ask/how%20many%20rows%20does%20this%20have HTTP/1.1" 200 -
2023-10-24 22:43:32,682 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:43:32,682 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:43:32,686 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:43:33,091 - INFO -  * Restarting with watchdog (inotify)
2023-10-24 22:43:34,281 - WARNING -  * Debugger is active!
2023-10-24 22:43:34,281 - INFO -  * Debugger PIN: 122-408-852
2023-10-24 22:44:34,202 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:44:34,203 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:44:34,204 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:44:35,185 - INFO -  * Restarting with watchdog (inotify)
2023-10-24 22:44:36,512 - ERROR - Error loading dataset: 'Index' object is not callable
2023-10-24 22:44:36,520 - WARNING -  * Debugger is active!
2023-10-24 22:44:36,521 - INFO -  * Debugger PIN: 122-408-852
2023-10-24 22:44:38,981 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:44:38,982 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:44:38,984 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:44:39,890 - INFO -  * Restarting with watchdog (inotify)
2023-10-24 22:44:45,629 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8080
 * Running on http://192.168.100.17:8080
2023-10-24 22:44:45,629 - INFO - [33mPress CTRL+C to quit[0m
2023-10-24 22:44:45,632 - INFO -  * Restarting with watchdog (inotify)
2023-10-24 22:44:46,848 - WARNING -  * Debugger is active!
2023-10-24 22:44:46,849 - INFO -  * Debugger PIN: 122-408-852
2023-10-24 22:45:38,248 - INFO - Question: how many rows does this have
2023-10-24 22:45:38,303 - INFO - Running PandasAI with openai LLM...
2023-10-24 22:45:38,304 - INFO - Prompt ID: c4f6468b-dd8c-4501-b7d8-6f184f9d31d8
2023-10-24 22:45:38,358 - INFO - 127.0.0.1 - - [24/Oct/2023 22:45:38] "GET /ask/how%20many%20rows%20does%20this%20have HTTP/1.1" 200 -
2023-10-24 22:45:40,004 - INFO - Question: how many rows does this have
2023-10-24 22:45:40,005 - INFO - Running PandasAI with openai LLM...
2023-10-24 22:45:40,005 - INFO - Prompt ID: 81be16d2-4a31-496f-ac6b-1579835d62fb
2023-10-24 22:45:40,057 - INFO - 127.0.0.1 - - [24/Oct/2023 22:45:40] "GET /ask/how%20many%20rows%20does%20this%20have HTTP/1.1" 200 -
2023-10-24 22:45:40,993 - INFO - Question: how many rows does this have
2023-10-24 22:45:40,995 - INFO - Running PandasAI with openai LLM...
2023-10-24 22:45:40,997 - INFO - Prompt ID: 997c1467-01c0-459d-9755-c8db20e26b50
2023-10-24 22:45:41,048 - INFO - 127.0.0.1 - - [24/Oct/2023 22:45:41] "GET /ask/how%20many%20rows%20does%20this%20have HTTP/1.1" 200 -
2023-10-24 22:47:25,007 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8080
 * Running on http://192.168.100.17:8080
2023-10-24 22:47:25,007 - INFO - [33mPress CTRL+C to quit[0m
2023-10-24 22:47:25,010 - INFO -  * Restarting with watchdog (inotify)
2023-10-24 22:47:26,319 - WARNING -  * Debugger is active!
2023-10-24 22:47:26,320 - INFO -  * Debugger PIN: 562-074-314
2023-10-24 22:47:35,183 - INFO - 192.168.100.17 - - [24/Oct/2023 22:47:35] "[33mGET / HTTP/1.1[0m" 404 -
2023-10-24 22:47:35,403 - INFO - 192.168.100.17 - - [24/Oct/2023 22:47:35] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
2023-10-24 22:47:38,970 - INFO - Question: how many rows are in this dataset
2023-10-24 22:47:39,022 - INFO - Running PandasAI with openai LLM...
2023-10-24 22:47:39,023 - INFO - Prompt ID: 6969a9c9-13a0-4e9e-a3eb-d4e9875bbece
2023-10-24 22:47:39,078 - INFO - 192.168.100.17 - - [24/Oct/2023 22:47:39] "GET /ask/how%20many%20rows%20are%20in%20this%20dataset HTTP/1.1" 200 -
2023-10-24 22:49:16,091 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:49:16,091 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:49:16,092 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:49:16,620 - INFO -  * Restarting with watchdog (inotify)
2023-10-24 22:49:17,845 - WARNING -  * Debugger is active!
2023-10-24 22:49:17,845 - INFO -  * Debugger PIN: 562-074-314
2023-10-24 22:49:23,345 - INFO - Question: how many rows are in this dataset
2023-10-24 22:49:23,400 - INFO - Running PandasAI with openai LLM...
2023-10-24 22:49:23,401 - INFO - Prompt ID: fb29d371-6906-4e3b-a653-ee9379faaaa4
2023-10-24 22:49:23,456 - INFO - 192.168.100.17 - - [24/Oct/2023 22:49:23] "GET /ask/how%20many%20rows%20are%20in%20this%20dataset HTTP/1.1" 200 -
2023-10-24 22:49:41,244 - INFO - 192.168.100.17 - - [24/Oct/2023 22:49:41] "[33mGET / HTTP/1.1[0m" 404 -
2023-10-24 22:49:45,665 - INFO - Question: how many rows are in this dataset
2023-10-24 22:49:45,666 - INFO - Running PandasAI with openai LLM...
2023-10-24 22:49:45,667 - INFO - Prompt ID: 49140b52-7f2e-46ff-b1bc-c5ddc599ed52
2023-10-24 22:49:45,713 - INFO - 192.168.100.17 - - [24/Oct/2023 22:49:45] "GET /ask/how%20many%20rows%20are%20in%20this%20dataset HTTP/1.1" 200 -
2023-10-24 22:49:59,963 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:49:59,963 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:49:59,964 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:50:00,535 - INFO -  * Restarting with watchdog (inotify)
2023-10-24 22:50:01,729 - WARNING -  * Debugger is active!
2023-10-24 22:50:01,730 - INFO -  * Debugger PIN: 562-074-314
2023-10-24 22:50:04,457 - INFO - Question: how many rows are in this dataset
2023-10-24 22:50:04,505 - INFO - Running PandasAI with openai LLM...
2023-10-24 22:50:04,505 - INFO - Prompt ID: 2730725d-d274-427d-87c3-5a27e7a584c9
2023-10-24 22:50:04,556 - INFO - 192.168.100.17 - - [24/Oct/2023 22:50:04] "GET /ask/how%20many%20rows%20are%20in%20this%20dataset HTTP/1.1" 200 -
2023-10-24 22:50:09,227 - INFO - Question: how many rows are in this dataset
2023-10-24 22:50:09,228 - INFO - Running PandasAI with openai LLM...
2023-10-24 22:50:09,229 - INFO - Prompt ID: 56d5640a-596a-4b00-9fcf-24cc7f0e890a
2023-10-24 22:50:09,282 - INFO - 192.168.100.17 - - [24/Oct/2023 22:50:09] "GET /ask/how%20many%20rows%20are%20in%20this%20dataset HTTP/1.1" 200 -
2023-10-24 22:50:55,111 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:50:55,111 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:50:55,113 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:50:55,612 - INFO -  * Restarting with watchdog (inotify)
2023-10-24 22:50:56,829 - ERROR - Error loading dataset: 'orderID'
2023-10-24 22:50:56,838 - WARNING -  * Debugger is active!
2023-10-24 22:50:56,838 - INFO -  * Debugger PIN: 562-074-314
2023-10-24 22:50:58,800 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:50:58,801 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:50:58,802 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:50:59,186 - INFO -  * Restarting with watchdog (inotify)
2023-10-24 22:51:00,423 - ERROR - Error loading dataset: 'order ID'
2023-10-24 22:51:00,432 - WARNING -  * Debugger is active!
2023-10-24 22:51:00,432 - INFO -  * Debugger PIN: 562-074-314
2023-10-24 22:51:01,763 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:51:01,765 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:51:01,765 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:51:02,818 - INFO -  * Restarting with watchdog (inotify)
2023-10-24 22:51:04,021 - WARNING -  * Debugger is active!
2023-10-24 22:51:04,022 - INFO -  * Debugger PIN: 562-074-314
2023-10-24 22:52:03,899 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:52:03,900 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:52:03,901 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:52:04,974 - INFO -  * Restarting with watchdog (inotify)
2023-10-24 22:53:17,506 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8080
 * Running on http://192.168.100.17:8080
2023-10-24 22:53:17,507 - INFO - [33mPress CTRL+C to quit[0m
2023-10-24 22:53:17,509 - INFO -  * Restarting with watchdog (inotify)
2023-10-24 22:53:18,630 - WARNING -  * Debugger is active!
2023-10-24 22:53:18,631 - INFO -  * Debugger PIN: 562-074-314
2023-10-24 22:53:31,373 - INFO - 127.0.0.1 - - [24/Oct/2023 22:53:31] "[33mGET / HTTP/1.1[0m" 404 -
2023-10-24 22:53:31,591 - INFO - 127.0.0.1 - - [24/Oct/2023 22:53:31] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
2023-10-24 22:53:34,728 - INFO - Question: how many rows does this have
2023-10-24 22:53:34,775 - INFO - Running PandasAI with openai LLM...
2023-10-24 22:53:34,775 - INFO - Prompt ID: 6292c5c1-d63e-4fc6-b255-d74abcd8ba39
2023-10-24 22:53:34,836 - INFO - 127.0.0.1 - - [24/Oct/2023 22:53:34] "GET /ask/how%20many%20rows%20does%20this%20have HTTP/1.1" 200 -
2023-10-24 22:53:53,267 - INFO - Question: how many order were fulfilled
2023-10-24 22:53:53,268 - INFO - Running PandasAI with openai LLM...
2023-10-24 22:53:53,270 - INFO - Prompt ID: 05d2c581-3bc5-4237-8bf3-2eb4711b8086
2023-10-24 22:53:53,331 - INFO - 127.0.0.1 - - [24/Oct/2023 22:53:53] "GET /ask/how%20many%20order%20were%20fulfilled HTTP/1.1" 200 -
2023-10-24 22:56:01,124 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:56:01,125 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:56:01,127 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:56:01,527 - INFO -  * Restarting with watchdog (inotify)
2023-10-24 22:56:02,754 - WARNING -  * Debugger is active!
2023-10-24 22:56:02,754 - INFO -  * Debugger PIN: 562-074-314
2023-10-24 22:56:07,605 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:56:07,606 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:56:07,607 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:56:08,124 - INFO -  * Restarting with watchdog (inotify)
2023-10-24 22:56:16,102 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8080
 * Running on http://192.168.100.17:8080
2023-10-24 22:56:16,102 - INFO - [33mPress CTRL+C to quit[0m
2023-10-24 22:56:16,104 - INFO -  * Restarting with watchdog (inotify)
2023-10-24 22:56:17,267 - WARNING -  * Debugger is active!
2023-10-24 22:56:17,267 - INFO -  * Debugger PIN: 562-074-314
2023-10-24 22:56:26,963 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:56:26,963 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:56:26,965 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:56:27,691 - INFO -  * Restarting with watchdog (inotify)
2023-10-24 22:56:35,659 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8080
 * Running on http://192.168.100.17:8080
2023-10-24 22:56:35,660 - INFO - [33mPress CTRL+C to quit[0m
2023-10-24 22:56:35,662 - INFO -  * Restarting with watchdog (inotify)
2023-10-24 22:56:36,769 - WARNING -  * Debugger is active!
2023-10-24 22:56:36,770 - INFO -  * Debugger PIN: 562-074-314
2023-10-24 22:56:39,295 - INFO - 127.0.0.1 - - [24/Oct/2023 22:56:39] "[33mGET / HTTP/1.1[0m" 404 -
2023-10-24 22:56:42,363 - INFO - Question: how many order were fulfilled
2023-10-24 22:56:42,421 - INFO - Running PandasAI with openai LLM...
2023-10-24 22:56:42,421 - INFO - Prompt ID: 0d36e586-6ed3-477d-82d5-c317467a5525
2023-10-24 22:56:42,480 - INFO - 127.0.0.1 - - [24/Oct/2023 22:56:42] "GET /ask/how%20many%20order%20were%20fulfilled HTTP/1.1" 200 -
2023-10-24 22:56:50,020 - INFO - Question: how many rows does this have
2023-10-24 22:56:50,021 - INFO - Running PandasAI with openai LLM...
2023-10-24 22:56:50,022 - INFO - Prompt ID: 72bca156-1cd0-4523-86ba-6f6d1126810f
2023-10-24 22:56:50,080 - INFO - 127.0.0.1 - - [24/Oct/2023 22:56:50] "GET /ask/how%20many%20rows%20does%20this%20have HTTP/1.1" 200 -
2023-10-24 22:58:51,221 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/utils.py', reloading
2023-10-24 22:59:53,404 - INFO - Question: how many rows does this have
2023-10-24 23:03:27,884 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8080
 * Running on http://192.168.100.17:8080
2023-10-24 23:03:27,884 - INFO - [33mPress CTRL+C to quit[0m
2023-10-24 23:03:27,886 - INFO -  * Restarting with watchdog (inotify)
2023-10-24 23:03:29,081 - WARNING -  * Debugger is active!
2023-10-24 23:03:29,081 - INFO -  * Debugger PIN: 448-280-150
2023-10-24 23:03:32,808 - INFO - 127.0.0.1 - - [24/Oct/2023 23:03:32] "[33mGET / HTTP/1.1[0m" 404 -
2023-10-24 23:03:36,113 - INFO - Question: how many rows does this have
2023-10-24 23:03:36,173 - INFO - Running PandasAI with openai LLM...
2023-10-24 23:03:36,174 - INFO - Prompt ID: c6be93b5-af81-4fdf-8ac6-7f8043ede0d6
2023-10-24 23:03:36,238 - INFO - 127.0.0.1 - - [24/Oct/2023 23:03:36] "GET /ask/how%20many%20rows%20does%20this%20have HTTP/1.1" 200 -
2023-10-24 23:06:20,633 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/main.py', reloading
2023-10-24 23:06:20,634 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/main.py', reloading
2023-10-24 23:06:20,635 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/main.py', reloading
2023-10-24 23:06:21,159 - INFO -  * Restarting with watchdog (inotify)
2023-10-24 23:06:22,329 - WARNING -  * Debugger is active!
2023-10-24 23:06:22,330 - INFO -  * Debugger PIN: 448-280-150
2023-10-24 23:06:25,921 - INFO - Question: how many rows does this have
2023-10-24 23:06:25,984 - INFO - Running PandasAI with openai LLM...
2023-10-24 23:06:25,985 - INFO - Prompt ID: d5a64159-0f81-4c35-981f-963336f1996a
2023-10-24 23:06:26,049 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
0,5879146469,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
4,2519667632,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
1,9883193757,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
3,5043252397,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
2,9625134998,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
</dataframe>

<conversation>
User 1: how many rows does this have
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-24 23:06:34,670 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/main.py', reloading
2023-10-24 23:06:34,671 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/main.py', reloading
2023-10-24 23:06:34,672 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/main.py', reloading
2023-10-24 23:06:35,785 - INFO -  * Restarting with watchdog (inotify)
2023-10-24 23:07:50,083 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8080
 * Running on http://192.168.100.17:8080
2023-10-24 23:07:50,083 - INFO - [33mPress CTRL+C to quit[0m
2023-10-24 23:07:50,085 - INFO -  * Restarting with watchdog (inotify)
2023-10-24 23:07:51,286 - WARNING -  * Debugger is active!
2023-10-24 23:07:51,287 - INFO -  * Debugger PIN: 448-280-150
2023-10-24 23:07:53,049 - INFO - Question: how many rows does this have
2023-10-24 23:07:53,104 - INFO - Running PandasAI with openai LLM...
2023-10-24 23:07:53,104 - INFO - Prompt ID: 77580c23-38c2-4785-9a39-f13962535bde
2023-10-24 23:07:53,169 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
1,6023166306,04-30-22,Shipped - Delivered to...,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,2868969580,False,Easy Ship,
0,1483266953,04-30-22,Cancelled...,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,6334589049,False,Easy Ship,
2,1726867535,04-30-22,Shipped...,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,3727990235,True,,
4,2497608833,04-30-22,Shipped...,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,4805562122,False,,
3,4049237102,04-30-22,Cancelled...,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,2124728480,False,Easy Ship,
</dataframe>

<conversation>
User 1: how many rows does this have
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-24 23:08:06,523 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Get the first dataframe from the list
    df = dfs[0]
    
    # Get the number of rows in the dataframe
    num_rows = len(df)
    
    # Return the result as a string
    result = {
        "type": "string",
        "value": f"The dataframe has {num_rows} rows."
    }
    
    return result
```

2023-10-24 23:08:06,525 - INFO - Saving charts to plots/77580c23-38c2-4785-9a39-f13962535bde.png
2023-10-24 23:08:06,531 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/77580c23-38c2-4785-9a39-f13962535bde.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/77580c23-38c2-4785-9a39-f13962535bde.png" }
    """
    df = dfs[0]
    num_rows = len(df)
    result = {'type': 'string', 'value': f'The dataframe has {num_rows} rows.'}
    return result
        ```
2023-10-24 23:08:06,578 - INFO - Answer: {'type': 'string', 'value': 'The dataframe has 128975 rows.'}
2023-10-24 23:08:06,579 - INFO - Executed in: 13.530580043792725s
2023-10-24 23:08:06,581 - INFO - 127.0.0.1 - - [24/Oct/2023 23:08:06] "GET /ask/how%20many%20rows%20does%20this%20have HTTP/1.1" 200 -
2023-10-24 23:16:20,434 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/main.py', reloading
2023-10-24 23:16:20,434 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/main.py', reloading
2023-10-24 23:16:20,435 - INFO -  * Detected change in '/home/mohammadsafi/Chat_with_Csv/main.py', reloading
2023-10-24 23:16:20,926 - INFO -  * Restarting with watchdog (inotify)
2023-10-30 09:34:22,885 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 09:34:22,886 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 09:34:30,168 - INFO - 127.0.0.1 - - [30/Oct/2023 09:34:30] "[33mGET / HTTP/1.1[0m" 404 -
2023-10-30 09:34:30,362 - INFO - 127.0.0.1 - - [30/Oct/2023 09:34:30] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
2023-10-30 09:34:39,060 - INFO - Question: create a table of all colums and number of  null values in them
2023-10-30 09:34:39,103 - INFO - Running PandasAI with openai LLM...
2023-10-30 09:34:39,103 - INFO - Prompt ID: 33cfb145-3f28-46f9-93c3-5effd7eca870
2023-10-30 09:34:39,156 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
4,6621161325,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
3,9355914149,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
0,4674037729,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
2,5506572609,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
1,8568914837,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
</dataframe>

<conversation>
User 1: create a table of all colums and number of  null values in them
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 09:34:47,699 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Create a table of all columns and number of null values in them
    null_values = {}
    for df in dfs:
        for column in df.columns:
            null_count = df[column].isnull().sum()
            null_values[column] = null_count
    
    # Convert the null_values dictionary to a DataFrame
    null_values_df = pd.DataFrame.from_dict(null_values, orient='index', columns=['Null Values'])
    
    # Return the result as a dataframe
    return {"type": "dataframe", "value": null_values_df}
```

2023-10-30 09:34:47,701 - INFO - Saving charts to plots/33cfb145-3f28-46f9-93c3-5effd7eca870.png
2023-10-30 09:34:47,705 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/33cfb145-3f28-46f9-93c3-5effd7eca870.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/33cfb145-3f28-46f9-93c3-5effd7eca870.png" }
    """
    null_values = {}
    for df in dfs:
        for column in df.columns:
            null_count = df[column].isnull().sum()
            null_values[column] = null_count
    null_values_df = pd.DataFrame.from_dict(null_values, orient='index', columns=['Null Values'])
    return {'type': 'dataframe', 'value': null_values_df}
        ```
2023-10-30 09:34:47,707 - WARNING - Error of executing code
2023-10-30 09:34:47,709 - WARNING - Failed to execute code with a correction framework [retry number: 1]
2023-10-30 09:34:47,710 - ERROR - Failed with error: Traceback (most recent call last):
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/pandasai/smart_datalake/__init__.py", line 337, in chat
    result = self._code_manager.execute_code(
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/pandasai/helpers/code_manager.py", line 244, in execute_code
    return analyze_data(self._get_originals(dfs))
  File "<string>", line 21, in analyze_data
AttributeError: 'NoneType' object has no attribute 'columns'
. Retrying
2023-10-30 09:34:47,746 - INFO - Using prompt: 
You are provided with the following pandas DataFrames with the following metadata:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
4,6621161325,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
3,9355914149,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
0,4674037729,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
2,5506572609,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
1,8568914837,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
</dataframe>

The user asked the following question:
User 1: create a table of all colums and number of  null values in them

You generated this python code:
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Create a table of all columns and number of null values in them
    null_values = {}
    for df in dfs:
        for column in df.columns:
            null_count = df[column].isnull().sum()
            null_values[column] = null_count
    
    # Convert the null_values dictionary to a DataFrame
    null_values_df = pd.DataFrame.from_dict(null_values, orient='index', columns=['Null Values'])
    
    # Return the result as a dataframe
    return {"type": "dataframe", "value": null_values_df}

It fails with the following error:
Traceback (most recent call last):
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/pandasai/smart_datalake/__init__.py", line 337, in chat
    result = self._code_manager.execute_code(
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/pandasai/helpers/code_manager.py", line 244, in execute_code
    return analyze_data(self._get_originals(dfs))
  File "<string>", line 21, in analyze_data
AttributeError: 'NoneType' object has no attribute 'columns'


Correct the python code and return a new python code that fixes the above mentioned error. Do not generate the same code again.

2023-10-30 09:34:57,219 - INFO - Saving charts to plots/33cfb145-3f28-46f9-93c3-5effd7eca870.png
2023-10-30 09:34:57,223 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/33cfb145-3f28-46f9-93c3-5effd7eca870.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/33cfb145-3f28-46f9-93c3-5effd7eca870.png" }
    """
    null_values = {}
    for df in dfs:
        if df is not None:
            for column in df.columns:
                null_count = df[column].isnull().sum()
                null_values[column] = null_count
    null_values_df = pd.DataFrame.from_dict(null_values, orient='index', columns=['Null Values'])
    return {'type': 'dataframe', 'value': null_values_df}
        ```
2023-10-30 09:34:57,232 - INFO - Answer: {'type': 'dataframe', 'value': Empty DataFrame
Columns: [Null Values]
Index: []}
2023-10-30 09:34:57,233 - INFO - Executed in: 18.1725070476532s
2023-10-30 09:34:57,233 - INFO - 127.0.0.1 - - [30/Oct/2023 09:34:57] "GET /ask/create%20a%20table%20of%20all%20colums%20and%20number%20of%20%20null%20values%20in%20them HTTP/1.1" 200 -
2023-10-30 09:36:20,935 - INFO - Question: Create a table summarizing the average order amount for each category.
2023-10-30 09:36:20,936 - INFO - Running PandasAI with openai LLM...
2023-10-30 09:36:20,937 - INFO - Prompt ID: 39d0c18a-7664-4140-a599-fa8e2aeff866
2023-10-30 09:36:20,980 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
4,6621161325,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
3,9355914149,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
0,4674037729,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
2,5506572609,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
1,8568914837,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
</dataframe>

<conversation>
User 1: Create a table summarizing the average order amount for each category.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 09:36:28,518 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare: Preprocessing and cleaning data if necessary
    df = dfs[0]
    
    # Process: Manipulating data for analysis
    avg_order_amount = df.groupby('Category')['Amount'].mean().reset_index()
    
    # Analyze: Conducting the actual analysis
    table = avg_order_amount.to_html(index=False)
    
    return {"type": "string", "value": table}
```

2023-10-30 09:36:28,520 - INFO - Saving charts to plots/39d0c18a-7664-4140-a599-fa8e2aeff866.png
2023-10-30 09:36:28,523 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/39d0c18a-7664-4140-a599-fa8e2aeff866.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/39d0c18a-7664-4140-a599-fa8e2aeff866.png" }
    """
    df = dfs[0]
    avg_order_amount = df.groupby('Category')['Amount'].mean().reset_index()
    return {'type': 'string', 'value': table}
        ```
2023-10-30 09:36:28,551 - WARNING - Error of executing code
2023-10-30 09:36:28,567 - WARNING - Failed to execute code with a correction framework [retry number: 1]
2023-10-30 09:36:28,567 - ERROR - Failed with error: Traceback (most recent call last):
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/pandasai/smart_datalake/__init__.py", line 337, in chat
    result = self._code_manager.execute_code(
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/pandasai/helpers/code_manager.py", line 244, in execute_code
    return analyze_data(self._get_originals(dfs))
  File "<string>", line 21, in analyze_data
NameError: name 'table' is not defined
. Retrying
2023-10-30 09:36:28,603 - INFO - Using prompt: 
You are provided with the following pandas DataFrames with the following metadata:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
4,6621161325,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
3,9355914149,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
0,4674037729,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
2,5506572609,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
1,8568914837,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
</dataframe>

The user asked the following question:
User 1: Create a table summarizing the average order amount for each category.

You generated this python code:
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare: Preprocessing and cleaning data if necessary
    df = dfs[0]
    
    # Process: Manipulating data for analysis
    avg_order_amount = df.groupby('Category')['Amount'].mean().reset_index()
    
    # Analyze: Conducting the actual analysis
    table = avg_order_amount.to_html(index=False)
    
    return {"type": "string", "value": table}

It fails with the following error:
Traceback (most recent call last):
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/pandasai/smart_datalake/__init__.py", line 337, in chat
    result = self._code_manager.execute_code(
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/pandasai/helpers/code_manager.py", line 244, in execute_code
    return analyze_data(self._get_originals(dfs))
  File "<string>", line 21, in analyze_data
NameError: name 'table' is not defined


Correct the python code and return a new python code that fixes the above mentioned error. Do not generate the same code again.

2023-10-30 09:36:36,649 - INFO - Saving charts to plots/39d0c18a-7664-4140-a599-fa8e2aeff866.png
2023-10-30 09:36:36,652 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/39d0c18a-7664-4140-a599-fa8e2aeff866.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/39d0c18a-7664-4140-a599-fa8e2aeff866.png" }
    """
    df = dfs[0]
    avg_order_amount = df.groupby('Category')['Amount'].mean().reset_index()
    return {'type': 'string', 'value': table}
        ```
2023-10-30 09:36:36,656 - WARNING - Error of executing code
2023-10-30 09:36:36,681 - WARNING - Failed to execute code with a correction framework [retry number: 2]
2023-10-30 09:36:36,687 - ERROR - Failed with error: Traceback (most recent call last):
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/pandasai/smart_datalake/__init__.py", line 337, in chat
    result = self._code_manager.execute_code(
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/pandasai/helpers/code_manager.py", line 244, in execute_code
    return analyze_data(self._get_originals(dfs))
  File "<string>", line 21, in analyze_data
NameError: name 'table' is not defined
. Retrying
2023-10-30 09:36:36,719 - INFO - Using prompt: 
You are provided with the following pandas DataFrames with the following metadata:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
4,6621161325,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
3,9355914149,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
0,4674037729,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
2,5506572609,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
1,8568914837,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
</dataframe>

The user asked the following question:
User 1: Create a table summarizing the average order amount for each category.

You generated this python code:
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare: Preprocessing and cleaning data if necessary
    df = dfs[0]
    
    # Process: Manipulating data for analysis
    avg_order_amount = df.groupby('Category')['Amount'].mean().reset_index()
    
    # Analyze: Conducting the actual analysis
    table = avg_order_amount.to_html(index=False)
    
    return {"type": "string", "value": table}

It fails with the following error:
Traceback (most recent call last):
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/pandasai/smart_datalake/__init__.py", line 337, in chat
    result = self._code_manager.execute_code(
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/pandasai/helpers/code_manager.py", line 244, in execute_code
    return analyze_data(self._get_originals(dfs))
  File "<string>", line 21, in analyze_data
NameError: name 'table' is not defined


Correct the python code and return a new python code that fixes the above mentioned error. Do not generate the same code again.

2023-10-30 09:36:44,944 - INFO - Saving charts to plots/39d0c18a-7664-4140-a599-fa8e2aeff866.png
2023-10-30 09:36:44,948 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/39d0c18a-7664-4140-a599-fa8e2aeff866.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/39d0c18a-7664-4140-a599-fa8e2aeff866.png" }
    """
    df = dfs[0]
    avg_order_amount = df.groupby('Category')['Amount'].mean().reset_index()
    return {'type': 'string', 'value': table}
        ```
2023-10-30 09:36:44,952 - WARNING - Error of executing code
2023-10-30 09:36:44,977 - WARNING - Failed to execute code with a correction framework [retry number: 3]
2023-10-30 09:36:44,985 - ERROR - Failed with error: Traceback (most recent call last):
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/pandasai/smart_datalake/__init__.py", line 337, in chat
    result = self._code_manager.execute_code(
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/pandasai/helpers/code_manager.py", line 244, in execute_code
    return analyze_data(self._get_originals(dfs))
  File "<string>", line 21, in analyze_data
NameError: name 'table' is not defined
. Retrying
2023-10-30 09:36:45,017 - INFO - Using prompt: 
You are provided with the following pandas DataFrames with the following metadata:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
4,6621161325,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
3,9355914149,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
0,4674037729,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
2,5506572609,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
1,8568914837,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
</dataframe>

The user asked the following question:
User 1: Create a table summarizing the average order amount for each category.

You generated this python code:
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare: Preprocessing and cleaning data if necessary
    df = dfs[0]
    
    # Process: Manipulating data for analysis
    avg_order_amount = df.groupby('Category')['Amount'].mean().reset_index()
    
    # Analyze: Conducting the actual analysis
    table = avg_order_amount.to_html(index=False)
    
    return {"type": "string", "value": table}

It fails with the following error:
Traceback (most recent call last):
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/pandasai/smart_datalake/__init__.py", line 337, in chat
    result = self._code_manager.execute_code(
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/pandasai/helpers/code_manager.py", line 244, in execute_code
    return analyze_data(self._get_originals(dfs))
  File "<string>", line 21, in analyze_data
NameError: name 'table' is not defined


Correct the python code and return a new python code that fixes the above mentioned error. Do not generate the same code again.

2023-10-30 09:36:51,701 - INFO - Saving charts to plots/39d0c18a-7664-4140-a599-fa8e2aeff866.png
2023-10-30 09:36:51,702 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/39d0c18a-7664-4140-a599-fa8e2aeff866.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/39d0c18a-7664-4140-a599-fa8e2aeff866.png" }
    """
    df = dfs[0]
    avg_order_amount = df.groupby('Category')['Amount'].mean().reset_index()
    return {'type': 'string', 'value': table}
        ```
2023-10-30 09:36:51,704 - WARNING - Error of executing code
2023-10-30 09:36:51,726 - WARNING - Failed to execute code with a correction framework [retry number: 4]
2023-10-30 09:36:51,733 - ERROR - Failed with error: Traceback (most recent call last):
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/pandasai/smart_datalake/__init__.py", line 337, in chat
    result = self._code_manager.execute_code(
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/pandasai/helpers/code_manager.py", line 244, in execute_code
    return analyze_data(self._get_originals(dfs))
  File "<string>", line 21, in analyze_data
NameError: name 'table' is not defined
. Retrying
2023-10-30 09:36:51,777 - INFO - Using prompt: 
You are provided with the following pandas DataFrames with the following metadata:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
4,6621161325,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
3,9355914149,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
0,4674037729,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
2,5506572609,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
1,8568914837,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
</dataframe>

The user asked the following question:
User 1: Create a table summarizing the average order amount for each category.

You generated this python code:
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare: Preprocessing and cleaning data if necessary
    df = dfs[0]
    
    # Process: Manipulating data for analysis
    avg_order_amount = df.groupby('Category')['Amount'].mean().reset_index()
    
    # Analyze: Conducting the actual analysis
    table = avg_order_amount.to_html(index=False)
    
    return {"type": "string", "value": table}

It fails with the following error:
Traceback (most recent call last):
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/pandasai/smart_datalake/__init__.py", line 337, in chat
    result = self._code_manager.execute_code(
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/pandasai/helpers/code_manager.py", line 244, in execute_code
    return analyze_data(self._get_originals(dfs))
  File "<string>", line 21, in analyze_data
NameError: name 'table' is not defined


Correct the python code and return a new python code that fixes the above mentioned error. Do not generate the same code again.

2023-10-30 09:36:58,872 - INFO - Saving charts to plots/39d0c18a-7664-4140-a599-fa8e2aeff866.png
2023-10-30 09:36:58,875 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/39d0c18a-7664-4140-a599-fa8e2aeff866.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/39d0c18a-7664-4140-a599-fa8e2aeff866.png" }
    """
    df = dfs[0]
    avg_order_amount = df.groupby('Category')['Amount'].mean().reset_index()
    return {'type': 'string', 'value': table}
        ```
2023-10-30 09:36:58,877 - WARNING - Error of executing code
2023-10-30 09:36:58,899 - INFO - 127.0.0.1 - - [30/Oct/2023 09:36:58] "GET /ask/Create%20a%20table%20summarizing%20the%20average%20order%20amount%20for%20each%20category. HTTP/1.1" 200 -
2023-10-30 09:38:00,390 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 09:38:00,390 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 09:38:04,840 - INFO - 127.0.0.1 - - [30/Oct/2023 09:38:04] "[33mGET / HTTP/1.1[0m" 404 -
2023-10-30 09:38:04,990 - INFO - 127.0.0.1 - - [30/Oct/2023 09:38:04] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
2023-10-30 09:38:10,187 - INFO - Question: create a table of all colums and number of  null values in them
2023-10-30 09:38:10,230 - INFO - Running PandasAI with openai LLM...
2023-10-30 09:38:10,231 - INFO - Prompt ID: 09f04df2-4897-4d5f-9ee9-2feaa94b0470
2023-10-30 09:38:10,287 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
0,5553123011,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
4,1983896851,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
2,7027611457,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
1,0953932003,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
3,3594266320,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
</dataframe>

<conversation>
User 1: create a table of all colums and number of  null values in them
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 09:38:18,900 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Create a table of all columns and number of null values in them
    null_values = {}
    for df in dfs:
        for column in df.columns:
            null_count = df[column].isnull().sum()
            null_values[column] = null_count
    
    # Convert the null_values dictionary to a DataFrame
    null_values_df = pd.DataFrame.from_dict(null_values, orient='index', columns=['Null Values'])
    
    return {"type": "dataframe", "value": null_values_df}
```

2023-10-30 09:38:18,902 - INFO - Saving charts to plots/09f04df2-4897-4d5f-9ee9-2feaa94b0470.png
2023-10-30 09:38:18,906 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/09f04df2-4897-4d5f-9ee9-2feaa94b0470.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/09f04df2-4897-4d5f-9ee9-2feaa94b0470.png" }
    """
    null_values = {}
    for df in dfs:
        for column in df.columns:
            null_count = df[column].isnull().sum()
            null_values[column] = null_count
    null_values_df = pd.DataFrame.from_dict(null_values, orient='index', columns=['Null Values'])
    return {'type': 'dataframe', 'value': null_values_df}
        ```
2023-10-30 09:38:18,908 - WARNING - Error of executing code
2023-10-30 09:38:18,910 - WARNING - Failed to execute code with a correction framework [retry number: 1]
2023-10-30 09:38:18,911 - ERROR - Failed with error: Traceback (most recent call last):
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/pandasai/smart_datalake/__init__.py", line 337, in chat
    result = self._code_manager.execute_code(
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/pandasai/helpers/code_manager.py", line 244, in execute_code
    return analyze_data(self._get_originals(dfs))
  File "<string>", line 21, in analyze_data
AttributeError: 'NoneType' object has no attribute 'columns'
. Retrying
2023-10-30 09:38:18,944 - INFO - Using prompt: 
You are provided with the following pandas DataFrames with the following metadata:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
0,5553123011,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
4,1983896851,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
2,7027611457,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
1,0953932003,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
3,3594266320,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
</dataframe>

The user asked the following question:
User 1: create a table of all colums and number of  null values in them

You generated this python code:
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Create a table of all columns and number of null values in them
    null_values = {}
    for df in dfs:
        for column in df.columns:
            null_count = df[column].isnull().sum()
            null_values[column] = null_count
    
    # Convert the null_values dictionary to a DataFrame
    null_values_df = pd.DataFrame.from_dict(null_values, orient='index', columns=['Null Values'])
    
    return {"type": "dataframe", "value": null_values_df}

It fails with the following error:
Traceback (most recent call last):
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/pandasai/smart_datalake/__init__.py", line 337, in chat
    result = self._code_manager.execute_code(
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/pandasai/helpers/code_manager.py", line 244, in execute_code
    return analyze_data(self._get_originals(dfs))
  File "<string>", line 21, in analyze_data
AttributeError: 'NoneType' object has no attribute 'columns'


Correct the python code and return a new python code that fixes the above mentioned error. Do not generate the same code again.

2023-10-30 09:38:29,193 - INFO - Saving charts to plots/09f04df2-4897-4d5f-9ee9-2feaa94b0470.png
2023-10-30 09:38:29,196 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/09f04df2-4897-4d5f-9ee9-2feaa94b0470.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/09f04df2-4897-4d5f-9ee9-2feaa94b0470.png" }
    """
    null_values = {}
    for df in dfs:
        if df is not None:
            for column in df.columns:
                null_count = df[column].isnull().sum()
                null_values[column] = null_count
    null_values_df = pd.DataFrame.from_dict(null_values, orient='index', columns=['Null Values'])
    return {'type': 'dataframe', 'value': null_values_df}
        ```
2023-10-30 09:38:29,204 - INFO - Answer: {'type': 'dataframe', 'value': Empty DataFrame
Columns: [Null Values]
Index: []}
2023-10-30 09:38:29,205 - INFO - Executed in: 19.017536878585815s
2023-10-30 09:38:29,206 - INFO - 127.0.0.1 - - [30/Oct/2023 09:38:29] "GET /ask/create%20a%20table%20of%20all%20colums%20and%20number%20of%20%20null%20values%20in%20them HTTP/1.1" 200 -
2023-10-30 09:38:44,910 - INFO - Question: Create a table summarizing the average order amount for each category.
2023-10-30 09:38:44,910 - INFO - Running PandasAI with openai LLM...
2023-10-30 09:38:44,911 - INFO - Prompt ID: ab116cdb-971d-48db-ad36-df39fa3b4a40
2023-10-30 09:38:44,950 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
0,5553123011,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
4,1983896851,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
2,7027611457,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
1,0953932003,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
3,3594266320,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
</dataframe>

<conversation>
User 1: Create a table summarizing the average order amount for each category.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 09:38:52,743 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0]
    
    # Process
    avg_order_amount = df.groupby('Category')['Amount'].mean().reset_index()
    
    # Analyze
    result = {
        "type": "dataframe",
        "value": avg_order_amount
    }
    
    return result
```

2023-10-30 09:38:52,745 - INFO - Saving charts to plots/ab116cdb-971d-48db-ad36-df39fa3b4a40.png
2023-10-30 09:38:52,748 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/ab116cdb-971d-48db-ad36-df39fa3b4a40.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/ab116cdb-971d-48db-ad36-df39fa3b4a40.png" }
    """
    df = dfs[0]
    avg_order_amount = df.groupby('Category')['Amount'].mean().reset_index()
    result = {'type': 'dataframe', 'value': avg_order_amount}
    return result
        ```
2023-10-30 09:38:52,798 - INFO - Answer: {'type': 'dataframe', 'value':         Category      Amount
0         Blouse  520.327106
1         Bottom  358.733286
2        Dupatta  305.000000
3   Ethnic Dress  723.895389
4          Saree  799.572645
5            Set  833.385571
6            Top  526.098603
7  Western Dress  762.790580
8          kurta  455.927108}
2023-10-30 09:38:52,799 - INFO - Executed in: 7.889325380325317s
2023-10-30 09:38:52,800 - INFO - 127.0.0.1 - - [30/Oct/2023 09:38:52] "GET /ask/Create%20a%20table%20summarizing%20the%20average%20order%20amount%20for%20each%20category. HTTP/1.1" 200 -
2023-10-30 09:41:53,581 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 09:41:53,581 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 09:42:06,949 - INFO - Question: Create a table summarizing the average order amount for each category.
2023-10-30 09:42:07,000 - INFO - Running PandasAI with openai LLM...
2023-10-30 09:42:07,001 - INFO - Prompt ID: c59eac07-1ab1-4646-9388-e683c834fea1
2023-10-30 09:42:07,058 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
3,6060435342,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
0,8972112413,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
1,7514488222,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
2,5984021961,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
4,5841368351,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
</dataframe>

<conversation>
User 1: Create a table summarizing the average order amount for each category.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 09:42:13,644 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0]
    
    # Process
    avg_order_amount = df.groupby('Category')['Amount'].mean()
    summary_table = pd.DataFrame({'Category': avg_order_amount.index, 'Average Order Amount': avg_order_amount.values})
    
    # Analyze
    return {"type": "dataframe", "value": summary_table}
```

2023-10-30 09:42:13,646 - INFO - Saving charts to plots/c59eac07-1ab1-4646-9388-e683c834fea1.png
2023-10-30 09:42:13,649 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/c59eac07-1ab1-4646-9388-e683c834fea1.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/c59eac07-1ab1-4646-9388-e683c834fea1.png" }
    """
    df = dfs[0]
    avg_order_amount = df.groupby('Category')['Amount'].mean()
    summary_table = pd.DataFrame({'Category': avg_order_amount.index, 'Average Order Amount': avg_order_amount.values})
    return {'type': 'dataframe', 'value': summary_table}
        ```
2023-10-30 09:42:13,703 - INFO - Answer: {'type': 'dataframe', 'value':         Category  Average Order Amount
0         Blouse            520.327106
1         Bottom            358.733286
2        Dupatta            305.000000
3   Ethnic Dress            723.895389
4          Saree            799.572645
5            Set            833.385571
6            Top            526.098603
7  Western Dress            762.790580
8          kurta            455.927108}
2023-10-30 09:42:13,704 - INFO - Executed in: 6.754896402359009s
2023-10-30 09:42:13,704 - INFO - 127.0.0.1 - - [30/Oct/2023 09:42:13] "GET /ask/Create%20a%20table%20summarizing%20the%20average%20order%20amount%20for%20each%20category. HTTP/1.1" 200 -
2023-10-30 09:44:31,286 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 09:44:31,286 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 09:44:38,560 - INFO - Question: Create a table summarizing the average order amount for each category.
2023-10-30 09:44:38,606 - INFO - Running PandasAI with openai LLM...
2023-10-30 09:44:38,607 - INFO - Prompt ID: cd2451b1-85c2-4adf-a7f7-e70c80e014d0
2023-10-30 09:44:38,665 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
4,3390149630,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
0,2341823642,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
2,7016152326,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
3,0561958216,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
1,3123535864,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
</dataframe>

<conversation>
User 1: Create a table summarizing the average order amount for each category.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 09:44:46,171 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0].copy()
    
    # Process
    df['Amount'] = pd.to_numeric(df['Amount'], errors='coerce')
    avg_order_amount = df.groupby('Category')['Amount'].mean().reset_index()
    
    # Analyze
    result = {
        "type": "dataframe",
        "value": avg_order_amount
    }
    
    return result
```

2023-10-30 09:44:46,173 - INFO - Saving charts to plots/cd2451b1-85c2-4adf-a7f7-e70c80e014d0.png
2023-10-30 09:44:46,174 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/cd2451b1-85c2-4adf-a7f7-e70c80e014d0.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/cd2451b1-85c2-4adf-a7f7-e70c80e014d0.png" }
    """
    df = dfs[0].copy()
    df['Amount'] = pd.to_numeric(df['Amount'], errors='coerce')
    avg_order_amount = df.groupby('Category')['Amount'].mean().reset_index()
    result = {'type': 'dataframe', 'value': avg_order_amount}
    return result
        ```
2023-10-30 09:44:46,241 - INFO - Answer: {'type': 'dataframe', 'value':         Category      Amount
0         Blouse  520.327106
1         Bottom  358.733286
2        Dupatta  305.000000
3   Ethnic Dress  723.895389
4          Saree  799.572645
5            Set  833.385571
6            Top  526.098603
7  Western Dress  762.790580
8          kurta  455.927108}
2023-10-30 09:44:46,241 - INFO - Executed in: 7.68166446685791s
2023-10-30 09:44:46,242 - INFO - 127.0.0.1 - - [30/Oct/2023 09:44:46] "GET /ask/Create%20a%20table%20summarizing%20the%20average%20order%20amount%20for%20each%20category. HTTP/1.1" 200 -
2023-10-30 09:46:25,496 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 09:46:25,496 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 09:46:32,977 - INFO - Question: Create a table summarizing the average order amount for each category.
2023-10-30 09:46:33,019 - INFO - Running PandasAI with openai LLM...
2023-10-30 09:46:33,019 - INFO - Prompt ID: a291d198-c78b-45fa-948b-45663cfbda26
2023-10-30 09:46:33,088 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
2,7873092506,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping ...,True,,
4,9302877660,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
0,9893933899,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
1,0615494800,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,Amazon PLCC Free-Finan...,False,Easy Ship,
3,2396090056,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
</dataframe>

<conversation>
User 1: Create a table summarizing the average order amount for each category.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 09:46:41,930 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare: Preprocessing and cleaning data if necessary
    df = dfs[0]
    
    # Process: Manipulating data for analysis
    avg_order_amount = df.groupby('Category')['Amount'].mean().reset_index()
    
    # Analyze: Conducting the actual analysis
    table = avg_order_amount.rename(columns={'Amount': 'Average Order Amount'})
    
    return {"type": "dataframe", "value": table}
```

2023-10-30 09:46:41,932 - INFO - Saving charts to plots/a291d198-c78b-45fa-948b-45663cfbda26.png
2023-10-30 09:46:41,933 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/a291d198-c78b-45fa-948b-45663cfbda26.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/a291d198-c78b-45fa-948b-45663cfbda26.png" }
    """
    df = dfs[0]
    avg_order_amount = df.groupby('Category')['Amount'].mean().reset_index()
    table = avg_order_amount.rename(columns={'Amount': 'Average Order Amount'})
    return {'type': 'dataframe', 'value': table}
        ```
2023-10-30 09:46:41,976 - INFO - Answer: {'type': 'dataframe', 'value':         Category  Average Order Amount
0         Blouse            520.327106
1         Bottom            358.733286
2        Dupatta            305.000000
3   Ethnic Dress            723.895389
4          Saree            799.572645
5            Set            833.385571
6            Top            526.098603
7  Western Dress            762.790580
8          kurta            455.927108}
2023-10-30 09:46:41,977 - INFO - Executed in: 9.000231266021729s
2023-10-30 09:46:41,978 - INFO - 127.0.0.1 - - [30/Oct/2023 09:46:41] "GET /ask/Create%20a%20table%20summarizing%20the%20average%20order%20amount%20for%20each%20category. HTTP/1.1" 200 -
2023-10-30 09:47:36,443 - INFO - Question: Provide a summary of the 'Amount' column, including its mean, median, and standard deviation.
2023-10-30 09:47:36,443 - INFO - Running PandasAI with openai LLM...
2023-10-30 09:47:36,444 - INFO - Prompt ID: 3099296b-519b-4f75-aa50-b2fb545c9dc6
2023-10-30 09:47:36,483 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
2,7873092506,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping ...,True,,
4,9302877660,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
0,9893933899,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
1,0615494800,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,Amazon PLCC Free-Finan...,False,Easy Ship,
3,2396090056,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
</dataframe>

<conversation>
User 1: Provide a summary of the 'Amount' column, including its mean, median, and standard deviation.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 09:47:45,182 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd
import numpy as np

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0]
    
    # Process
    amount_summary = df['Amount'].describe()
    
    # Analyze
    mean = amount_summary['mean']
    median = amount_summary['50%']
    std_dev = amount_summary['std']
    
    summary = f"The mean of the 'Amount' column is {mean:.2f}, the median is {median:.2f}, and the standard deviation is {std_dev:.2f}."
    
    return {"type": "string", "value": summary}
```

2023-10-30 09:47:45,185 - INFO - Saving charts to plots/3099296b-519b-4f75-aa50-b2fb545c9dc6.png
2023-10-30 09:47:45,189 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/3099296b-519b-4f75-aa50-b2fb545c9dc6.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/3099296b-519b-4f75-aa50-b2fb545c9dc6.png" }
    """
    df = dfs[0]
    amount_summary = df['Amount'].describe()
    mean = amount_summary['mean']
    median = amount_summary['50%']
    std_dev = amount_summary['std']
    summary = f"The mean of the 'Amount' column is {mean:.2f}, the median is {median:.2f}, and the standard deviation is {std_dev:.2f}."
    return {'type': 'string', 'value': summary}
        ```
2023-10-30 09:47:45,222 - INFO - Answer: {'type': 'string', 'value': "The mean of the 'Amount' column is 648.56, the median is 605.00, and the standard deviation is 281.21."}
2023-10-30 09:47:45,222 - INFO - Executed in: 8.779853582382202s
2023-10-30 09:47:45,223 - INFO - 127.0.0.1 - - [30/Oct/2023 09:47:45] "GET /ask/Provide%20a%20summary%20of%20the%20'Amount'%20column,%20including%20its%20mean,%20median,%20and%20standard%20deviation. HTTP/1.1" 200 -
2023-10-30 09:50:56,941 - INFO - Question: Provide a summary of the 'Amount' column, including its mean, median, and standard deviation.
2023-10-30 09:50:56,942 - INFO - Running PandasAI with openai LLM...
2023-10-30 09:50:56,943 - INFO - Prompt ID: a2586ec0-23bc-4862-a560-1010764e0eaa
2023-10-30 09:50:56,990 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
2,7873092506,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping ...,True,,
4,9302877660,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
0,9893933899,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
1,0615494800,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,Amazon PLCC Free-Finan...,False,Easy Ship,
3,2396090056,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
</dataframe>

<conversation>
User 1: Provide a summary of the 'Amount' column, including its mean, median, and standard deviation.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 09:51:02,747 - INFO - Question: Provide a summary of the 'Amount' column, including its mean, median, and standard deviation.
2023-10-30 09:51:02,747 - INFO - Running PandasAI with openai LLM...
2023-10-30 09:51:02,748 - INFO - Prompt ID: a8472ef3-d065-4436-9d7e-a075f6550241
2023-10-30 09:51:02,789 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
2,7873092506,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping ...,True,,
4,9302877660,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
0,9893933899,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
1,0615494800,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,Amazon PLCC Free-Finan...,False,Easy Ship,
3,2396090056,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
</dataframe>

<conversation>
User 1: Provide a summary of the 'Amount' column, including its mean, median, and standard deviation.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 09:51:05,875 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd
import numpy as np

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0]
    
    # Process
    amount_summary = df['Amount'].describe()
    
    # Analyze
    mean = amount_summary['mean']
    median = amount_summary['50%']
    std_dev = amount_summary['std']
    
    summary = f"The mean of the 'Amount' column is {mean:.2f}, the median is {median:.2f}, and the standard deviation is {std_dev:.2f}."
    
    return {"type": "string", "value": summary}
```

2023-10-30 09:51:05,877 - INFO - Saving charts to plots/a8472ef3-d065-4436-9d7e-a075f6550241.png
2023-10-30 09:51:05,881 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/a8472ef3-d065-4436-9d7e-a075f6550241.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/a8472ef3-d065-4436-9d7e-a075f6550241.png" }
    """
    df = dfs[0]
    amount_summary = df['Amount'].describe()
    mean = amount_summary['mean']
    median = amount_summary['50%']
    std_dev = amount_summary['std']
    summary = f"The mean of the 'Amount' column is {mean:.2f}, the median is {median:.2f}, and the standard deviation is {std_dev:.2f}."
    return {'type': 'string', 'value': summary}
        ```
2023-10-30 09:51:05,911 - INFO - Answer: {'type': 'string', 'value': "The mean of the 'Amount' column is 648.56, the median is 605.00, and the standard deviation is 281.21."}
2023-10-30 09:51:05,912 - INFO - Executed in: 3.1653058528900146s
2023-10-30 09:51:05,912 - INFO - 127.0.0.1 - - [30/Oct/2023 09:51:05] "GET /ask/Provide%20a%20summary%20of%20the%20'Amount'%20column,%20including%20its%20mean,%20median,%20and%20standard%20deviation. HTTP/1.1" 200 -
2023-10-30 09:51:10,992 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd
import numpy as np

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0]
    
    # Process
    amount_summary = df['Amount'].describe()
    
    # Analyze
    mean = amount_summary['mean']
    median = amount_summary['50%']
    std_dev = amount_summary['std']
    
    summary = f"The mean of the 'Amount' column is {mean:.2f}, the median is {median:.2f}, and the standard deviation is {std_dev:.2f}."
    
    return {"type": "string", "value": summary}
```

2023-10-30 09:51:10,993 - INFO - Saving charts to plots/a8472ef3-d065-4436-9d7e-a075f6550241.png
2023-10-30 09:51:10,994 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/a8472ef3-d065-4436-9d7e-a075f6550241.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/a8472ef3-d065-4436-9d7e-a075f6550241.png" }
    """
    df = dfs[0]
    amount_summary = df['Amount'].describe()
    mean = amount_summary['mean']
    median = amount_summary['50%']
    std_dev = amount_summary['std']
    summary = f"The mean of the 'Amount' column is {mean:.2f}, the median is {median:.2f}, and the standard deviation is {std_dev:.2f}."
    return {'type': 'string', 'value': summary}
        ```
2023-10-30 09:51:11,019 - INFO - Answer: {'type': 'string', 'value': "The mean of the 'Amount' column is 648.56, the median is 605.00, and the standard deviation is 281.21."}
2023-10-30 09:51:11,020 - INFO - Executed in: 8.273289203643799s
2023-10-30 09:51:11,020 - INFO - 127.0.0.1 - - [30/Oct/2023 09:51:11] "GET /ask/Provide%20a%20summary%20of%20the%20'Amount'%20column,%20including%20its%20mean,%20median,%20and%20standard%20deviation. HTTP/1.1" 200 -
2023-10-30 09:52:26,912 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 09:52:26,912 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 09:52:52,324 - INFO - Question: Create a table summarizing the average order amount for each category.
2023-10-30 09:52:52,370 - INFO - Running PandasAI with openai LLM...
2023-10-30 09:52:52,371 - INFO - Prompt ID: 4fcd82af-bb50-408b-a20e-ea51070df58e
2023-10-30 09:52:52,428 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
2,5617280809,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping ...,True,,
0,8706886463,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
3,0006688165,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
1,0907374447,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,Amazon PLCC Free-Finan...,False,Easy Ship,
4,8470805724,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
</dataframe>

<conversation>
User 1: Create a table summarizing the average order amount for each category.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 09:52:59,342 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare: Preprocessing and cleaning data if necessary
    df = dfs[0]
    
    # Process: Manipulating data for analysis
    avg_order_amount = df.groupby('Category')['Amount'].mean()
    
    # Analyze: Conducting the actual analysis
    result = pd.DataFrame(avg_order_amount, columns=['Average Order Amount'])
    
    return {"type": "dataframe", "value": result}
```

2023-10-30 09:52:59,344 - INFO - Saving charts to plots/4fcd82af-bb50-408b-a20e-ea51070df58e.png
2023-10-30 09:52:59,348 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/4fcd82af-bb50-408b-a20e-ea51070df58e.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/4fcd82af-bb50-408b-a20e-ea51070df58e.png" }
    """
    df = dfs[0]
    avg_order_amount = df.groupby('Category')['Amount'].mean()
    result = pd.DataFrame(avg_order_amount, columns=['Average Order Amount'])
    return {'type': 'dataframe', 'value': result}
        ```
2023-10-30 09:52:59,398 - INFO - Answer: {'type': 'dataframe', 'value': Empty DataFrame
Columns: [Average Order Amount]
Index: []}
2023-10-30 09:52:59,399 - INFO - Executed in: 7.075448513031006s
2023-10-30 09:52:59,400 - ERROR - Exception on /ask/Create a table summarizing the average order amount for each category. [GET]
Traceback (most recent call last):
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/flask/app.py", line 1455, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/flask/app.py", line 870, in full_dispatch_request
    return self.finalize_request(rv)
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/flask/app.py", line 889, in finalize_request
    response = self.make_response(rv)
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/flask/app.py", line 1197, in make_response
    raise TypeError(
TypeError: The view function did not return a valid response. The return type must be a string, dict, list, tuple with headers or status, Response instance, or WSGI callable, but it was a set.
2023-10-30 09:52:59,400 - INFO - 127.0.0.1 - - [30/Oct/2023 09:52:59] "[35m[1mGET /ask/Create%20a%20table%20summarizing%20the%20average%20order%20amount%20for%20each%20category. HTTP/1.1[0m" 500 -
2023-10-30 09:55:47,107 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 09:55:47,107 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 09:55:56,805 - INFO - Question: Create a table summarizing the average order amount for each category.
2023-10-30 09:55:56,853 - INFO - Running PandasAI with openai LLM...
2023-10-30 09:55:56,854 - INFO - Prompt ID: 63736080-4592-4dc6-bf21-4cb789f84722
2023-10-30 09:55:56,908 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
3,6624753442,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
0,3616967359,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
2,6523306077,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
1,7967944463,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
4,8571834105,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
</dataframe>

<conversation>
User 1: Create a table summarizing the average order amount for each category.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 09:56:04,381 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0]
    
    # Process
    avg_order_amount = df.groupby('Category')['Amount'].mean().reset_index()
    
    # Analyze
    result = {
        "type": "dataframe",
        "value": avg_order_amount
    }
    
    return result
```

2023-10-30 09:56:04,381 - INFO - Saving charts to plots/63736080-4592-4dc6-bf21-4cb789f84722.png
2023-10-30 09:56:04,383 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/63736080-4592-4dc6-bf21-4cb789f84722.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/63736080-4592-4dc6-bf21-4cb789f84722.png" }
    """
    df = dfs[0]
    avg_order_amount = df.groupby('Category')['Amount'].mean().reset_index()
    result = {'type': 'dataframe', 'value': avg_order_amount}
    return result
        ```
2023-10-30 09:56:04,428 - INFO - Answer: {'type': 'dataframe', 'value':         Category      Amount
0         Blouse  520.327106
1         Bottom  358.733286
2        Dupatta  305.000000
3   Ethnic Dress  723.895389
4          Saree  799.572645
5            Set  833.385571
6            Top  526.098603
7  Western Dress  762.790580
8          kurta  455.927108}
2023-10-30 09:56:04,428 - INFO - Executed in: 7.623561859130859s
2023-10-30 09:56:04,430 - INFO - 127.0.0.1 - - [30/Oct/2023 09:56:04] "GET /ask/Create%20a%20table%20summarizing%20the%20average%20order%20amount%20for%20each%20category. HTTP/1.1" 200 -
2023-10-30 09:56:53,166 - INFO - Question: List all unique 'SKU' values in the dataset.
2023-10-30 09:56:53,167 - INFO - Running PandasAI with openai LLM...
2023-10-30 09:56:53,167 - INFO - Prompt ID: 3ce9ecab-885b-4f49-92cd-f9e39c8ebb0b
2023-10-30 09:56:53,206 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
3,6624753442,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
0,3616967359,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
2,6523306077,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
1,7967944463,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
4,8571834105,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
</dataframe>

<conversation>
User 1: List all unique 'SKU' values in the dataset.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 09:57:00,810 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Extract the SKU column from the dataframe
    sku_values = dfs[0]['SKU'].unique().tolist()
    
    # Return the unique SKU values as a list
    return {"type": "list", "value": sku_values}
```

2023-10-30 09:57:00,811 - INFO - Saving charts to plots/3ce9ecab-885b-4f49-92cd-f9e39c8ebb0b.png
2023-10-30 09:57:00,814 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/3ce9ecab-885b-4f49-92cd-f9e39c8ebb0b.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/3ce9ecab-885b-4f49-92cd-f9e39c8ebb0b.png" }
    """
    sku_values = dfs[0]['SKU'].unique().tolist()
    return {'type': 'list', 'value': sku_values}
        ```
2023-10-30 09:57:00,837 - INFO - Answer: {'type': 'list', 'value': ['SET389-KR-NP-S', 'JNE3781-KR-XXXL', 'JNE3371-KR-XL', 'J0341-DR-L', 'JNE3671-TU-XXXL', 'SET264-KR-NP-XL', 'J0095-SET-L', 'JNE3405-KR-S', 'SET200-KR-NP-A-XXXL', 'JNE3461-KR-XXL', 'JNE3160-KR-G-S', 'JNE3500-KR-XS', 'JNE3405-KR-XS', 'SET182-KR-DH-XS', 'J0351-SET-L', 'PJNE3368-KR-6XL', 'JNE3721-KR-XXL', 'JNE3405-KR-XL', 'JNE3697-KR-XXL', 'SET254-KR-NP-XS', 'JNE3795-KR-XXXL', 'SET345-KR-NP-M', 'JNE3373-KR-L', 'SET291-KR-PP-M', 'MEN5002-KR-L', 'NW030-TP-PJ-XS', 'JNE3415-KR-XXXL', 'PJNE2199-KR-N-4XL', 'JNE3567-KR-M', 'JNE2132-KR-398-XXXL', 'J0341-DR-S', 'MEN5009-KR-XL', 'J0011-LCD-M', 'JNE3766-KR-M', 'JNE3373-KR-XL', 'MEN5001-KR-XL', 'SET345-KR-NP-L', 'JNE3787-KR-S', 'JNE3543-KR-S', 'JNE3405-KR-L', 'J0211-DR-XXL', 'J0401-DR-XXXL', 'JNE2153-KR-278-A-M', 'SET360-KR-NP-M', 'SET268-KR-NP-L', 'SET183-KR-DH-S', 'J0230-SKD-L', 'JNE3744-TU-S', 'JNE3510-KR-S', 'JNE3405-KR-M', 'J0186-SET-S', 'J0003-SET-M', 'SET282-KR-PP-M', 'JNE1407-BLACK-KR-UDF18-XL', 'J0301-TP-L', 'JNE3869-DR-S', 'SET324-KR-NP-XS', 'SET279-LC-S', 'JNE2014-KR-178-XXL', 'NW005-ST-PJ-XL', 'JNE2270-KR-487-A-M', 'JNE3579-KR-M', 'SET347-KR-NP-XS', 'SET264-KR-NP-M', 'JNE3373-KR-XXL', 'SET333-KR-DPT-XXL', 'JNE3645-TP-N-L', 'SET233-KR-PP-L', 'J0381-SKD-XXXL', 'JNE3068-KR-A-XL', 'JNE3718-KR-M', 'SET386-KR-NP-S', 'JNE3745-KR-XXL', 'JNE3467-KR-XL', 'JNE3721-KR-L', 'JNE3405-KR-XXL', 'SET295-KR-NP-XXXL', 'JNE3861-DR-XL', 'SET288-KR-NP-XXXL', 'SET394-KR-NP-XXXL', 'SET397-KR-NP-XXXL', 'MEN5002-KR-XXL', 'SET377-KR-NP-M', 'JNE3510-KR-M', 'BTM038-PP-XXXL', 'J0343-DR-M', 'J0341-DR-XL', 'J0295-DR-XXL', 'JNE3560-KR-M', 'J0333-DR-XXXL', 'SET389-KR-NP-M', 'JNE3801-KR-XXXL', 'SET098-KR-PP-M', 'MEN5013-KR-L', 'J0003-SET-L', 'JNE3718-KR-XXXL', 'SET347-KR-NP-S', 'JNE3391-KR-XXL', 'SET277-KR-NP-XXL', 'J0293-DR-S', 'SET154-KR-NP-XL', 'JNE3439-KR-XL', 'SET291-KR-PP-XL', 'SET293-KR-NP-M', 'JNE3648-TP-N-M', 'JNE3334-KR-M', 'SET331-KR-NP-XS', 'SET265-KR-NP-S', 'JNE3718-KR-S', 'SET397-KR-NP  -M', 'JNE3861-DR-XXL', 'J0335-DR-XL', 'J0335-DR-XXL', 'JNE1525-KR-UDF19-A-S', 'JNE3654-TP-XL', 'JNE3261-KR-S', 'SET324-KR-NP-S', 'SET332-KR-PP-S', 'SET324-KR-NP-XXXL', 'SET280-KR-PP-S', 'JNE3618-KR-XXL', 'SET304-KR-DPT-XS', 'MEN5032-KR-XXXL', 'SET110-KR-PP-XXL', 'SET324-KR-NP-M', 'SET269-KR-NP-XXXL', 'JNE3794-KR-M', 'JNE3291-KR-XXL', 'JNE3440-KR-N-XXXL', 'JNE2270-KR-487-A-XXL', 'JNE3261-KR-M', 'SET110-KR-PP-M', 'J0300-TP-XXXL', 'JNE3810-KR-S', 'JNE3461-KR-XL', 'JNE3429-KR-XL', 'JNE3710-DR-S', 'J0113-TP-XS', 'SET355-KR-PP-M', 'J0009-SKD-S', 'J0248-KR-DPT-XL', 'JNE3560-KR-XL', 'JNE3373-KR-XXXL', 'SET398-KR-PP-L', 'NW032-ST-CP-XXL', 'SET361-KR-NP-S', 'JNE3797-KR-L', 'JNE3887-KR-XL', 'JNE3870-DR-XXL', 'SET345-KR-NP-XS', 'NW013-ST-SR-L', 'JNE2014-KR-178-XL', 'JNE3612-KR-S', 'PJNE2100-KR-N-6XL', 'SET398-KR-PP-XXXL', 'J0006-SET-M', 'JNE3437-KR-S', 'JNE3465-KR-S', 'J0373-KR-XXXL', 'J0344-TP-XXXL', 'J0118-TP-XXL', 'SET200-KR-NP-A-XS', 'JNE1998-KR-311-XXL', 'MEN5004-KR-XXXL', 'SET345-KR-NP-XXL', 'JNE3654-TP-L', 'J0344-TP-L', 'J0334-TP-L', 'J0230-SKD-S', 'JNE1233-BLUE-KR-031-XXL', 'J0295-DR-M', 'SET324-KR-NP-L', 'J0147-SET-XL', 'J0308-DR-L', 'NW030-TP-PJ-L', 'SET360-KR-NP-XL', 'PJNE3373-KR-N-6XL', 'JNE3449-KR-XXL', 'JNE3786-KR-S', 'J0003-SET-XXL', 'J0314-KR-M', 'J0341-DR-M', 'PJNE3068-KR-4XL', 'J0340-TP-M', 'JNE3687-TU-M', 'J0376-SKD-L', 'J0198-TP-S', 'JNE3453-KR-S', 'SET398-KR-PP-M', 'NW033-ST-CP-XXXL', 'NW037-TP-SR-XXXL', 'JNE3618-KR-M', 'SET290-KR-DPT-M', 'JNE3568-KR-XXL', 'J0003-SET-XXXL', 'JNE2153-KR-278-A-S', 'JNE3645-TP-N-XS', 'JNE3662-TP-XS', 'JNE3440-KR-N-L', 'SET331-KR-NP-S', 'J0301-TP-M', 'MEN5004-KR-XL', 'J0352-KR-S', 'JNE3160-KR-G-XXL', 'JNE3798-KR-M', 'JNE3690-TU-XL', 'SET355-KR-PP-XXL', 'SET317-KR-PP-XXL', 'SET375-KR-NP-XL', 'JNE3371-KR-M', 'SET116-KR-NP-XL', 'SET147-KR-NP-XL', 'SET397-KR-NP-XL', 'SET300-KR-NP-L', 'JNE3384-KR-M', 'JNE3291-KR-XL', 'SET291-KR-PP-L', 'JNE3399-KR-L', 'JNE3440-KR-N-XS', 'SET363-KR-NP-XXL', 'J0348-SET-S', 'J0399-DR-M', 'JNE3797-KR-M', 'JNE3440-KR-N-M', 'JNE3802-KR-M', 'J0285-SKD-M', 'SET322-KR-SHA-XL', 'MEN5021-KR-XL', 'PJ0096-KR-N-5XL', 'JNE3461-KR-M', 'SET383-KR-NP-L', 'J0002-SKD-XXXL', 'SET344-KR-NP-XXXL', 'JNE3465-KR-XXL', 'SET324-KR-NP-XXL', 'SET184-KR-PP-XXXL', 'J0008-SKD-S', 'J0008-SKD-XXL', 'J0013-SKD-XXL', 'J0208-DR-S', 'SET344-KR-NP-XL', 'NW001-TP-PJ-XXL', 'SET304-KR-DPT-S', 'SET265-KR-NP-XL', 'SET004-KR-SP-A-S', 'J0012-SKD-M', 'JNE3465-KR-M', 'SET374-KR-NP-XS', 'JNE3567-KR-XL', 'J0041-SET-M', 'JNE3611-KR-XL', 'SET384-KR-NP-XS', 'JNE3635-KR-L', 'J0118-TP-XXXL', 'JNE3654-TP-XS', 'JNE3652-TP-N-XL', 'J0339-DR-L', 'SET303-KR-NP-XL', 'JNE3396-KR-XXXL', 'JNE3256-KR-XXXL', 'J0340-TP-XS', 'J0335-DR-S', 'J0008-SKD-L', 'SET268-KR-NP-XS', 'J0280-SKD-S', 'J0339-DR-M', 'JNE3564-KR-XXXL', 'SET182-KR-DH-L', 'SET128-KR-DH-M', 'JNE3567-KR-XXL', 'JNE3568-KR-L', 'JNE3881-DR-XXXL', 'JNE3639-TP-N-XXL', 'SET291-KR-PP-XXL', 'JNE3613-KR-XXL', 'JNE3368-KR-XXXL', 'JNE3522-KR-XXL', 'JNE3741-KR-XXL', 'SET293-KR-NP-S', 'SET388-KR-NP-L', 'J0008-SKD-XS', 'SET197-KR-NP-L', 'MEN5029-KR-M', 'J0341-DR-XS', 'J0010-LCD-L', 'JNE3800-KR-M', 'SET183-KR-DH-M', 'J0341-DR-XXL', 'J0341-DR-XXXL', 'J0331-KR-XXXL', 'JNE3752-KR-XXXL', 'SET369-KR-NP-XXL', 'JNE3373-KR-XS', 'JNE3805-KR-L', 'JNE3537-KR-M', 'J0003-SET-XL', 'SET436-KR-NP-XXXL', 'SET264-KR-NP-XXL', 'JNE3567-KR-XS', 'J0329-KR-XXXL', 'JNE3568-KR-XL', 'SET341-KR-NP-L', 'JNE3543-KR-M', 'JNE3365-KR-1052-A-S', 'JNE3759-KR-XL', 'MEN5001-KR-L', 'J0098-TP-XS', 'SET226-KR-PP-L', 'SET380-KR-NP-XXXL', 'MEN5009-KR-M', 'MEN5011-KR-M', 'MEN5032-KR-S', 'SET359-KR-NP-XXL', 'J0199-SET-XXXL', 'J0401-DR-L', 'J0003-SET-XS', 'J0308-DR-XL', 'PJNE3252-KR-N-6XL', 'JNE3752-KR-M', 'SET217-KR-PP-XXXL', 'JNE3799-KR-XL', 'JNE3294-KR-S', 'SET356-KR-NP-XXXL', 'JNE2014-KR-178-XXXL', 'J0401-DR-XS', 'SET365-KR-NP-L', 'JNE3405-KR-XXXL', 'J0230-SKD-XXL', 'JNE3465-KR-XXXL', 'SET265-KR-NP-M', 'JNE3288-KR-M', 'SET316-KR-DPT-M', 'SET268-KR-NP-S', 'JNE3800-KR-XXL', 'JNE2270-KR-487-A-L', 'MEN5024-KR-M', 'MEN5023-KR-XL', 'JNE3797-KR-XS', 'JNE3515-KR-XL', 'J0225-SKD-XXL', 'JNE3461-KR-L', 'JNE3618-KR-XS', 'PJNE3405-KR-N-5XL', 'JNE3500-KR-S', 'JNE3368-KR-XXL', 'JNE2270-KR-487-A-XL', 'JNE3568-KR-S', 'J0096-KR-S', 'SET319-KR-NP-S', 'J0415-DR-L', 'JNE3718-KR-XXL', 'SET014-KR-PP-XXL', 'SET408-KR-NP-XXL', 'J0254-SKD-XS', 'SAR114', 'J0010-LCD-XS', 'SET186-KR-DH-K-M', 'JNE3819-KR-L', 'J0335-DR-L', 'SET334-KR-NP-XXL', 'JNE3470-KR-XS', 'JNE3619-KR-XS', 'J0283-SET-XL', 'JNE3440-KR-N-XL', 'JNE3787-KR-XXL', 'SET282-KR-PP-XXL', 'JNE3691-TU-L', 'JNE3727-KR-XXL', 'JNE3634-KR-XL', 'JNE3675-TU-L', 'JNE2199-KR-411-A-XXL', 'SET184-KR-PP-XXL', 'JNE3468-KR-L', 'J0213-TP-L', 'BL110-XL', 'J0008-SKD-XL', 'SET288-KR-NP-XXL', 'SET110-KR-PP-L', 'MEN5031-KR-XXXL', 'JNE3421-KR-N-M', 'SET351-KR-NP-L', 'SET337-KR-NP-L', 'MEN5021-KR-XXL', 'J0338-DR-L', 'JNE3364-KR-1051-A-L', 'JNE2153-KR-278-A-XL', 'JNE3487-KR-XXL', 'JNE3865-TP-XXXL', 'SET291-KR-PP-XXXL', 'JNE3704-KR-L', 'J0378-SKD-XXL', 'JNE3721-KR-XL', 'J0308-DR-XXL', 'SET398-KR-PP-XXL', 'J0157-DR-S', 'JNE3799-KR-S', 'JNE2265-KR-501-S', 'JNE3401-KR-M', 'SET332-KR-PP-L', 'SET345-KR-NP-XL', 'JNE1525-KR-UDF19-A-XL', 'J0373-KR-M', 'JNE3449-KR-XXXL', 'J0006-SET-L', 'SET228-KR-PP-A-XXXL', 'MEN5023-KR-S', 'SET388-KR-NP-S', 'SET333-KR-DPT-XL', 'SET172-KR-PP-B-M', 'SET268-KR-NP-XL', 'SET319-KR-NP-XL', 'SET378-KR-NP-XS', 'SET344-KR-NP-S', 'MEN5002-KR-M', 'MEN5006-KR-XXL', 'SET363-KR-NP-XL', 'JNE3794-KR-XXXL', 'SET131-KR-NP-A-XXL', 'SET203-KR-DPT-S', 'SET098-KR-PP-XL', 'JNE3614-KR-M', 'J0201-TP-L', 'SET201-KR-NP-A-XXL', 'NW030-TP-PJ-XXL', 'SET273-KR-NP-XXXL', 'JNE3690-TU-L', 'J0247-SKD-S', 'SET347-KR-NP-XXXL', 'J0386-KR-XXXL', 'J0342-TP-L', 'SET363-KR-NP-L', 'J0342-TP-M', 'J0198-TP-XXXL', 'JNE3500-KR-XXL', 'JNE3510-KR-XL', 'J0005-DR-XXL', 'SET360-KR-NP-XXL', 'SET110-KR-PP-S', 'J0416-DR-S', 'SET310-KR-NP-XXL', 'SET188-KR-NP-XS', 'J0096-KR-XS', 'SET323-KR-NP-XXL', 'PJNE2100-KR-N-5XL', 'PJNE3068-KR-5XL', 'J0196-TP-XXL', 'SET187-KR-DH-XL', 'SET389-KR-NP-XL', 'SAR040', 'J0372-SKD-L', 'J0376-SKD-S', 'JNE3518-KR-M', 'J0095-SET-XXXL', 'NW004-TP-PJ-XXXL', 'J0167-KR-S', 'SET374-KR-NP-XXXL', 'SET331-KR-NP-M', 'SET356-KR-NP-L', 'SET293-KR-NP-XXL', 'SET375-KR-NP-XXL', 'JNE3273-KR-XXL', 'SET331-KR-NP-L', 'JNE3518-KR-XL', 'JNE3476-KR-XL', 'JNE3738-KR-XXXL', 'JNE3465-KR-XS', 'JNE3463-KR-XXXL', 'MEN5032-KR-XXL', 'SET380-KR-NP-L', 'J0230-SKD-M', 'JNE3611-KR-XXXL', 'JNE3784-KR-M', 'SET114-KR-PP-XS', 'J0385-KR-M', 'SET347-KR-NP-L', 'JNE3437-KR-XXL', 'JNE3065-KR-XXL', 'J0343-DR-XXL', 'J0119-TP-XL', 'J0334-TP-XL', 'J0236-SKD-XXL', 'J0126-SKD-XXXL', 'J0230-SKD-XL', 'SET171-KR-NP-M', 'JNE3365-KR-1052-A-XXXL', 'J0012-SKD-XXL', 'J0308-DR-M', 'J0117-TP-XXL', 'SET265-KR-NP-XS', 'SET433-KR-NP-XL', 'JNE3769-KR-L', 'JNE3468-KR-XXXL', 'J0154-DR-XXL', 'J0154-DR-XS', 'SET268-KR-NP-M', 'MEN5019-KR-XXXL', 'SET333-KR-DPT-XS', 'SET110-KR-PP-XXXL', 'PJNE2171-KR-N-5XL', 'SET310-KR-NP-S', 'SET219-KR-PP-XXXL', 'J0096-KR-XL', 'JNE3562-KR-XXL', 'JNE3745-KR-S', 'JNE3795-KR-XS', 'SET397-KR-NP-XXL', 'JNE3365-KR-1052-A-M', 'SET145-KR-NP-S', 'SET220-KR-PP-XL', 'JNE3371-KR-XXXL', 'JNE3487-KR-XXXL', 'JNE3702-KR-XXXL', 'JNE3461-KR-XXXL', 'JNE3739-KR-L', 'SET265-KR-NP-L', 'SET343-KR-NP-XXL', 'JNE3534-KR-XS', 'J0094-KR-M', 'SET364-KR-NP-XXL', 'JNE2265-KR-501-XL', 'JNE3690-TU-S', 'SET347-KR-NP-XL', 'JNE1998-KR-311-S', 'JNE3715-KR-S', 'BL003-50BLACK', 'MEN5005-KR-XXXL', 'MEN5028-KR-XXL', 'J0215-BL-L', 'JNE3714-KR-L', 'PJNE2199-KR-N-6XL', 'JNE3634-KR-M', 'JNE3421-KR-N-L', 'SET285-KR-SHA-XS', 'JNE3394-KR-A-XL', 'SET356-KR-NP-XL', 'JNE3468-KR-XXL', 'J0343-DR-XXXL', 'J0380-SKD-XXXL', 'J0382-SKD-XL', 'PJNE3399-KR-N-6XL', 'PJNE3068-KR-6XL', 'JNE3468-KR-XL', 'J0236-SKD-S', 'JNE3799-KR-XS', 'SET121-KR-NP-XS', 'J0202-TP-XXL', 'J0014-LCD-S', 'JNE3396-KR-XL', 'JNE3609-KR-XXL', 'JNE3775-KR-S', 'J0301-TP-XXL', 'JNE3659-TP-N-L', 'JNE3652-TP-N-L', 'SET192-KR-NP-XXXL', 'J0336-TP-XXXL', 'SET187-KR-DH-M', 'JNE3409-KR-S', 'SET345-KR-NP-S', 'JNE3800-KR-XL', 'J0228-SKD-S', 'J0119-TP-XXL', 'JNE3562-KR-XL', 'JNE3818-KR-M', 'JNE3712-TP-N-M', 'JNE3423-KR-XL', 'J0023-TP-XXL', 'JNE2032-KR-205-XXXL', 'JNE3560-KR-L', 'JNE3706-DR-L', 'SET398-KR-PP-XS', 'J0294-TP-XS', 'J0095-SET-XXL', 'JNE3463-KR-L', 'JNE3546-KR-L', 'JNE3764-KR-XL', 'SET331-KR-NP-XXXL', 'J0278-SET-XXXL', 'SET319-KR-NP-XXXL', 'J0117-TP-S', 'JNE3870-DR-XL', 'JNE3784-KR-L', 'SET287-KR-NP-M', 'JNE3567-KR-L', 'J0372-SKD-M', 'J0139-KR-XXXL', 'J0097-KR-XXXL', 'JNE3399-KR-XL', 'SET182-KR-DH-XXXL', 'SET304-KR-DPT-XL', 'SET356-KR-NP-XXL', 'SET110-KR-PP-XS', 'JNE3722-KR-L', 'JNE3480-KR-M', 'SET014-KR-PP-M', 'MEN5007-KR-M', 'J0339-DR-XL', 'JNE3784-KR-XXXL', 'JNE3894-TP-M', 'JNE3543-KR-XL', 'MEN5027-KR-XL', 'MEN5006-KR-XL', 'JNE3806-KR-L', 'JNE3870-DR-XXXL', 'SET349-KR-NP-XS', 'JNE3465-KR-XL', 'J0343-DR-XL', 'MEN5021-KR-M', 'MEN5031-KR-S', 'SET098-KR-PP-S', 'SET278-KR-NP-S', 'JNE3294-KR-XXL', 'SET363-KR-NP-M', 'SET282-KR-PP-XXXL', 'J0414-DR-XXXL', 'JNE3506-KR-XXL', 'MEN5001-KR-M', 'MEN5022-KR-M', 'MEN5023-KR-M', 'MEN5030-KR-M', 'MEN5003-KR-XXXL', 'JNE3660-TP-N-S', 'JNE3407-KR-S', 'SET359-KR-NP-L', 'J0377-SKD-XXXL', 'JNE3818-KR-XXL', 'JNE3412-KR-XXL', 'JNE3757-KR-XXL', 'JNE3805-KR-S', 'J0308-DR-XXXL', 'SET184-KR-PP-S', 'JNE3825-KR-M', 'BL017-63BLACK', 'J0098-TP-XXL', 'JNE2171-KR-437-S', 'JNE3802-KR-L', 'PJNE3399-KR-N-4XL', 'J0349-SET-XL', 'PJNE3440-KR-N-5XL', 'JNE3579-KR-L', 'JNE3373-KR-M', 'J0139-KR-XXL', 'MEN5006-KR-L', 'J0285-SKD-S', 'JNE3724-KR-XL', 'NW037-TP-SR-L', 'J0334-TP-S', 'BL001-50PINK', 'SET098-KR-PP-XXL', 'SET388-KR-NP-XXXL', 'NW034-TP-PJ-XXXL', 'JNE3639-TP-N-XL', 'MEN5028-KR-XL', 'MEN5011-KR-XL', 'JNE3718-KR-L', 'SET266-KR-NP-L', 'SET048-KR-NP-L', 'J0210-DR-XL', 'J0095-SET-XL', 'SET342-KR-NP-N-XXL', 'JNE3487-KR-L', 'JNE3651-TP-N-M', 'J0002-SKD-XL', 'J0004-SKD-XL', 'J0234-SKD-L', 'J0236-SKD-L', 'J0010-LCD-S', 'J0247-SKD-L', 'JNE3721-KR-XS', 'JNE3160-KR-G-XXXL', 'MEN5008-KR-XXL', 'BL103-XL', 'MEN5029-KR-XL', 'J0281-SKD-XS', 'JNE3861-DR-M', 'JNE3739-KR-XL', 'J0349-SET-XXL', 'SET183-KR-DH-XXXL', 'JNE3865-TP-XL', 'SET199-KR-NP-L', 'J0006-SET-XXXL', 'JNE3334-KR-XXL', 'J0004-SKD-XXXL', 'JNE3564-KR-XXL', 'JNE3534-KR-XXXL', 'JNE3620-KR-L', 'JNE3795-KR-S', 'SET358-KR-NP-XXL', 'SET332-KR-PP-XL', 'JNE3691-TU-M', 'J0334-TP-M', 'JNE2205-KR-467-A-XXXL', 'JNE3618-KR-L', 'J0003-SET-S', 'SET364-KR-NP-L', 'SET264-KR-NP-XXXL', 'SET315-KR-PP-XL', 'J0332-DR-XXL', 'J0336-TP-M', 'JNE3805-KR-M', 'J0158-DR-XL', 'SET269-KR-NP-S', 'JNE2153-KR-278-A-XS', 'PJNE3607-KR-5XL', 'NW009-ST-CP-XXXL', 'J0352-KR-XXL', 'J0162-SKD-XXXL', 'JNE3627-KR-L', 'J0014-LCD-L', 'JNE3803-KR-S', 'JNE3437-KR-L', 'JNE3718-KR-XL', 'JNE3463-KR-XL', 'SET313-KR-NP-XS', 'SET239-KR-NP-XXL', 'NW030-TP-PJ-XL', 'JNE3543-KR-XS', 'J0049-TP-XXXL', 'JNE3794-KR-XXL', 'JNE3863-TU-L', 'J0181-TP-M', 'JNE3837-KR-L', 'JNE3730-KR-XL', 'J0301-TP-XL', 'PJNE3368-KR-5XL', 'J0342-TP-XXL', 'SET398-KR-PP-XL', 'JNE3510-KR-L', 'SET333-KR-DPT-L', 'JNE3399-KR-M', 'SET316-KR-DPT-XXXL', 'JNE3160-KR-G-XL', 'JNE3773-KR-XL', 'JNE3784-KR-XL', 'J0004-SKD-L', 'JNE3463-KR-XS', 'J0346-SET-L', 'JNE3366-KR-1053-L', 'J0285-SKD-XS', 'MEN5009-KR-S', 'SET110-KR-PP-XL', 'MEN5013-KR-S', 'J0378-SKD-M', 'JNE3371-KR-S', 'NW006-ST-SR-XXXL', 'JNE3439-KR-M', 'JNE3636-KR-XL', 'NW034-TP-PJ-XL', 'J0118-TP-XL', 'J0132-KR-XXL', 'SET293-KR-NP-XL', 'SET073-KR-SHA-M', 'JNE3703-KR-XL', 'SET087-KR-PP-M', 'J0353-KR-XXL', 'JNE1977-KR-237-M', 'JNE3781-KR-XS', 'NW037-TP-SR-XS', 'J0025-DR-XXXL', 'J0152-DR-XXL', 'J0158-DR-XXXL', 'SET353-KR-NP-XL', 'J0092-SET-XXL', 'MEN5026-KR-M', 'SET253-KR-NP-XXXL', 'J0248-KR-DPT-L', 'JNE3618-KR-XL', 'SET286-KR-NP-XL', 'SET268-KR-NP-XXXL', 'J0402-DR-L', 'SET304-KR-DPT-L', 'JNE3710-DR-XL', 'SET374-KR-NP-M', 'SET366-KR-NP-XL', 'J0119-TP-XS', 'JNE3697-KR-L', 'NW015-TP-PJ-M', 'JNE2171-KR-437-L', 'J0198-TP-XS', 'SET386-KR-NP-L', 'SET197-KR-NP-XXL', 'J0293-DR-XS', 'SET322-KR-SHA-S', 'J0281-SKD-S', 'SET350-KR-NP-XL', 'JNE3605-KR-XXL', 'SET295-KR-NP-M', 'SET264-KR-NP-L', 'JNE2171-KR-437-XL', 'JNE1234-MULTI-KR-032-M', 'JNE3673-TU-L', 'J0124-TP-L', 'SET293-KR-NP-XXXL', 'JNE3742-KR-M', 'MEN5012-KR-L', 'JNE3757-KR-XL', 'MEN5032-KR-XL', 'SET183-KR-DH-XXL', 'JNE3455-KR-M', 'J0333-DR-XS', 'JNE3761-KR-XL', 'SET145-KR-NP-L', 'JNE3801-KR-XL', 'SET171-KR-NP-XXXL', 'JNE3404-KR-XXL', 'J0234-SKD-XL', 'JNE1408-GREY-KR-UDF19-XXL', 'MEN5022-KR-S', 'MEN5020-KR-XXXL', 'SET304-KR-DPT-XXL', 'SET275-KR-NP-XL', 'J0122-TP-XL', 'SET183-KR-DH-XS', 'SET233-KR-PP-XXL', 'JNE3504-KR-XL', 'JNE3473-KR-XXXL', 'JNE3366-KR-1053-A-XXXL', 'NW012-TP-PJ-XL', 'JNE3425-KR-M', 'SET197-KR-NP-XL', 'SET374-KR-NP-L', 'JNE3334-KR-L', 'JNE3567-KR-S', 'J0014-LCD-XL', 'J0111-TP-S', 'SET217-KR-PP-XL', 'J0280-SKD-XXL', 'J0216-BL-S', 'J0154-DR-XL', 'JNE3667-TP-M', 'BL026-74BEIGE-B', 'J0020-SET-XL', 'SET227-KR-PP-A-XL', 'J0119-TP-XXXL', 'JNE3798-KR-XXL', 'SET304-KR-DPT-XXXL', 'JNE3838-KR-XL', 'NW034-TP-PJ-XXL', 'JNE3311-KR-XS', 'JNE3764-KR-M', 'SET203-KR-DPT-XL', 'JNE3437-KR-M', 'JNE3288-KR-XXL', 'JNE3801-KR-XXL', 'NW030-TP-PJ-S', 'SET187-KR-DH-XS', 'SET398-KR-PP-S', 'JNE3741-KR-XXXL', 'J0296-DR-XS', 'SET196-KR-NP-M', 'J0373-KR-S', 'J0104-KR-S', 'J0338-DR-XL', 'JNE3735-KR-XXL', 'JNE3706-DR-S', 'JNE3710-DR-L', 'SET328-KR-NP-XXL', 'SET339-KR-NP-XXL', 'JNE3465-KR-L', 'JNE3403-KR-XS', 'SET171-KR-NP-L', 'JNE3612-KR-XL', 'JNE3420-KR-S', 'JNE3563-KR-XS', 'NW003-TP-PJ-L', 'SET328-KR-NP-L', 'SET343-KR-NP-M', 'J0007-SKD-M', 'SET258-KR-PP-XXL', 'SET352-KR-NP-L', 'MEN5014-KR-XXXL', 'MEN5032-KR-M', 'SET287-KR-NP-L', 'J0344-TP-XL', 'J0355-KR-L', 'J0352-KR-XL', 'JNE3749-KR-L', 'JNE3616-KR-M', 'MEN5025-KR-XXL', 'J0135-SET-XXL', 'JNE3313-KR-A-XXL', 'MEN5031-KR-XXL', 'JNE3581-KR-S', 'JNE2014-KR-178-L', 'JNE3639-TP-N-M', 'JNE1951-KR-155-XL', 'J0008-SKD-M', 'JNE3560-KR-XXL', 'JNE3905-DR-L', 'J0335-DR-M', 'SET347-KR-NP-M', 'J0113-TP-XL', 'SET198-KR-NP-A-XXXL', 'JNE3484-KR-XL', 'J0285-SKD-XL', 'J0097-KR-L', 'J0171-DR-XXL', 'SET330-KR-PP-S', 'SET279-LC-XXXL', 'JNE3761-KR-XXL', 'JNE3703-KR-XXL', 'JNE3265-KR-XXL', 'SET286-KR-NP-XXXL', 'SET400-KR-NP-XXXL', 'J0283-SET-XXXL', 'J0004-SKD-XS', 'JNE3779-KR-XXL', 'J0349-SET-L', 'SET358-KR-NP-XXXL', 'J0340-TP-L', 'SET233-KR-PP-M', 'JNE3510-KR-XXL', 'J0097-KR-XS', 'JNE3801-KR-M', 'J0025-DR-XS', 'J0209-DR-XS', 'J0395-DR-XS', 'JNE3568-KR-M', 'SET014-KR-PP-A-XXL', 'NW005-ST-PJ-XXXL', 'NW013-ST-SR-XXXL', 'J0023-TP-XXXL', 'J0343-DR-L', 'SET184-KR-PP-XL', 'JNE3869-DR-XXXL', 'JNE3479-KR-XL', 'JNE3634-KR-XS', 'SET397-KR-NP-S', 'SET389-KR-NP-XXXL', 'SET138-KR-PP-M', 'JNE3690-TU-XS', 'JNE3620-KR-XL', 'JNE3613-KR-XL', 'J0108-SKD-XL', 'J0098-TP-M', 'J0089-TP-XXL', 'MEN5014-KR-XL', 'JNE3861-DR-L', 'SET229-KR-PP-L', 'J0415-DR-M', 'JNE3384-KR-S', 'SET405-KR-NP-XS', 'MEN5018-KR-XL', 'J0244-SKD-XL', 'JNE3691-TU-XL', 'J0349-SET-M', 'SET363-KR-NP-S', 'JNE3468-KR-M', 'SET100-KR-PP-XL', 'JNE3261-KR-XXL', 'J0277-SKD-M', 'SET393-KR-NP-XS', 'SET348-KR-NP-L', 'SET233-KR-PP-XXXL', 'JNE3547-KR-XXXL', 'JNE3797-KR-XXXL', 'SET324-KR-NP-XL', 'J0400-DR-M', 'JNE3548-KR-L', 'JNE3709-DR-M', 'J0126-SKD-L', 'JNE3581-KR-M', 'SET280-KR-PP-XS', 'SET239-KR-NP-XXXL', 'SET058-KR-NP-M', 'J0343-DR-S', 'JNE3449-KR-S', 'J0333-DR-XL', 'J0301-TP-XXXL', 'JNE2251-KR-537-L', 'J0239-SKD-XS', 'J0344-TP-M', 'J0219-BL-XL', 'JNE3659-TP-N-S', 'JNE3479-KR-S', 'JNE3715-KR-M', 'J0294-TP-S', 'JNE3618-KR-S', 'J0373-KR-XS', 'SET366-KR-NP-XXL', 'SET334-KR-NP-S', 'SET337-KR-NP-S', 'JNE3652-TP-N-S', 'JNE3421-KR-N-XXL', 'SET408-KR-NP-S', 'JNE2086-KR-389-L', 'SET322-KR-SHA-M', 'JNE3799-KR-M', 'JNE3673-TU-XS', 'JNE3665-TP-S', 'J0349-SET-S', 'JNE3777-KR-XXL', 'SET268-KR-NP-XXL', 'JNE3697-KR-S', 'SET345-KR-NP-XXXL', 'SET329-KR-NP-XXXL', 'NW024-TP-PJ-XS', 'JNE3805-KR-XL', 'SET228-KR-PP-A-XL', 'JNE3634-KR-XXXL', 'JNE3822-KR-M', 'SET383-KR-NP-M', 'SET273-KR-NP-M', 'SET244-KR-NP-M', 'JNE3789-KR-XS', 'JNE3669-TU-S', 'SET279-LC-XS', 'SET295-KR-NP-XL', 'JNE3422-KR-XL', 'JNE3481-KR-XS', 'JNE3794-KR-XS', 'SET145-KR-NP-XXL', 'SET393-KR-NP-L', 'JNE3702-KR-XXL', 'JNE3629-KR-M', 'JNE3645-TP-N-S', 'SET348-KR-NP-M', 'J0377-SKD-XL', 'SET075-KR-DH-L', 'J0097-KR-M', 'J0153-DR-XXXL', 'JNE3721-KR-M', 'JNE3640-TP-N-XXL', 'SET302-KR-PP-XXXL', 'JNE3645-TP-N-XL', 'JNE3763-KR-L', 'JNE3630-KR-XXXL', 'JNE3461-KR-XS', 'JNE3368-KR-XL', 'JNE3751-KR-XXXL', 'JNE3749-KR-XXXL', 'MEN5008-KR-M', 'SET386-KR-NP-M', 'J0122-TP-XXXL', 'JNE3633-KR-S', 'J0398-DR-M', 'J0231-SKD-XL', 'SET278-KR-NP-L', 'JNE3654-TP-M', 'J0339-DR-XS', 'SET279-LC-L', 'SET385-KR-NP-XL', 'J0353-KR-XL', 'J0280-SKD-XS', 'SET388-KR-NP-XL', 'J0006-SET-XS', 'JNE3546-KR-S', 'SET311-KR-NP-L', 'J0283-SET-L', 'SET413-KR-NP-S', 'JNE3546-KR-XL', 'JNE3491-KR-XL', 'J0093-DR-XXL', 'JNE3446-KR-S', 'JNE3720-KR-M', 'MEN5022-KR-XXL', 'SET278-KR-NP-XXXL', 'J0349-SET-XXXL', 'SET270-KR-PP-XXL', 'JNE3523-KR-S', 'J0351-SET-XXXL', 'JNE3869-DR-XXL', 'J0204-TP-L', 'SET209-KR-PP-XS', 'SET282-KR-PP-XL', 'JNE3691-TU-S', 'JNE09210-PINK-SR-JP8101RNV', 'SET348-KR-NP-XS', 'JNE3822-KR-XXL', 'JNE3515-KR-XXL', 'SET171-KR-NP-XS', 'JNE3522-KR-L', 'J0006-SET-S', 'JNE3675-TU-S', 'J0005-DR-S', 'JNE3399-KR-XXXL', 'SET285-KR-SHA-L', 'J0198-TP-L', 'J0419-TP-XL', 'SET405-KR-NP-M', 'J0162-SKD-L', 'NW016-ST-SR-XXXL', 'JNE3801-KR-L', 'NW030-TP-PJ-M', 'JNE3463-KR-M', 'J0012-SKD-L', 'SET230-KR-PP-S', 'SET145-KR-NP-XXXL', 'JNE3391-KR-XXXL', 'JNE3787-KR-XXXL', 'SET342-KR-NP-N-XL', 'SET349-KR-NP-XL', 'J0130-SET-XXL', 'SET353-KR-NP-XXL', 'SET303-KR-NP-XS', 'SET224-KR-NP-S', 'J0401-DR-S', 'J0097-KR-S', 'JNE2014-KR-178-M', 'JNE3742-KR-XS', 'JNE3515-KR-XXXL', 'JNE3680-TU-XXXL', 'J0217-BL-M', 'JNE3716-KR-XXXL', 'JNE3366-KR-1053-XXXL', 'J0119-TP-L', 'JNE3470-KR-XXL', 'JNE2199-KR-411-A-M', 'J0148-SET-S', 'MEN5024-KR-XXXL', 'JNE3288-KR-L', 'J0113-TP-XXL', 'SET171-KR-NP-S', 'NW007-ST-CP-XXXL', 'JNE3795-KR-XL', 'JNE3603-KR-XXL', 'JNE2199-KR-411-A-L', 'SET267-KR-NP-XL', 'J0007-SKD-XL', 'J0209-DR-XXL', 'SET288-KR-NP-XS', 'SET232-KR-PP-S', 'JNE3546-KR-M', 'J0095-SET-M', 'JNE3762-KR-S', 'JNE3635-KR-S', 'JNE3739-KR-XXL', 'J0166-DR-XS', 'JNE3703-KR-M', 'SET320-KR-NP-XXXL', 'JNE3614-KR-XL', 'JNE3437-KR-XL', 'JNE3710-DR-XXL', 'JNE3724-KR-XXL', 'SET348-KR-NP-XXL', 'J0111-TP-XXXL', 'JNE3713-TP-N-XXL', 'J0385-KR-L', 'JNE3368-KR-M', 'J0395-DR-XXXL', 'JNE3817-KR-XXL', 'SET331-KR-NP-XL', 'J0385-KR-XXXL', 'JNE3376-KR-M', 'JNE3487-KR-M', 'JNE3401-KR-S', 'SET322-KR-SHA-L', 'MEN5008-KR-L', 'JNE3880-DR-XS', 'J0248-KR-DPT-XXXL', 'MEN5019-KR-L', 'SET377-KR-NP-L', 'JNE3479-KR-XXL', 'SET273-KR-NP-S', 'SET328-KR-NP-XL', 'J0243-DR-XL', 'NW024-TP-PJ-S', 'JNE3784-KR-XXL', 'JNE3902-KR-XL', 'MEN5006-KR-XXXL', 'SET267-KR-NP-XXL', 'JNE3861-DR-XS', 'JNE3708-TU-S', 'JNE3579-KR-XXXL', 'J0401-DR-XL', 'JNE3784-KR-S', 'J0355-KR-M', 'JNE3782-KR-XL', 'J0230-SKD-XS', 'J0005-DR-XL', 'SET383-KR-NP-XL', 'SET394-KR-NP-M', 'BL109-M', 'JNE3703-KR-S', 'JNE2199-KR-411-A-XL', 'J0254-SKD-M', 'J0083-KR-L', 'SET356-KR-NP-XS', 'JNE3611-KR-S', 'CH204-PURPLE-M', 'JNE3473-KR-XL', 'JNE2171-KR-437-M', 'JNE3554-KR-XXL', 'JNE3795-KR-L', 'SET366-KR-NP-M', 'SET356-KR-NP-M', 'SET366-KR-NP-XS', 'JNE3522-KR-M', 'JNE3863-TU-XXXL', 'NW029-ST-SR-XXXL', 'NW020-ST-SR-XXXL', 'JNE3560-KR-XXXL', 'SET405-KR-NP-XXXL', 'JNE3554-KR-M', 'J0126-SKD-XXL', 'JNE3645-TP-N-M', 'JNE3640-TP-N-M', 'SET385-KR-NP-M', 'JNE3784-KR-XS', 'BTM044-PP-M', 'SET269-KR-NP-XXL', 'JNE3399-KR-S', 'JNE3399-KR-XXL', 'SET358-KR-NP-S', 'JNE3697-KR-XL', 'J0244-SKD-M', 'MEN5022-KR-L', 'JNE3769-KR-XS', 'SET139-KR-PP-XS', 'SET014-KR-PP-A-M', 'J0373-KR-L', 'NW029-ST-SR-XXL', 'J0338-DR-XXXL', 'J0399-DR-XXXL', 'JNE3658-TP-S', 'J0292-TP-XS', 'JNE3643-TP-N-XS', 'JNE3660-TP-N-XS', 'JNE3865-TP-L', 'J0346-SET-XS', 'SET285-KR-SHA-XXL', 'BL057-65BLACK-A', 'SET293-KR-NP-XS', 'NW002-TP-PJ-XXXL', 'NW003-TP-PJ-XXXL', 'SET246-KR-PP-M', 'JNE3160-KR-G-M', 'J0118-TP-L', 'J0080-TP-XS', 'JNE3566-KR-S', 'JNE1408-GREY-KR-UDF19-L', 'JNE3793-KR-M', 'JNE2009-KR-310-XS', 'JNE3713-TP-N-XL', 'SET269-KR-NP-XS', 'J0211-DR-M', 'SET393-KR-NP-XXXL', 'JNE3740-KR-XXXL', 'J0329-KR-L', 'JNE3605-KR-S', 'JNE3798-KR-XL', 'SET288-KR-NP-XL', 'SET348-KR-NP-XL', 'SET365-KR-NP-XXL', 'JNE3776-KR-XS', 'JNE3761-KR-XS', 'JNE3400-KR-XL', 'SET228-KR-PP-A-M', 'JNE3609-KR-XL', 'JNE3634-KR-XXL', 'JNE3865-TP-S', 'SET319-KR-NP-L', 'SET269-KR-NP-L', 'MEN5022-KR-XL', 'SET209-KR-PP-XXXL', 'JNE3662-TP-S', 'JNE3715-KR-XXL', 'JNE3653-TP-N-XXL', 'JNE3712-TP-N-XXL', 'JNE3799-KR-L', 'MEN5024-KR-L', 'JNE3620-KR-S', 'J0041-SET-XL', 'JNE3695-KR-S', 'SET070-KR-NP-XS', 'JNE3413-KR-S', 'SET287-KR-NP-XXXL', 'JNE3736-KR-XL', 'JNE3652-TP-N-XXL', 'JNE3863-TU-S', 'SET229-KR-PP-XL', 'JNE2307-KR-572-M', 'JNE3613-KR-L', 'SET236-KR-PP-XXXL', 'SET223-KR-NP-XXXL', 'SET380-KR-NP-M', 'JNE3716-KR-M', 'SET291-KR-PP-S', 'JNE3294-KR-XXXL', 'J0382-SKD-L', 'JNE3709-DR-L', 'J0104-KR-M', 'JNE3423-KR-XXL', 'MEN5025-KR-XXXL', 'JNE3752-KR-L', 'SET334-KR-NP-XL', 'JNE3783-KR-L', 'J0414-DR-M', 'BTM026-NP-XL', 'JNE3659-TP-N-XXL', 'JNE3822-KR-L', 'SET343-KR-NP-S', 'SET276-KR-PP-XS', 'JNE3716-KR-L', 'JNE3637-KR-M', 'JNE3795-KR-XXL', 'SET172-KR-PP-B-L', 'SET325-KR-NP-L', 'JNE3422-KR-XXL', 'SET217-KR-PP-L', 'SET184-KR-PP-M', 'JNE3311-KR-S', 'J0203-TP-XXXL', 'JNE3785-KR-S', 'JNE3518-KR-XXL', 'J0382-SKD-S', 'MEN5021-KR-L', 'SET322-KR-SHA-XXL', 'SET278-KR-NP-M', 'J0237-SKD-L', 'J0181-TP-XS', 'J0242-SKD-XXL', 'SET220-KR-PP-M', 'SET400-KR-NP-XL', 'JNE3468-KR-XS', 'SET349-KR-NP-S', 'JNE3661-TP-XL', 'SET374-KR-NP-S', 'PJNE2171-KR-N-6XL', 'SET393-KR-NP-S', 'J0402-DR-XS', 'SET216-KR-PP-XL', 'SET236-KR-PP-XL', 'JNE3617-KR-XL', 'JNE2032-KR-205-XXL', 'J0219-BL-M', 'JNE3437-KR-XXXL', 'SET219-KR-PP-XXL', 'J0087-TP-M', 'JNE3068-KR-A-XXL', 'SET308-KR-PP-XXXL', 'JNE3575-KR-M', 'JNE3575-KR-L', 'JNE3802-KR-XL', 'J0136-KR-S', 'J0283-SET-XXL', 'J0213-TP-M', 'JNE3708-TU-XS', 'J0339-DR-S', 'SET204-KR-DPT-XXXL', 'JNE3294-KR-L', 'J0097-KR-XL', 'J0143-SET-A-XXL', 'J0136-KR-XXL', 'BTM031-NP-XL', 'JNE3652-TP-N-M', 'JNE3786-KR-XXXL', 'JNE3785-KR-XXL', 'JNE3785-KR-XXXL', 'JNE3446-KR-XXL', 'J0299-KR-XXXL', 'JNE3751-KR-XXL', 'JNE3786-KR-XXL', 'JNE3459-KR-XXXL', 'BTM026-NP-M', 'SET333-KR-DPT-M', 'BL103-XXL', 'JNE3522-KR-XXXL', 'JNE3641-TP-N-XS', 'J0382-SKD-XXXL', 'J0198-TP-M', 'JNE3870-DR-S', 'J0203-TP-M', 'SET203-KR-DPT-XXXL', 'JNE3733-KR-XXXL', 'SET014-KR-PP-XL', 'SET145-KR-NP-M', 'SET339-KR-NP-S', 'SET289-KR-NP-XL', 'JNE3611-KR-XXL', 'J0006-SET-XL', 'JNE3639-TP-N-L', 'JNE3366-KR-1053-M', 'JNE3802-KR-XS', 'JNE3291-KR-L', 'SET405-KR-NP-L', 'JNE3800-KR-XXXL', 'J0297-TP-S', 'J0342-TP-S', 'J0337-TP-S', 'SET359-KR-NP-XS', 'JNE3616-KR-XS', 'J0118-TP-S', 'JNE3781-KR-S', 'SET329-KR-NP-M', 'J0094-KR-L', 'JNE3633-KR-XXL', 'JNE3633-KR-L', 'JNE3633-KR-M', 'J0205-TP-XXL', 'SET380-KR-NP-S', 'JNE3609-KR-XXXL', 'SET328-KR-NP-M', 'SET249-KR-NP-L', 'JNE3423-KR-M', 'JNE3804-KR-M', 'SET350-KR-NP-L', 'BL113-S', 'SET342-KR-NP-N-XS', 'JNE2199-KR-411-A-XXXL', 'JNE09186-BLUE-SR-JP7104RMV-N', 'JNE3160-KR-XXL', 'SET098-KR-PP-L', 'SET243-KR-PP-L', 'JNE3468-KR-S', 'JNE3559-KR-L', 'J0002-SKD-S', 'J0012-SKD-XL', 'MEN5004-KR-L', 'JNE3837-KR-M', 'J0350-SET-XXXL', 'JNE3781-KR-M', 'J0416-DR-XL', 'JNE3722-KR-XXL', 'JNE3668-TP-N-M', 'SET239-KR-NP-L', 'JNE3716-KR-XL', 'JNE3574-KR-L', 'SET261-KR-PP-S', 'BTM036-PP-XXXL', 'JNE3620-KR-XXL', 'SET290-KR-DPT-XL', 'SET303-KR-NP-XXL', 'JNE1998-KR-311-M', 'SET366-KR-NP-XXXL', 'SET375-KR-NP-XS', 'JNE3837-KR-XS', 'JNE3423-KR-L', 'MEN5025-KR-M', 'SET209-KR-PP-L', 'J0096-KR-XXL', 'JNE3476-KR-S', 'JNE3690-TU-M', 'J0013-SKD-XS', 'SET227-KR-PP-A-L', 'SET272-KR-PP-S', 'J0349-SET-XS', 'J0212-DR-XXXL', 'SET290-KR-DPT-XS', 'J0350-SET-XL', 'J0002-SKD-M', 'J0283-SET-M', 'J0094-KR-XXL', 'MEN5009-KR-XXL', 'J0335-DR-XXXL', 'J0088-TP-XL', 'SET203-KR-DPT-L', 'J0012-SKD-S', 'J0013-SKD-L', 'J0014-LCD-M', 'JNE3311-KR-XXXL', 'JNE3738-KR-XL', 'J0240-SKD-S', 'JNE3773-KR-M', 'JNE3776-KR-L', 'SET210-KR-PP-L', 'SET299-KR-PP-XXXL', 'SET344-KR-NP-M', 'JNE3870-DR-L', 'J0277-SKD-XL', 'SET307-KR-DPT-XXXL', 'J0236-SKD-XXXL', 'SET329-KR-NP-L', 'J0346-SET-XL', 'SET302-KR-PP-M', 'J0124-TP-XXL', 'MEN5015-KR-XL', 'J0179-KR-L', 'SET320-KR-NP-XXL', 'J0106-KR-M', 'JNE3482-KR-XL', 'JNE3793-KR-S', 'SET171-KR-NP-XL', 'JNE3785-KR-M', 'JNE3518-KR-L', 'SET331-KR-NP-XXL', 'J0251-SKD-XS', 'BL110-XXL', 'J0252-SKD-S', 'MEN5018-KR-L', 'SET386-KR-NP-XL', 'SET384-KR-NP-XL', 'J0009-SKD-XXL', 'MEN5032-KR-L', 'J0142-KR-XL', 'JNE3879-DR-XXXL', 'SET183-KR-DH-XL', 'SET342-KR-NP-N-S', 'SET363-KR-NP-XXXL', 'J0244-SKD-L', 'J0216-BL-L', 'SET365-KR-NP-M', 'J0094-KR-XL', 'SET329-KR-NP-S', 'SET246-KR-PP-XXXL', 'JNE3836-KR-L', 'SAR068', 'SET328-KR-NP-S', 'SET348-KR-NP-XXXL', 'J0123-TP-XXL', 'JNE3757-KR-S', 'JNE3658-TP-M', 'JNE3799-KR-XXL', 'JNE3607-KR-M', 'SET359-KR-NP-XL', 'J0338-DR-M', 'J0192-TP-XL', 'J0002-SKD-XXL', 'JNE2014-KR-178-S', 'JNE2205-KR-467-A-S', 'SET248-KR-NP-M', 'JNE3689-TU-XXL', 'SET291-KR-PP-XS', 'J0084-TP-M', 'J0204-TP-M', 'JNE3836-KR-M', 'SET350-KR-NP-XXXL', 'SET408-KR-NP-XXXL', 'SET295-KR-NP-S', 'SAR066', 'SET194-KR-NP-L', 'JNE3781-KR-L', 'SET374-KR-NP-XXL', 'JNE3396-KR-XXL', 'SET408-KR-NP-M', 'SET194-KR-NP-M', 'SET058-KR-NP-L', 'J0369-SKD-XS', 'JNE3675-TU-XXXL', 'SET219-KR-PP-XL', 'J0337-TP-M', 'JNE3864-TU-XL', 'JNE3546-KR-XXL', 'NW002-TP-PJ-M', 'JNE3764-KR-L', 'J0328-KR-L', 'SET264-KR-NP-S', 'J0122-TP-M', 'JNE3706-DR-XXXL', 'J0208-DR-XXL', 'JNE3807-KR-S', 'JNE3463-KR-XXL', 'J0092-SET-S', 'JNE3439-KR-L', 'SET144-KR-NP-XXXL', 'J0354-KR-L', 'JNE3822-KR-XL', 'JNE3608-KR-L', 'JNE3645-TP-N-XXL', 'J0396-DR-XXXL', 'SET328-KR-NP-XS', 'JNE3707-DR-XXL', 'SET320-KR-NP-XS', 'SET239-KR-NP-M', 'J0310-TP-XL', 'JNE3421-KR-XXL', 'JNE3798-KR-L', 'JNE3759-KR-L', 'JNE3724-KR-S', 'JNE2307-KR-572-L', 'J0033-KR-S', 'SET325-KR-NP-XXXL', 'JNE2170-KR-436-L', 'J0332-DR-M', 'JNE3811-KR-XS', 'JNE3819-KR-S', 'J0216-BL-XL', 'SET359-KR-NP-XXXL', 'SET413-KR-NP-L', 'JNE3793-KR-XS', 'JNE3797-KR-XXL', 'SET355-KR-PP-L', 'JNE3794-KR-XL', 'JNE3531-KR-S', 'JNE3690-TU-XXXL', 'JNE3602-KR-L', 'JNE3728-KR-L', 'J0344-TP-XXL', 'J0336-TP-XXL', 'SET187-KR-DH-XXL', 'JNE3833-KR-XS', 'J0006-SET-XXL', 'JNE3804-KR-XL', 'JNE3443-KR-XXL', 'JNE3698-KR-M', 'JNE3864-TU-M', 'J0118-TP-M', 'J0414-DR-XXL', 'JNE3721-KR-S', 'SET393-KR-NP-XXL', 'J0074-TP-L', 'JNE3878-KR-L', 'JNE3366-KR-1053-XXL', 'JNE3439-KR-XXXL', 'JNE3621-KR-XL', 'JNE3549-KR-XXL', 'JNE3435-KR-XXXL', 'JNE3636-KR-M', 'J0282-SET-XS', 'SET389-KR-NP-XS', 'JNE3881-DR-M', 'JNE3810-KR-XL', 'SET073-KR-SHA-S', 'SET269-KR-NP-M', 'SET363-KR-NP-XS', 'J0250-SKD-XXXL', 'J0295-DR-XS', 'JNE3364-KR-1051-A-XXL', 'JNE3365-KR-1052-A-L', 'JNE3778-KR-XXL', 'NW016-ST-SR-M', 'JNE3404-KR-XL', 'JNE3605-KR-XL', 'JNE3658-TP-L', 'JNE3813-KR-XXL', 'JNE3762-KR-L', 'JNE3741-KR-L', 'JNE3620-KR-M', 'J0338-DR-XXL', 'BL053-153GOLD-A', 'J0234-SKD-XXXL', 'J0216-BL-M', 'JNE3398-KR-XS', 'SET386-KR-NP-XXL', 'MEN5009-KR-XXXL', 'MEN5002-KR-XL', 'SET220-KR-PP-S', 'SET219-KR-PP-XS', 'JNE3672-TU-XXL', 'JNE3781-KR-XXL', 'MEN5015-KR-XXL', 'J0104-KR-XS', 'J0395-DR-M', 'MEN5027-KR-L', 'J0119-TP-M', 'MEN5022-KR-XXXL', 'SET401-KR-NP-M', 'SET323-KR-NP-M', 'SET288-KR-NP-M', 'SET395-KR-NP-M', 'JNE1000-NAVY-SR-JB6102RMV-K', 'JNE3773-KR-XS', 'JNE3818-KR-XXXL', 'JNE3833-KR-XXXL', 'JNE3709-DR-XXXL', 'SET377-KR-NP-XXXL', 'JNE3545-KR-S', 'JNE3408-KR-XL', 'J0308-DR-S', 'JNE3399-KR-XS', 'J0232-SKD-XL', 'J0338-DR-XS', 'JNE3790-KR-XL', 'JNE3775-KR-XL', 'JNE3606-KR-XXL', 'SET287-KR-NP-XXL', 'SET243-KR-PP-XXL', 'JNE3030-KR-XXXL', 'SET201-KR-NP-A-XXXL', 'J0041-SET-S', 'SET281-KR-PP-XXL', 'SET295-KR-NP-L', 'SET286-KR-NP-XS', 'J0098-TP-S', 'BL109-L', 'JNE3740-KR-XXL', 'J0339-DR-XXL', 'JNE3679-TU-L', 'J0209-DR-M', 'JNE3614-KR-L', 'BL013-62BLACK', 'JNE2305-KR-533-L', 'JNE2058-KR-339-L', 'JNE3311-KR-A-XS', 'JNE2305-KR-533-XXL', 'BL020-71RED', 'SET402-KR-NP-M', 'J0185-DR-S', 'JNE3068-KR-A-M', 'SET394-KR-NP-S', 'SET307-KR-DPT-S', 'SET316-KR-DPT-S', 'JNE3782-KR-S', 'J0210-DR-S', 'JNE3396-KR-L', 'JNE3615-KR-L', 'JNE3712-TP-N-L', 'JNE3270-KR-L', 'JNE3042-KR-M', 'NW031-TP-PJ-M', 'SET143-KR-PP-XXL', 'SET275-KR-NP-S', 'JNE3368-KR-L', 'JNE3769-KR-XXL', 'SET327-KR-DPT-L', 'J0217-BL-S', 'JNE3694-KR-L', 'JNE3726-KR-L', 'JNE3566-KR-XL', 'JNE3777-KR-L', 'JNE3522-KR-XL', 'SET383-KR-NP-S', 'SET359-KR-NP-S', 'SET323-KR-NP-XXXL', 'J0382-SKD-M', 'SET217-KR-PP-S', 'JNE3288-KR-XXXL', 'JNE3785-KR-L', 'SET219-KR-PP-M', 'JNE3749-KR-S', 'J0013-SKD-XXXL', 'J0372-SKD-S', 'J0198-TP-XL', 'JNE3364-KR-1051-A-XXXL', 'JNE3634-KR-L', 'MEN5013-KR-M', 'JNE3796-KR-XL', 'JNE3704-KR-M', 'SET343-KR-NP-XL', 'CH206-GREEN-XXL', 'CH205-YELLOW-XXL', 'SET377-KR-NP-XL', 'SAR173', 'JNE3704-KR-S', 'JNE2100-KR-144-S', 'JNE3801-KR-S', 'SET361-KR-NP-XS', 'JNE3476-KR-M', 'JNE3775-KR-XXXL', 'JNE3523-KR-XXL', 'JNE3795-KR-M', 'SET266-KR-NP-M', 'SET396-KR-PP-XS', 'JNE3336-KR-M', 'J0337-TP-XL', 'JNE3391-KR-S', 'JNE3620-KR-XS', 'J0224-SKD-XL', 'J0055-SET-XS', 'SET286-KR-NP-L', 'J0034-SET-L', 'J0233-SKD-L', 'SET396-KR-PP-L', 'SET258-KR-PP-L', 'SET344-KR-NP-XXL', 'NW037-TP-SR-XXL', 'JNE3648-TP-N-L', 'JNE3431-KR-XXL', 'J0011-LCD-S', 'J0236-SKD-XL', 'J0373-KR-XL', 'JNE3401-KR-XS', 'JNE3560-KR-XS', 'JNE1525-KR-UDF19-A-L', 'J0244-SKD-S', 'NW039-TP-SR-S', 'NW039-TP-SR-L', 'SET251-KR-PP-S', 'BL021-71BLACK', 'SET366-KR-NP-S', 'JNE3837-KR-S', 'J0233-SKD-M', 'SET219-KR-PP-L', 'SET277-KR-NP-L', 'SET359-KR-NP-M', 'J0167-KR-L', 'J0280-SKD-M', 'SET402-KR-NP-XXXL', 'J0135-SET-XS', 'BL103-S', 'JNE2205-KR-467-A-XXL', 'SET353-KR-NP-L', 'JNE3670-TU-XS', 'JNE3463-KR-S', 'J0207-DR-XL', 'JNE3802-KR-S', 'SET385-KR-NP-XXXL', 'SET390-KR-NP-XL', 'BTM002-S', 'SET252-KR-PP-XXL', 'NW024-TP-PJ-XL', 'MEN5008-KR-XL', 'JNE3863-TU-XL', 'SET305-KR-DPT-M', 'JNE3348-KR-L', 'J0239-SKD-XXXL', 'JNE3713-TP-N-XS', 'J0181-TP-XXXL', 'SET392-KR-NP-XXXL', 'SET209-KR-PP-XXL', 'J0164-DR-XL', 'J0250-SKD-XS', 'J0252-SKD-XS', 'NW031-TP-PJ-XXL', 'JNE3291-KR-XXXL', 'JNE3384-KR-L', 'JNE3384-KR-XXL', 'JNE3407-KR-L', 'JNE3722-KR-S', 'JNE3818-KR-S', 'JNE3560-KR-S', 'J0184-KR-A-S', 'MEN5004-KR-S', 'J0167-KR-XL', 'JNE3702-KR-XL', 'MEN5017-KR-M', 'J0236-SKD-M', 'J0004-SKD-M', 'J0196-TP-XXXL', 'SET275-KR-NP-XXXL', 'JNE3459-KR-M', 'JNE3225-KR-M', 'JNE3707-DR-XXXL', 'SET243-KR-PP-XS', 'J0197-TP-XXXL', 'BTM027-NP-L', 'SET273-KR-NP-XS', 'JNE1998-KR-311-L', 'MEN5027-KR-M', 'J0007-SKD-S', 'J0346-SET-XXXL', 'JNE1977-KR-237-S', 'BL104-L', 'J0335-DR-XS', 'NW034-TP-PJ-L', 'SET188-KR-NP-XXL', 'SET155-KR-PP-XS', 'JNE3688-TU-XL', 'SET300-KR-NP-XXL', 'SET351-KR-NP-XXL', 'JNE3470-KR-XXXL', 'J0245-SKD-L', 'J0186-SET-XXL', 'JNE3749-KR-XS', 'JNE3805-KR-XS', 'SET349-KR-NP-XXXL', 'SET201-KR-NP-A-S', 'SAR152', 'JNE3640-TP-N-L', 'SET182-KR-DH-M', 'SAR135', 'SAR137', 'JNE2100-KR-144-XXL', 'SET319-KR-NP-M', 'BTM030-NP-M', 'JNE3556-KR-XL', 'J0284-SKD-XXXL', 'SET353-KR-NP-M', 'SET276-KR-PP-XXXL', 'SET246-KR-PP-XL', 'JNE3691-TU-XS', 'JNE3506-KR-XS', 'MEN5024-KR-XXL', 'J0139-KR-S', 'SET376-KR-NP-XS', 'J0080-TP-S', 'JNE3810-KR-M', 'SET229-KR-PP-M', 'JNE3708-TU-XXL', 'J0176-TP-XXXL', 'MEN5011-KR-XXXL', 'J0132-KR-XL', 'JNE3710-DR-M', 'SET317-KR-PP-M', 'JNE3789-KR-S', 'JNE3869-DR-XL', 'SET159-KR-NP-XS', 'NW027-TP-PJ-S', 'SET385-KR-NP-XS', 'JNE3363-KR-1032-XXL', 'JNE3722-KR-XL', 'J0396-DR-XL', 'JNE3698-KR-XXL', 'MEN5008-KR-XXXL', 'JNE3042-KR-S', 'J0295-DR-L', 'JNE3817-KR-XS', 'JNE3835-KR-S', 'JNE3030-KR-XXL', 'JNE3806-KR-XXL', 'SET393-KR-NP-M', 'SET145-KR-NP-XS', 'JNE3710-DR-XXXL', 'MEN5003-KR-L', 'J0189-TP-XXXL', 'J0281-SKD-XL', 'J0400-DR-XS', 'JNE3704-KR-XS', 'JNE3744-TU-XL', 'J0197-TP-L', 'NW020-ST-SR-XXL', 'JNE3637-KR-XL', 'JNE3782-KR-XXXL', 'MEN5007-KR-XL', 'J0130-SET-S', 'J0280-SKD-XL', 'JNE3804-KR-XXL', 'NW016-ST-SR-S', 'J0295-DR-S', 'J0117-TP-M', 'JNE3800-KR-XS', 'JNE3797-KR-A-XXXL', 'J0247-SKD-XS', 'JNE3471-KR-L', 'JNE3479-KR-L', 'J0284-SKD-S', 'SET223-KR-NP-S', 'JNE3863-TU-XXL', 'JNE3892-TP-XXL', 'J0251-SKD-XXL', 'J0213-TP-XXL', 'SET229-KR-PP-XXL', 'JNE2305-KR-533-XL', 'J0342-TP-XXXL', 'J0301-TP-S', 'J0197-TP-S', 'J0245-SKD-XXL', 'J0158-DR-S', 'J0237-SKD-XXXL', 'SET348-KR-NP-S', 'J0108-SKD-S', 'JNE3619-KR-L', 'J0220-BL-XL', 'SET038-KR-PP-M', 'J0148-SET-M', 'J0340-TP-S', 'MEN5017-KR-S', 'JNE3634-KR-S', 'J0090-TP-S', 'J0108-SKD-XXXL', 'MEN5025-KR-S', 'JNE3722-KR-M', 'JNE3869-DR-XS', 'MEN5023-KR-XXXL', 'SET378-KR-NP-XL', 'J0005-DR-L', 'J0291-JS-S', 'J0285-SKD-XXXL', 'JNE3783-KR-XXXL', 'J0215-BL-S', 'JNE3678-TU-XXXL', 'JNE3363-KR-1032-XXXL', 'JNE3575-KR-S', 'JNE3801-KR-XS', 'MEN5026-KR-XL', 'J0157-DR-XXXL', 'J0328-KR-XXL', 'JNE3835-KR-L', 'JNE3553-KR-L', 'SET128-KR-DH-L', 'J0100-DR-XXL', 'JNE3764-KR-XXL', 'JNE3291-KR-M', 'J0179-KR-XXL', 'JNE1525-KR-UDF19BLACK-XXL', 'NW013-ST-SR-S', 'JNE3384-KR-XS', 'JNE3384-KR-XXXL', 'JNE3697-KR-M', 'SET405-KR-NP-S', 'J0007-SKD-L', 'J0108-SKD-XXL', 'J0158-DR-XXL', 'SET355-KR-PP-XL', 'JNE3635-KR-XL', 'SET201-KR-NP-A-L', 'J0215-BL-M', 'NW029-ST-SR-XS', 'JNE3579-KR-S', 'J0041-SET-XXL', 'J0201-TP-XXXL', 'SET217-KR-PP-XS', 'JNE3880-DR-M', 'J0012-SKD-XXXL', 'SET341-KR-NP-XXXL', 'J0097-KR-XXL', 'SET384-KR-NP-XXXL', 'SET389-KR-NP-L', 'JNE3794-KR-S', 'JNE3716-KR-XS', 'JNE3758-KR-S', 'J0109-SKD-L', 'J0219-BL-L', 'MEN5009-KR-L', 'MEN5028-KR-L', 'MEN5015-KR-L', 'J0339-DR-XXXL', 'JNE2113-KR-381-XXL', 'JNE3733-KR-XS', 'SET377-KR-NP-XS', 'NW032-ST-CP-XL', 'JNE3488-KR-S', 'JNE3866-KR-XXL', 'J0344-TP-XS', 'JNE3364-KR-1051-A-XL', 'SET269-KR-NP-XL', 'SET384-KR-NP-XXL', 'J0281-SKD-XXXL', 'SET058-KR-NP-XXXL', 'SET380-KR-NP-XS', 'JNE3413-KR-XL', 'JNE1951-KR-155-S', 'SET287-KR-NP-XS', 'JNE3065-KR-M', 'BTM029-NP-M', 'BTM031-NP-M', 'J0401-DR-XXL', 'JNE3373-KR-S', 'SET405-KR-NP-XL', 'MEN5007-KR-XXL', 'JNE3603-KR-L', 'J0024-KR-XL', 'JNE3694-KR-M', 'JNE1234-MULTI-KR-032-L', 'J0081-DR-XL', 'J0212-DR-XL', 'JNE3698-KR-XL', 'J0158-DR-L', 'SET377-KR-NP-S', 'J0295-DR-XL', 'SET004-KR-SP-S', 'JNE1525-KR-UDF19BLACK-S', 'SET279-LC-XXL', 'J0307-TP-XXXL', 'SET384-KR-NP-S', 'JNE3706-DR-XL', 'JNE3609-KR-M', 'SET290-KR-DPT-XXXL', 'JNE3484-KR-S', 'JNE3255-KR-S', 'J0240-SKD-XL', 'J0106-KR-L', 'JNE3761-KR-L', 'JNE3659-TP-N-M', 'JNE3869-DR-L', 'NW001-TP-PJ-L', 'SET365-KR-NP-XS', 'SET290-KR-DPT-S', 'J0332-DR-S', 'SET043-KR-NP-S', 'SET048-KR-NP-S', 'JNE3437-KR-XS', 'J0301-TP-XS', 'BTM032-NP-S', 'SET351-KR-NP-XXXL', 'SET374-KR-NP-XL', 'SET341-KR-NP-XXL', 'JNE3728-KR-XL', 'J0148-SET-L', 'JNE3452-KR-L', 'BTM030-NP-XXL', 'JNE3504-KR-L', 'J0396-DR-L', 'J0105-KR-M', 'J0105-KR-L', 'JNE3376-KR-XXL', 'JNE3648-TP-N-XXL', 'BTM036-PP-L', 'NW009-ST-CP-XXL', 'MEN5013-KR-XL', 'J0333-DR-L', 'JNE3273-KR-XXXL', 'SET058-KR-NP-XL', 'JNE3777-KR-XXXL', 'SET218-KR-NP-XXL', 'SET232-KR-PP-XL', 'JNE3407-KR-XL', 'JNE3384-KR-XL', 'JNE3694-KR-XL', 'JNE3042-KR-L', 'J0277-SKD-S', 'J0150-KR-XXL', 'BTM037-PP-XXXL', 'SET233-KR-PP-XS', 'JNE3751-KR-XL', 'JNE3659-TP-N-XL', 'JNE3712-TP-N-XL', 'JNE3563-KR-L', 'J0124-TP-M', 'J0220-BL-M', 'J0135-SET-S', 'J0347-SET-XXXL', 'SET389-KR-NP-XXL', 'JNE3270-KR-M', 'SET053-KR-NP-XXL', 'MEN5023-KR-L', 'MEN5019-KR-XXL', 'J0395-DR-L', 'SET038-KR-PP-S', 'J0338-DR-S', 'J0250-SKD-XL', 'J0307-TP-M', 'BL101-M', 'JNE3546-KR-XS', 'JNE3751-KR-XS', 'JNE3482-KR-S', 'JNE3861-DR-XXXL', 'SET228-KR-PP-A-XXL', 'JNE3730-KR-XXL', 'SET341-KR-NP-S', 'BTM002-XL', 'J0004-SKD-XXL', 'SET224-KR-NP-XL', 'SET400-KR-NP-L', 'SET341-KR-NP-XS', 'J0127-SKD-XS', 'JNE3702-KR-L', 'J0086-DR-XS', 'J0148-SET-XL', 'J0278-SET-M', 'J0088-TP-XXXL', 'SET358-KR-NP-M', 'J0082-TP-XXL', 'J0292-TP-XXL', 'NW039-TP-SR-XS', 'SET305-KR-DPT-XS', 'JNE3885-KR-S', 'JNE3637-KR-S', 'JNE3387-KR-M', 'JNE3643-TP-N-S', 'J0073-KR-M', 'J0072-KR-M', 'J0026-KR-S', 'J0127-SKD-S', 'SET103-KR-SP-S', 'SET260-KR-PP-S', 'JNE3804-KR-L', 'JNE3720-KR-XXL', 'SET244-KR-NP-S', 'JNE3708-TU-XL', 'J0212-DR-M', 'JNE3862-TU-M', 'JNE3543-KR-XXXL', 'SET227-KR-PP-A-XXXL', 'SET227-KR-PP-A-XS', 'MEN5023-KR-XXL', 'JNE3365-KR-1052-XL', 'SET405-KR-NP-XXL', 'J0217-BL-XXL', 'JNE3695-KR-M', 'JNE3865-TP-XXL', 'J0179-KR-M', 'MEN5017-KR-XL', 'JNE3439-KR-S', 'SET037-KR-NP-XL', 'J0139-KR-L', 'JNE3474-KR-E-XS', 'J0224-SKD-M', 'JNE3668-TP-N-S', 'JNE3655-TP-S', 'SET360-KR-NP-XS', 'J0350-SET-XXL', 'J0041-SET-XXXL', 'J0081-DR-M', 'SET323-KR-NP-S', 'J0369-SKD-L', 'SET282-KR-PP-L', 'J0306-DR-M', 'JNE3800-KR-L', 'JNE3602-KR-XXXL', 'JNE3457-KR-XXL', 'J0095-SET-XS', 'J0190-TP-L', 'J0284-SKD-L', 'JNE3818-KR-XL', 'SET386-KR-NP-XS', 'J0336-TP-XL', 'SET401-KR-NP-XL', 'J0351-SET-XL', 'JNE3781-KR-XL', 'JNE3805-KR-XXXL', 'JNE3369-KR-M', 'JNE3439-KR-XXL', 'J0399-DR-XS', 'J0010-LCD-M', 'JNE3576-KR-XS', 'NW020-ST-SR-L', 'J0402-DR-XL', 'JNE3639-TP-N-S', 'JNE3724-KR-L', 'JNE3609-KR-L', 'JNE3804-KR-XXXL', 'SET319-KR-NP-XXL', 'J0277-SKD-L', 'SAR069', 'JNE3838-KR-L', 'J0122-TP-XXL', 'JNE3674-TU-XXL', 'JNE3775-KR-XS', 'JNE3296-KR-L', 'SET138-KR-PP-XXL', 'JNE2305-KR-533-M', 'J0252-SKD-L', 'JNE3294-KR-M', 'JNE3806-KR-S', 'SET165-KR-PP-M', 'JNE3461-KR-S', 'JNE3578-KR-M', 'JNE3615-KR-S', 'JNE3515-KR-M', 'J0344-TP-S', 'SET349-KR-NP-M', 'JNE3753-KR-XXL', 'MEN5010-KR-L', 'JNE2153-KR-278-A-XXL', 'JNE3797-KR-XL', 'JNE3707-DR-S', 'SET408-KR-NP-XL', 'SET094-KR-NP-XL', 'JNE3860-DR-L', 'SET385-KR-NP-L', 'SET375-KR-NP-M', 'J0401-DR-M', 'SET073-KR-SHA-L', 'JNE3773-KR-XXL', 'J0113-TP-M', 'SET247-KR-SHA-XL', 'JNE3621-KR-XXL', 'JNE3761-KR-M', 'JNE3408-KR-XXXL', 'JNE3716-KR-XXL', 'SET135-KR-PP-XL', 'J0062-DR-S', 'JNE3554-KR-XL', 'SET334-KR-NP-L', 'JNE3706-DR-M', 'JNE3568-KR-XS', 'J0389-TP-M', 'J0108-SKD-M', 'J0203-TP-XS', 'JNE3365-KR-1052-L', 'SET333-KR-DPT-S', 'J0355-KR-S', 'BL009-61BLACK-B', 'JNE1951-KR-155-XXL', 'JNE3443-KR-XL', 'SET281-KR-PP-XL', 'JNE3486-KR-XL', 'SET396-KR-PP-XL', 'JNE3758-KR-XXL', 'SET247-KR-SHA-M', 'BTM008-XL', 'BTM029-NP-XL', 'SET327-KR-DPT-M', 'J0351-SET-XXL', 'J0346-SET-XXL', 'J0280-SKD-L', 'SET323-KR-NP-L', 'J0353-KR-L', 'JNE3610-KR-M', 'SET337-KR-NP-XS', 'SET317-KR-PP-L', 'NW014-ST-SR-S', 'SET044-KR-NP-XS', 'JNE3479-KR-M', 'JNE3724-KR-M', 'JNE3605-KR-XXXL', 'JNE3648-TP-N-XL', 'JNE3762-KR-XL', 'JNE3603-KR-XL', 'JNE3068-KR-A-S', 'JNE3660-TP-N-L', 'J0382-SKD-XS', 'JNE3768-KR-S', 'J0163-SKD-S', 'J0399-DR-L', 'SET165-KR-PP-XXL', 'SET328-KR-NP-XXXL', 'SET358-KR-NP-L', 'J0111-TP-L', 'SET083-KR-PP-XL', 'J0415-DR-S', 'JNE3415-KR-XS', 'JNE3376-KR-L', 'JNE3644-TP-N-XL', 'JNE3383-KR-A-XXL', 'JNE3454-KR-XXL', 'J0277-SKD-XXXL', 'SET254-KR-NP-M', 'SET186-KR-DH-M', 'J0377-SKD-M', 'SET233-KR-PP-XL', 'J0254-SKD-XXXL', 'J0090-TP-M', 'SET245-KR-NP-S', 'J0161-DR-S', 'JNE3042-KR-XXXL', 'JNE3892-TP-XXXL', 'JNE3451-KR-L', 'JNE3612-KR-L', 'JNE3790-KR-L', 'JNE3368-KR-S', 'J0277-SKD-XXL', 'JNE3471-KR-XL', 'SET194-KR-NP-XL', 'JNE3714-KR-XXXL', 'JNE3816-KR-XS', 'J0234-SKD-XS', 'JNE3579-KR-XS', 'JNE2205-KR-467-A-M', 'SET236-KR-PP-M', 'SET286-KR-NP-M', 'SET184-KR-PP-L', 'JNE3728-KR-S', 'J0239-SKD-XXL', 'JNE3423-KR-S', 'SET325-KR-NP-M', 'SET360-KR-NP-L', 'NW022-TP-PJ-XL', 'J0167-KR-XS', 'J0381-SKD-XL', 'JNE3655-TP-M', 'J0025-DR-M', 'JNE3363-KR-1032-XL', 'JNE3466-KR-M', 'JNE3427-KR-S', 'JNE1906-KR-031-L', 'JNE3793-KR-XXL', 'JNE3549-KR-L', 'JNE3638-KR-M', 'J0379-SKD-S', 'SET251-KR-PP-M', 'JNE3786-KR-M', 'JNE3225-KR-S', 'SET317-KR-PP-XL', 'JNE2170-KR-436-S', 'J0305-DR-XS', 'MEN5029-KR-XXL', 'MEN5014-KR-XXL', 'SET254-KR-NP-XXL', 'JNE3434-KR-XS', 'JNE3160-KR-G-L', 'J0189-TP-M', 'SET224-KR-NP-XS', 'J0207-DR-S', 'JNE3504-KR-XS', 'JNE3651-TP-N-XL', 'JNE3735-KR-XS', 'JNE3605-KR-M', 'J0376-SKD-XS', 'JNE3718-KR-XS', 'JNE3484-KR-M', 'JNE3408-KR-XXL', 'J0098-TP-XXXL', 'NW002-TP-PJ-L', 'J0124-TP-XL', 'JNE3480-KR-XL', 'JNE3432-KR-XL', 'JNE3516-KR-E-XL', 'J0243-DR-M', 'JNE3835-KR-XXL', 'JNE3288-KR-S', 'JNE3716-KR-S', 'SET044-KR-NP-M', 'JNE3870-DR-M', 'J0150-KR-XXXL', 'SET144-KR-NP-XS', 'J0416-DR-XXL', 'JNE3627-KR-XL', 'JNE1408-GREY-KR-UDF19-XXXL', 'JNE3288-KR-XS', 'J0009-SKD-XXXL', 'JNE3741-KR-S', 'JNE3804-KR-S', 'JNE3435-KR-XS', 'SET116-KR-NP-XS', 'J0397-DR-XL', 'JNE3606-KR-L', 'J0039-SET-S', 'SET240-KR-PP-XS', 'JNE3422-KR-S', 'SET276-KR-PP-XXL', 'JNE3715-KR-XL', 'JNE3487-KR-XL', 'J0187-KR-XS', 'J0002-SKD-L', 'JNE3776-KR-XL', 'SET243-KR-PP-XL', 'SET290-KR-DPT-XXL', 'J0013-SKD-S', 'NW008-ST-CP-XS', 'J0081-DR-XXL', 'SET364-KR-NP-M', 'SET375-KR-NP-XXXL', 'J0370-SKD-XXXL', 'J0110-SKD-M', 'JNE3504-KR-XXL', 'MEN5025-KR-XL', 'JNE3619-KR-XL', 'JNE3344-KR-L', 'JNE3689-TU-XXXL', 'J0354-KR-M', 'JNE3689-TU-S', 'SET249-KR-NP-M', 'JNE3671-TU-XS', 'NW012-TP-PJ-S', 'SET240-KR-PP-XL', 'JNE3863-TU-M', 'JNE3459-KR-XS', 'MEN5004-KR-M', 'J0092-SET-M', 'JNE3628-KR-XXXL', 'JNE3575-KR-XXXL', 'MEN5005-KR-XXL', 'JNE3736-KR-L', 'SET186-KR-DH-XS', 'JNE3291-KR-S', 'JNE3666-TP-XL', 'JNE3717-KR-XL', 'BTM029-NP-XXL', 'BTM021-B-XXL', 'MEN5015-KR-M', 'J0351-SET-S', 'SET253-KR-NP-XXL', 'J0134-SET-XL', 'SET433-KR-NP-L', 'J0124-TP-S', 'SET310-KR-NP-L', 'JNE3727-KR-L', 'J0415-DR-XXL', 'J0396-DR-XXL', 'JNE1977-KR-237-XXL', 'J0034-SET-XXXL', 'JNE3400-KR-S', 'SET265-KR-NP-XXXL', 'JNE2049-KR-351-S', 'BTM040-PP-S', 'J0402-DR-XXL', 'SET356-KR-NP-S', 'SET197-KR-NP-XXXL', 'JNE3710-DR-XS', 'J0209-DR-XXXL', 'BTM002-B-M', 'JNE3714-KR-S', 'SET289-KR-NP-XXXL', 'SET349-KR-NP-XXL', 'JNE3805-KR-XXL', 'SET377-KR-NP-XXL', 'J0106-KR-XXXL', 'SET287-KR-NP-S', 'JNE3573-KR-XS', 'J0148-SET-XXL', 'JNE2009-KR-310-M', 'JNE3702-KR-M', 'NW014-ST-SR-L', 'JNE3881-DR-L', 'SET240-KR-PP-XXL', 'JNE3683-TU-XS', 'JNE3488-KR-XXL', 'SET343-KR-NP-XS', 'JNE3480-KR-XXL', 'JNE3638-KR-XXXL', 'JNE3739-KR-XXXL', 'SET280-KR-PP-M', 'JNE3759-KR-M', 'JNE3763-KR-XL', 'JNE3836-KR-XXL', 'JNE3688-TU-XS', 'SET228-KR-PP-A-XS', 'JNE3735-KR-XXXL', 'SET198-KR-NP-A-M', 'BTM036-PP-XXL', 'SET197-KR-NP-M', 'J0079-SKD-XXXL', 'JNE3633-KR-XS', 'JNE3638-KR-XS', 'SET131-KR-NP-XL', 'JNE2266-KR-490-A-XL', 'JNE3404-KR-M', 'BTM002-B-XXL', 'J0176-TP-M', 'JNE3756-KR-XL', 'J0178-TP-XXXL', 'J0245-SKD-S', 'JNE3837-KR-XL', 'SET194-KR-NP-XXXL', 'JNE3701-KR-XXXL', 'SET325-KR-NP-XS', 'J0233-SKD-XXXL', 'JNE3543-KR-XXL', 'SET358-KR-NP-XS', 'J0345-SET-L', 'MEN5001-KR-XXL', 'JNE3556-KR-XXL', 'JNE3368-KR-XS', 'JNE3804-KR-XS', 'J0079-SKD-S', 'JNE3720-KR-XL', 'SET252-KR-PP-M', 'J0179-KR-XL', 'J0083-KR-M', 'SET037-KR-NP-XXL', 'JNE3489-KR-XXL', 'J0157-DR-XXL', 'J0217-BL-XL', 'J0217-BL-L', 'JNE3625-DR-S', 'J0081-DR-XS', 'JNE3807-KR-XXL', 'J0015-DR-XS', 'J0328-KR-S', 'J0102-SKD-XL', 'J0211-DR-S', 'SET383-KR-NP-XXXL', 'JNE3687-TU-XL', 'SET392-KR-NP-XS', 'JNE3689-TU-XS', 'MEN5010-KR-XL', 'J0101-DR-A-XXXL', 'SET075-KR-DH-S', 'J0179-KR-S', 'JNE3616-KR-XL', 'J0236-SKD-XS', 'SET320-KR-NP-M', 'SET342-KR-NP-N-XXXL', 'J0397-DR-M', 'JNE3806-KR-M', 'JNE3391-KR-M', 'SET352-KR-NP-XL', 'SET393-KR-NP-XL', 'JNE3421-KR-N-S', 'JNE3673-TU-XL', 'SET158-KR-PP-XXXL', 'SET229-KR-PP-XXXL', 'NW031-TP-PJ-XXXL', 'SET402-KR-NP-L', 'JNE3675-TU-M', 'JNE3648-TP-N-XS', 'J0155-KR-XS', 'J0337-TP-XXL', 'JNE3656-TP-N-L', 'NW039-TP-SR-XXL', 'J0034-SET-XXL', 'J0024-KR-XXXL', 'J0240-SKD-XXL', 'JNE3432-KR-XXXL', 'NW034-TP-PJ-M', 'JNE3672-TU-L', 'J0041-SET-L', 'J0235-SKD-XS', 'MEN5007-KR-S', 'JNE3671-TU-XXL', 'SET310-KR-NP-XL', 'J0157-DR-XS', 'JNE3256-KR-XXL', 'MEN5011-KR-L', 'JNE3730-KR-XS', 'SET392-KR-NP-XXL', 'J0130-SET-XXXL', 'JNE3506-KR-L', 'J0233-SKD-S', 'J0139-KR-XS', 'JNE3365-KR-1052-A-XS', 'SET375-KR-NP-S', 'JNE3464-KR-L', 'JNE3576-KR-XXL', 'JNE3638-KR-XXL', 'JNE3474-KR-E-XXL', 'JNE3568-KR-XXXL', 'SET239-KR-NP-XL', 'JNE1951-KR-155-XS', 'BL102-M', 'JNE3690-TU-XXL', 'SET378-KR-NP-S', 'J0135-SET-L', 'JNE3429-KR-S', 'J0204-TP-XXXL', 'JNE3720-KR-XXXL', 'SET253-KR-NP-L', 'SET278-KR-NP-XS', 'SET366-KR-NP-L', 'JNE3869-DR-M', 'JNE2205-KR-467-A-XS', 'JNE3688-TU-XXL', 'J0131-KR-XXXL', 'J0137-SET-L', 'J0108-SKD-L', 'JNE3534-KR-L', 'BTM031-NP-L', 'JNE3449-KR-L', 'J0242-SKD-XS', 'BTM003-B-XXXL', 'SET247-KR-SHA-L', 'J0241-SKD-XL', 'SET278-KR-NP-XL', 'JNE3549-KR-XL', 'JNE3482-KR-L', 'JNE3642-TP-S', 'J0174-TP-XL', 'J0173-DR-XS', 'JNE3068-KR-A-L', 'SET249-KR-NP-XXL', 'BL100-XL', 'JNE3790-KR-XXXL', 'JNE3471-KR-XXXL', 'SET332-KR-PP-XS', 'JNE3835-KR-XL', 'SET184-KR-PP-XS', 'JNE3564-KR-L', 'JNE3459-KR-L', 'SET330-KR-PP-M', 'JNE3553-KR-XL', 'NW001-TP-PJ-XL', 'J0302-DR-XXL', 'SET267-KR-NP-XXXL', 'J0295-DR-XXXL', 'J0161-DR-XXXL', 'SET397-KR-NP-L', 'SET316-KR-DPT-XS', 'JNE3642-TP-XS', 'JNE3779-KR-XL', 'JNE3834-KR-M', 'SET154-KR-NP-XXL', 'SET400-KR-NP-XXL', 'SET286-KR-NP-XXL', 'MEN5031-KR-L', 'SET388-KR-NP-M', 'JNE3635-KR-M', 'JNE3652-TP-N-XS', 'J0173-DR-S', 'JNE3608-KR-XS', 'J0219-BL-S', 'JNE3629-KR-XXL', 'JNE3530-KR-XXL', 'SAR138', 'J0113-TP-XXXL', 'JNE3787-KR-XS', 'JNE3686-TU-XL', 'SET288-KR-NP-S', 'JNE3554-KR-S', 'JNE3789-KR-XXXL', 'JNE3607-KR-XXL', 'JNE3738-KR-XS', 'SET383-KR-NP-XXL', 'JNE3479-KR-XS', 'JNE3706-DR-XXL', 'J0342-TP-XL', 'JNE3774-KR-S', 'NW014-ST-SR-M', 'JNE3775-KR-L', 'JNE3612-KR-XXL', 'JNE3623-KR-S', 'JNE3777-KR-XL', 'JNE3725-KR-XXL', 'J0164-DR-XXL', 'J0347-SET-XL', 'J0201-TP-XS', 'JNE3703-KR-XS', 'SET329-KR-NP-XXL', 'J0231-SKD-XXXL', 'J0037-KR-XXXL', 'SET182-KR-DH-S', 'J0249-SKD-L', 'JNE3542-KR-L', 'JNE3757-KR-XS', 'SET319-KR-NP-XS', 'JNE3670-TU-M', 'SET186-KR-DH-S', 'JNE3773-KR-S', 'J0231-SKD-M', 'MEN5004-KR-XXL', 'J0234-SKD-XXL', 'JNE3776-KR-S', 'JNE3428-KR-XS', 'JNE3745-KR-L', 'J0299-KR-M', 'JNE3577-KR-XL', 'JNE3638-KR-L', 'SET246-KR-PP-XXL', 'MEN5016-KR-XXXL', 'JNE3796-KR-L', 'J0201-TP-XXL', 'JNE3636-KR-XXXL', 'J0028-KR-L', 'JNE3291-KR-XS', 'J0337-TP-L', 'JNE3733-KR-L', 'JNE3773-KR-XXXL', 'SET347-KR-NP-XXL', 'SET392-KR-NP-M', 'J0396-DR-XS', 'JNE2251-KR-537-M', 'JNE3729-KR-XL', 'SET397-KR-NP-XS', 'J0020-SET-XS', 'SET249-KR-NP-S', 'JNE3427-KR-L', 'SET433-KR-NP-S', 'MEN5002-KR-S', 'JNE3880-DR-XXXL', 'J0415-DR-XXXL', 'JNE2132-KR-398-S', 'SET339-KR-NP-L', 'J0376-SKD-M', 'JNE2132-KR-398-M', 'SET049-KR-NP-S', 'SET325-KR-NP-S', 'SET375-KR-NP-L', 'JNE3644-TP-N-S', 'SET226-KR-PP-XL', 'JNE3735-KR-S', 'J0008-SKD-XXXL', 'MEN5010-KR-M', 'J0117-TP-XS', 'JNE3443-KR-XS', 'J0048-TP-S', 'JNE3894-TP-XXL', 'J0333-DR-XXL', 'JNE3565-KR-M', 'JNE3651-TP-N-XXL', 'MEN5024-KR-S', 'SET241-KR-PP-S', 'J0033-KR-XXXL', 'SET262-KR-NP-L', 'SET241-KR-PP-M', 'NW039-TP-SR-M', 'JNE3633-KR-XL', 'JNE3790-KR-XXL', 'JNE3571-KR-XS', 'J0162-SKD-XL', 'SET304-KR-DPT-M', 'JNE3717-KR-L', 'J0414-DR-L', 'JNE3449-KR-XL', 'J0414-DR-XL', 'JNE3559-KR-XXL', 'JNE3348-KR-XS', 'J0089-TP-XL', 'J0189-TP-XXL', 'JNE3451-KR-XXL', 'MEN5017-KR-L', 'BL102-S', 'JNE2101-KR-210-S', 'J0402-DR-M', 'JNE3429-KR-M', 'J0184-KR-XXL', 'JNE3660-TP-N-XXL', 'SET270-KR-PP-S', 'JNE3457-KR-S', 'JNE3606-KR-XS', 'SET128-KR-DH-XL', 'SET305-KR-DPT-XXL', 'J0092-SET-XL', 'SET378-KR-NP-XXXL', 'NW014-ST-SR-XXL', 'JNE3800-KR-S', 'J0299-KR-XS', 'J0348-SET-XS', 'JNE3715-KR-XS', 'JNE3440-KR-N-XXL', 'SET313-KR-NP-XL', 'JNE3794-KR-L', 'JNE1998-KR-311-XL', 'NW029-ST-SR-XL', 'JNE3800-KR-A-S', 'JNE3701-KR-XL', 'JNE3334-KR-XL', 'JNE3810-KR-XS', 'JNE3617-KR-S', 'MEN5019-KR-M', 'BTM038-PP-L', 'JNE3703-KR-L', 'JNE3773-KR-L', 'JNE3476-KR-L', 'JNE3818-KR-L', 'JNE3404-KR-L', 'JNE3856-KR-XXXL', 'SET257-KR-PP-XS', 'SET413-KR-NP-XXL', 'SET100-KR-PP-XS', 'J0215-BL-XXL', 'JNE3748-KR-XXXL', 'J0080-TP-L', 'J0328-KR-XS', 'SET131-KR-NP-A-XL', 'JNE3780-KR-XXL', 'JNE3764-KR-S', 'JNE3636-KR-S', 'SET098-KR-PP-XXXL', 'NW008-ST-CP-S', 'SET094-KR-NP-XXXL', 'J0336-TP-S', 'SET313-KR-NP-M', 'SET258-KR-PP-XL', 'J0132-KR-XS', 'JNE3735-KR-L', 'SET278-KR-NP-XXL', 'JNE3255-KR-XL', 'JNE3796-KR-S', 'JNE3261-KR-XS', 'BL099-S', 'BL100-S', 'J0382-SKD-XXL', 'SET330-KR-PP-XXXL', 'JNE3607-KR-XS', 'JNE3798-KR-A-L', 'JNE3431-KR-XS', 'SET413-KR-NP-M', 'SET226-KR-PP-M', 'JNE3336-KR-XS', 'J0077-SKD-M', 'MEN5003-KR-XXL', 'JNE3482-KR-M', 'J0139-KR-XL', 'JNE1906-KR-031-XXL', 'SET195-KR-NP-A-L', 'JNE3454-KR-XS', 'J0153-DR-S', 'JNE3797-KR-S', 'JNE3609-KR-S', 'J0213-TP-XL', 'JNE3435-KR-XL', 'JNE2291-KR-602-XXXL', 'JNE3749-KR-XXL', 'SET384-KR-NP-M', 'SET272-KR-PP-XL', 'SET339-KR-NP-XS', 'JNE3615-KR-M', 'JNE3427-KR-M', 'SET400-KR-NP-S', 'JNE3775-KR-XXL', 'JNE3861-DR-S', 'JNE3709-DR-S', 'SET280-KR-PP-XL', 'J0081-DR-S', 'SET238-KR-PP-XL', 'BTM045-PP-XXL', 'SET230-KR-PP-XL', 'J0232-SKD-XXL', 'SET132-KR-NP-XS', 'J0376-SKD-XXL', 'J0157-DR-XL', 'J0296-DR-S', 'CH213-BROWN-M', 'J0377-SKD-L', 'JNE3708-TU-M', 'BTM042-PP-L', 'SET205-KR-DPT-A-XXXL', 'JNE3484-KR-XXL', 'BTM027-NP-XXXL', 'J0113-TP-S', 'JNE3820-KR-XS', 'JNE1525-KR-UDF19-A-XS', 'JNE3611-KR-L', 'NW005-ST-PJ-M', 'SET295-KR-NP-XXL', 'JNE3559-KR-XL', 'NW012-TP-PJ-XXXL', 'J0175-KR-XXL', 'SET193-KR-NP-A-M', 'J0162-SKD-XXL', 'JNE3546-KR-XXXL', 'SET205-KR-DPT-A-S', 'J0090-TP-XXXL', 'JNE3714-KR-M', 'SET341-KR-NP-XL', 'JNE3726-KR-XL', 'JNE3743-TP-XS', 'J0310-TP-XXL', 'SET209-KR-PP-S', 'SET395-KR-NP-XXL', 'J0228-SKD-XL', 'J0025-DR-S', 'J0111-TP-XL', 'SET273-KR-NP-XL', 'J0209-DR-L', 'JNE3641-TP-N-S', 'J0250-SKD-XXL', 'SET220-KR-PP-L', 'JNE3835-KR-XXXL', 'JNE3836-KR-XXXL', 'SET307-KR-DPT-M', 'JNE3313-KR-A-XS', 'SET396-KR-PP-M', 'JNE2113-KR-381-S', 'JNE3638-KR-S', 'JNE3294-KR-XL', 'SET385-KR-NP-XXL', 'JNE3807-KR-XXXL', 'SET220-KR-PP-XXL', 'SET227-KR-PP-A-XXL', 'J0231-SKD-S', 'J0012-SKD-XS', 'J0148-SET-XS', 'J0345-SET-XXXL', 'JNE3458-KR-XL', 'SET258-KR-PP-XS', 'JNE3455-KR-XXXL', 'SET295-KR-NP-XS', 'SET282-KR-PP-XS', 'JNE2291-KR-602-XL', 'J0090-TP-XL', 'SET185-KR-NP-XXXL', 'J0212-DR-L', 'J0108-SKD-XS', 'JNE2032-KR-205-XL', 'SET364-KR-NP-S', 'JNE3548-KR-XXL', 'NW029-ST-SR-M', 'SET156-KR-NP-XXL', 'SET116-KR-NP-XXL', 'SET227-KR-PP-A-M', 'JNE3880-DR-S', 'JNE3458-KR-L', 'JNE2100-KR-144-M', 'SET385-KR-NP-S', 'JNE3445-KR-XXL', 'JNE3764-KR-XXXL', 'J0047-TP-XL', 'J0329-KR-XS', 'JNE3288-KR-XL', 'SET316-KR-DPT-XL', 'SET337-KR-NP-M', 'SET281-KR-PP-L', 'MEN5019-KR-XL', 'JNE3369-KR-XXL', 'SET316-KR-DPT-L', 'J0165-TP-L', 'J0244-SKD-XXXL', 'SET048-KR-NP-XXXL', 'JNE3425-KR-L', 'J0161-DR-XS', 'JNE3553-KR-XXXL', 'J0085-TP-S', 'SET355-KR-PP-XS', 'JNE3610-KR-XXL', 'JNE3833-KR-L', 'SET360-KR-NP-XXXL', 'JNE3793-KR-XL', 'SET188-KR-NP-XXXL', 'SET413-KR-NP-XL', 'NW015-TP-PJ-XS', 'BL024-74RED', 'J0155-KR-XXXL', 'SET322-KR-SHA-XXXL', 'J0133-KR-XS', 'J0010-LCD-XXXL', 'JNE3741-KR-M', 'SET329-KR-NP-XS', 'SET246-KR-PP-XS', 'SET369-KR-NP-XXXL', 'JNE3767-KR-XS', 'SET197-KR-NP-XS', 'MEN5027-KR-XXL', 'JNE3619-KR-S', 'J0009-SKD-M', 'JNE3745-KR-XXXL', 'SET282-KR-PP-S', 'BTM029-NP-S', 'J0157-DR-M', 'SET320-KR-NP-L', 'JNE3425-KR-XL', 'J0204-TP-S', 'J0204-TP-XXL', 'SET395-KR-NP-L', 'JNE3686-TU-L', 'SET273-KR-NP-XXL', 'JNE3834-KR-XXL', 'JNE3729-KR-XXXL', 'J0194-DR-XXXL', 'SET339-KR-NP-XXXL', 'JNE3523-KR-XS', 'J0029-KR-XS', 'J0051-KR-S', 'J0210-DR-XXXL', 'J0088-TP-L', 'JNE3688-TU-L', 'JNE3635-KR-XXL', 'JNE3608-KR-S', 'JNE3752-KR-XL', 'JNE3671-TU-M', 'NW004-TP-PJ-XL', 'SET156-KR-NP-XXXL', 'SET217-KR-PP-M', 'J0210-DR-L', 'BL101-S', 'BTM047-PP-S', 'J0124-TP-XXXL', 'NW007-ST-CP-L', 'BL035-161GOLD', 'JNE1906-KR-031-XXXL', 'J0371-SKD-XS', 'NW022-TP-PJ-XS', 'JNE3575-KR-XL', 'JNE3421-KR-N-XL', 'SET287-KR-NP-XL', 'SET355-KR-PP-S', 'J0049-TP-XS', 'J0088-TP-XS', 'JNE3763-KR-XS', 'SET220-KR-PP-XXXL', 'SET326-KR-PP-XXL', 'JNE3807-KR-M', 'BL110-XS', 'J0372-SKD-XXXL', 'J0299-KR-S', 'J0088-TP-M', 'J0153-DR-L', 'J0399-DR-XXL', 'JNE3732-KR-L', 'SET179-KR-PP-XXXL', 'SET210-KR-PP-XL', 'J0009-SKD-XL', 'JNE3430-KR-XXL', 'BL019-71PINK-B', 'SAR070', 'JNE3738-KR-M', 'JNE3473-KR-M', 'JNE3757-KR-M', 'JNE3689-TU-L', 'BL089-XXL', 'J0167-KR-M', 'JNE2291-KR-602-XXL', 'JNE2131-KR-A-L', 'JNE3735-KR-M', 'SET303-KR-NP-M', 'JNE3776-KR-XXL', 'JNE3740-KR-S', 'JNE3548-KR-XL', 'JNE3421-KR-L', 'JNE2291-KR-602-M', 'JNE3565-KR-XS', 'SET058-KR-NP-S', 'JNE3467-KR-XS', 'JNE1234-MULTI-KR-032-XL', 'SET272-KR-PP-XXL', 'JNE3670-TU-XXL', 'SET265-KR-NP-XXL', 'J0380-SKD-XXL', 'JNE3606-KR-XL', 'NW001-TP-PJ-XXXL', 'SET396-KR-PP-XXL', 'J0196-TP-L', 'JNE3742-KR-XXXL', 'SET186-KR-DH-L', 'NW004-TP-PJ-M', 'NW020-ST-SR-XL', 'SET378-KR-NP-XXL', 'SET165-KR-PP-S', 'SET342-KR-NP-N-M', 'J0202-TP-S', 'J0078-SET-L', 'JNE3742-KR-XL', 'JNE3510-KR-XS', 'MEN5010-KR-XXXL', 'JNE3609-KR-XS', 'SET276-KR-PP-M', 'J0234-SKD-S', 'J0021-TP-L', 'NW034-TP-PJ-XS', 'JNE3488-KR-XS', 'JNE3516-KR-E-S', 'J0348-SET-M', 'JNE3835-KR-XS', 'JNE3401-KR-L', 'SET073-KR-SHA-XL', 'JNE3807-KR-L', 'JNE3676-TU-L', 'JNE3672-TU-M', 'SET053-KR-NP-S', 'SET290-KR-DPT-L', 'BL104-XXL', 'J0034-SET-M', 'JNE3412-KR-XS', 'JNE3680-TU-XXL', 'J0151-KR-XXL', 'SET094-KR-NP-S', 'MEN5027-KR-S', 'J0243-DR-S', 'J0285-SKD-L', 'SET085-KR-PT-XS', 'SET365-KR-NP-S', 'JNE3766-KR-L', 'SET217-KR-PP-XXL', 'J0372-SKD-XXL', 'J0148-SET-XXXL', 'JNE3394-KR-A-XS', 'J0043-SET-XS', 'J0369-SKD-M', 'J0306-DR-XXL', 'JNE3651-TP-N-L', 'J0240-SKD-XXXL', 'J0158-DR-M', 'BTM021-B-XS', 'SET310-KR-NP-M', 'SET380-KR-NP-XL', 'JNE3761-KR-S', 'JNE3614-KR-XS', 'SET344-KR-NP-L', 'JNE3674-TU-L', 'JNE3782-KR-XXL', 'SET143-KR-PP-XS', 'JNE3798-KR-XXXL', 'JNE3798-KR-XS', 'NW031-TP-PJ-L', 'JNE3440-KR-N-S', 'SET224-KR-NP-XXL', 'JNE3421-KR-M', 'SET300-KR-NP-M', 'JNE2032-KR-205-S', 'J0245-SKD-M', 'J0369-SKD-S', 'JNE3803-KR-M', 'JNE2014-KR-178-XS', 'BL109-XS', 'JNE3698-KR-L', 'J0092-SET-L', 'AN208-MUSTARD-XXL', 'JNE3817-KR-S', 'JNE1233-BLUE-KR-031-L', 'JNE2100-KR-144-XL', 'J0210-DR-XS', 'J0144-SET-S', 'J0235-SKD-S', 'JNE3800-KR-A-XS', 'J0250-SKD-L', 'JNE3614-KR-XXXL', 'SET094-KR-NP-M', 'JNE3719-KR-XXL', 'SET044-KR-NP-XL', 'NW016-ST-SR-XL', 'JNE3866-KR-M', 'JNE3622-KR-XL', 'JNE3675-TU-XXL', 'MEN5025-KR-L', 'J0203-TP-XXL', 'JNE3635-KR-XS', 'J0147-SET-XXL', 'J0135-SET-M', 'SET395-KR-NP-XS', 'JNE3798-KR-S', 'JNE3579-KR-XXL', 'JNE3606-KR-XXXL', 'SET131-KR-NP-A-XXXL', 'SET195-KR-NP-A-S', 'J0249-SKD-XL', 'SET267-KR-NP-L', 'J0381-SKD-L', 'J0086-DR-XXXL', 'SET044-KR-NP-L', 'J0281-SKD-XXL', 'JNE3466-KR-XL', 'SET158-KR-PP-L', 'JNE3360-KR-S', 'JNE3603-KR-S', 'J0307-TP-S', 'J0165-TP-XXL', 'JNE3261-KR-XXXL', 'NW013-ST-SR-M', 'SET279-LC-M', 'SET288-KR-NP-L', 'SET192-KR-NP-XS', 'SET302-KR-PP-L', 'JNE3621-KR-M', 'NW015-TP-PJ-S', 'J0234-SKD-M', 'SET344-KR-NP-XS', 'J0181-TP-L', 'JNE3459-KR-XXL', 'SET326-KR-PP-M', 'SET257-KR-PP-S', 'SET285-KR-SHA-S', 'SET267-KR-NP-M', 'JNE3787-KR-M', 'NW024-TP-PJ-XXL', 'J0282-SET-XXXL', 'JNE3432-KR-L', 'SAR042', 'J0106-KR-XL', 'SET197-KR-NP-S', 'JNE3730-KR-L', 'JNE3578-KR-S', 'BTM041-PP-XXXL', 'SAR140', 'JNE1975-KR-309-XS', 'JNE3742-KR-L', 'J0334-TP-XXL', 'J0013-SKD-M', 'JNE3556-KR-M', 'JNE3557-KR-M', 'JNE3607-KR-XXXL', 'SET188-KR-NP-L', 'BL006-54BLACK-B', 'J0114-TP-M', 'SET185-KR-NP-XL', 'MEN5014-KR-M', 'JNE1408-GREY-KR-UDF19-S', 'JNE3408-KR-M', 'SET192-KR-NP-XXL', 'SET192-KR-NP-L', 'JNE3557-KR-XL', 'SET250-KR-SHA-L', 'SET277-KR-NP-XL', 'SET271-KR-NP-S', 'JNE3506-KR-M', 'JNE1233-BLUE-KR-031-XL', 'NW030-TP-PJ-XXXL', 'SET380-KR-NP-XXL', 'SET131-KR-NP-L', 'JNE3856-KR-XXL', 'SET323-KR-NP-XL', 'SET196-KR-NP-L', 'JNE3714-KR-XL', 'J0165-TP-XL', 'SET014-KR-PP-A-XXXL', 'JNE3732-KR-XXXL', 'J0215-BL-XL', 'J0207-DR-XXL', 'JNE3391-KR-XL', 'MEN5024-KR-XL', 'SET318-KR-SHA-XXXL', 'SET317-KR-PP-XXXL', 'SET254-KR-NP-S', 'MEN5008-KR-S', 'J0094-KR-S', 'J0414-DR-S', 'NW035-ST-CP-XS', 'JNE3742-KR-S', 'J0122-TP-S', 'JNE3732-KR-S', 'JNE3443-KR-S', 'JNE1234-MULTI-KR-032-S', 'J0307-TP-XXL', 'JNE3666-TP-L', 'JNE3412-KR-XXXL', 'BTM038-PP-S', 'SET280-KR-PP-XXL', 'J0105-KR-XL', 'SET400-KR-NP-M', 'SET075-KR-DH-XS', 'SET277-KR-NP-S', 'SET142-KR-PP-L', 'JNE3421-KR-XL', 'JNE3366-KR-1053-S', 'JNE3669-TU-XXL', 'J0413-DR-XXL', 'JNE3474-KR-E-XL', 'J0208-DR-XXXL', 'J0081-DR-XXXL', 'JNE3775-KR-M', 'BTM039-PP-M', 'J0336-TP-L', 'J0090-TP-L', 'BTM032-NP-XS', 'J0211-DR-L', 'JNE1977-KR-237-XL', 'J0172-TP-XXXL', 'BTM035-NP-XS', 'NW002-TP-PJ-XL', 'JNE1951-KR-155-M', 'SET218-KR-NP-XL', 'SET360-KR-NP-S', 'JNE3788-KR-XXXL', 'SET279-LC-XL', 'JNE3762-KR-XXXL', 'J0023-TP-S', 'JNE3400-KR-L', 'BL104-S', 'J0109-SKD-XXL', 'J0332-DR-XS', 'NW005-ST-PJ-S', 'JNE3501-KR-M', 'SET262-KR-NP-XL', 'JNE3687-TU-L', 'J0324-CD-L', 'BTM039-PP-S', 'JNE3364-KR-1051-A-M', 'JNE3666-TP-XXL', 'JNE3740-KR-M', 'BTM039-PP-XXXL', 'JNE3671-TU-L', 'JNE3531-KR-L', 'NW008-ST-CP-XL', 'JNE3359-KR-L', 'NW001-TP-PJ-S', 'SET087-KR-PP-XL', 'JNE3638-KR-XL', 'SET402-KR-NP-S', 'SET223-KR-NP-XXL', 'J0164-DR-M', 'JNE3783-KR-XL', 'J0285-SKD-XXL', 'JNE3383-KR-A-XXXL', 'JNE1998-KR-311-XS', 'SET158-KR-PP-M', 'NW008-ST-CP-XXL', 'NW005-ST-PJ-XXL', 'JNE3518-KR-XXXL', 'JNE2305-KR-533-XS', 'NW003-TP-PJ-XL', 'BL093-S', 'J0203-TP-XL', 'BL110-S', 'JNE3489-KR-M', 'JNE3622-KR-M', 'SET053-KR-NP-L', 'J0195-TP-XL', 'JNE3294-KR-XS', 'SET315-KR-PP-XXXL', 'JNE3810-KR-XXL', 'JNE3623-KR-L', 'JNE3684-TU-L', 'J0113-TP-L', 'JNE2032-KR-205-M', 'JNE3680-TU-S', 'JNE3476-KR-XS', 'JNE3637-KR-L', 'JNE3732-KR-XXL', 'SET350-KR-NP-S', 'JNE3443-KR-XXXL', 'SET196-KR-NP-XXL', 'BL111-L', 'BL110-L', 'JNE3454-KR-XL', 'J0306-DR-S', 'J0109-SKD-XXXL', 'SET252-KR-PP-XXXL', 'JNE3671-TU-S', 'CH203-MAROON-L', 'SET408-KR-NP-L', 'JNE3466-KR-XXXL', 'J0197-TP-XXL', 'JNE3744-TU-XXL', 'SET198-KR-NP-A-XS', 'MEN5019-KR-S', 'J0396-DR-M', 'JNE3613-KR-XS', 'BL111-S', 'J0134-SET-XXL', 'SET055-KR-NP-L', 'NW039-TP-SR-XL', 'J0196-TP-XL', 'J0070-KR-XXL', 'SET302-KR-PP-XS', 'JNE3785-KR-XL', 'JNE3793-KR-L', 'J0332-DR-XL', 'JNE3655-TP-L', 'JNE3639-TP-N-XS', 'JNE3702-KR-S', 'JNE3792-KR-S', 'SET251-KR-PP-XS', 'JNE3834-KR-XS', 'SET248-KR-NP-L', 'JNE3715-KR-L', 'JNE2265-KR-501-L', 'JNE3470-KR-L', 'JNE3680-TU-M', 'SET155-KR-PP-S', 'JNE3460-KR-M', 'JNE3501-KR-L', 'JNE3412-KR-L', 'JNE3483-KR-L', 'SET340-KR-NP-XXL', 'J0373-KR-XXL', 'SET131-KR-NP-M', 'J0210-DR-M', 'JNE3622-KR-L', 'J0211-DR-XXXL', 'J0176-TP-XXL', 'BTM026-NP-XS', 'J0189-TP-XL', 'MEN5011-KR-S', 'SAR048', 'J0130-SET-XS', 'SET182-KR-DH-XL', 'JNE3756-KR-L', 'NW037-TP-SR-S', 'JNE2170-KR-436-M', 'BTM045-PP-XL', 'J0371-SKD-XXL', 'J0243-DR-L', 'J0254-SKD-L', 'JNE2170-KR-436-XXXL', 'JNE3822-KR-XS', 'JNE3759-KR-S', 'J0240-SKD-L', 'JNE3771-KR-XXXL', 'JNE3782-KR-XS', 'SET199-KR-NP-XXL', 'J0331-KR-XL', 'JNE3400-KR-M', 'J0239-SKD-L', 'JNE3726-KR-M', 'JNE3438-KR-S', 'SET308-KR-PP-M', 'JNE3622-KR-XXL', 'BL026-74BEIGE', 'J0249-SKD-XXL', 'SET253-KR-NP-XS', 'J0075-KR-S', 'SET179-KR-PP-S', 'SET310-KR-NP-XS', 'JNE3270-KR-XS', 'SET209-KR-PP-M', 'J0158-DR-XS', 'J0306-DR-XXXL', 'SET062-KR-SP-XXXL', 'MEN5021-KR-S', 'SET204-KR-DPT-XS', 'JNE3522-KR-S', 'BL113-L', 'J0195-TP-XXL', 'MEN5026-KR-L', 'SET233-KR-PP-S', 'JNE3642-TP-XXL', 'JNE3607-KR-S', 'J0345-SET-XL', 'J0416-DR-M', 'J0023-TP-L', 'J0416-DR-L', 'JNE3428-KR-S', 'SET277-KR-NP-M', 'JNE3740-KR-L', 'J0109-SKD-XL', 'JNE2100-KR-144-L', 'J0134-SET-S', 'SET390-KR-NP-L', 'MEN5002-KR-XXXL', 'J0009-SKD-L', 'JNE3549-KR-M', 'JNE3383-KR-A-M', 'SET384-KR-NP-L', 'J0251-SKD-M', 'JNE3447-KR-S', 'J0088-TP-S', 'J0283-SET-XS', 'J0343-DR-XS', 'J0340-TP-XXL', 'JNE3675-TU-XS', 'JNE3607-KR-XL', 'SET369-KR-NP-XS', 'JNE3630-KR-M', 'JNE3452-KR-XL', 'J0014-LCD-XS', 'JNE3412-KR-M', 'JNE3793-KR-XXXL', 'J0306-DR-XL', 'NW012-TP-PJ-L', 'J0101-DR-L', 'J0213-TP-XS', 'SET285-KR-SHA-M', 'J0144-SET-XXL', 'J0143-SET-A-XS', 'J0208-DR-XL', 'SET075-KR-DH-XXXL', 'JNE3791-DR-XXXL', 'J0214-TP-XL', 'SET342-KR-NP-N-L', 'SET307-KR-DPT-L', 'JNE3542-KR-M', 'J0306-DR-L', 'SET350-KR-NP-M', 'J0189-TP-L', 'JNE3573-KR-S', 'JNE3742-KR-XXL', 'SET183-KR-DH-L', 'SET396-KR-PP-S', 'JNE1977-KR-237-XS', 'JNE3811-KR-M', 'J0197-TP-M', 'J0176-TP-XL', 'JNE3471-KR-M', 'JNE3617-KR-L', 'BL022-71BEIGE', 'SET043-KR-NP-XL', 'JNE3383-KR-A-XS', 'JNE3613-KR-XXXL', 'SET218-KR-NP-XXXL', 'BL099-XS', 'J0220-BL-XXL', 'NW004-TP-PJ-XXL', 'SET351-KR-NP-M', 'J0380-SKD-M', 'JNE3817-KR-L', 'JNE3878-KR-XL', 'JNE3820-KR-S', 'J0119-TP-S', 'JNE3471-KR-S', 'JNE3454-KR-L', 'BL113-XXL', 'J0337-TP-XS', 'J0297-TP-XS', 'JNE3435-KR-S', 'JNE3348-KR-XXL', 'JNE3225-KR-XS', 'J0214-TP-XXXL', 'JNE3577-KR-M', 'JNE3447-KR-XS', 'SET055-KR-NP-M', 'JNE3776-KR-M', 'SET329-KR-NP-XL', 'JNE3704-KR-XXXL', 'JNE3617-KR-XXL', 'JNE3619-KR-XXL', 'JNE3757-KR-L', 'J0370-SKD-S', 'JNE3709-DR-XXL', 'JNE3799-KR-XXXL', 'JNE3566-KR-M', 'J0168-DR-S', 'JNE3503-KR-XXXL', 'SET346-KR-PP-XL', 'JNE3564-KR-M', 'J0082-TP-XL', 'J0348-SET-L', 'J0048-TP-XL', 'JNE1975-KR-309-XXL', 'JNE1234-MULTI-KR-032-XS', 'JNE1975-KR-309-S', 'BL090-S', 'J0252-SKD-XL', 'J0091-TP-XXXL', 'JNE3256-KR-M', 'JNE2266-KR-490-A-XS', 'J0104-KR-XXL', 'JNE3691-TU-XXL', 'MEN5007-KR-XXXL', 'J0152-DR-L', 'SET258-KR-PP-S', 'J0242-SKD-L', 'JNE3765-KR-XS', 'SET250-KR-SHA-XXL', 'JNE3810-KR-L', 'JNE3707-DR-XL', 'BL103-L', 'JNE3482-KR-XXL', 'MEN5018-KR-M', 'J0164-DR-S', 'JNE3559-KR-XXXL', 'JNE3822-KR-S', 'JNE3427-KR-XXL', 'JNE3879-DR-M', 'BTM033-NP-XS', 'JNE3686-TU-M', 'SET271-KR-NP-XXL', 'JNE3429-KR-L', 'SET253-KR-NP-S', 'J0196-TP-M', 'BTM008-XXL', 'JNE2209-KR-498-A-XL', 'JNE3774-KR-XS', 'JNE3571-KR-M', 'J0041-SET-XS', 'J0093-DR-L', 'BTM030-NP-S', 'JNE3311-KR-M', 'SET246-KR-PP-S', 'NW031-TP-PJ-S', 'SET302-KR-PP-XXL', 'J0231-SKD-XXL', 'JNE3816-KR-XL', 'SET401-KR-NP-L', 'JNE3256-KR-S', 'BL004-50CHIKU-B', 'BL101-XS', 'BL102-XS', 'JNE3030-KR-L', 'JNE3629-KR-XL', 'J0247-SKD-XXXL', 'JNE3640-TP-N-XL', 'JNE3252-KR-XL', 'JNE3484-KR-L', 'JNE3712-TP-N-S', 'J0204-TP-XL', 'JNE3369-KR-L', 'JNE1233-BLUE-KR-031-XXXL', 'BL006-54BLACK', 'J0147-SET-XS', 'J0130-SET-M', 'BTM030-NP-XS', 'SET130-KR-NP-XXXL', 'JNE3823-KR-M', 'JNE3758-KR-L', 'JNE3435-KR-M', 'SET014-KR-PP-L', 'J0048-TP-XXL', 'JNE3506-KR-S', 'J0081-DR-L', 'JNE3720-KR-XS', 'JNE3383-KR-A-XL', 'JNE3807-KR-XS', 'JNE3778-KR-L', 'SET083-KR-PP-XXXL', 'JNE3678-TU-M', 'SET252-KR-PP-S', 'JNE3558-KR-S', 'J0005-DR-XXXL', 'JNE1525-KR-UDF19BLACK-XXXL', 'JNE3575-KR-XXL', 'JNE3760-KR-XL', 'J0096-KR-M', 'JNE3428-KR-M', 'JNE3760-KR-L', 'JNE3673-TU-S', 'JNE3633-KR-XXXL', 'JNE3459-KR-XL', 'J0033-KR-XXL', 'SET043-KR-NP-L', 'JNE2171-KR-437-XXL', 'JNE3432-KR-XXL', 'J0304-TP-XS', 'BTM037-PP-XS', 'BTM048-PP-XS', 'J0375-SKD-XXL', 'JNE2032-KR-205-L', 'JNE3431-KR-XXXL', 'JNE3878-KR-XXXL', 'JNE3376-KR-XXXL', 'JNE3425-KR-XXXL', 'J0087-TP-XL', 'JNE3065-KR-XL', 'BTM026-NP-S', 'JNE3270-KR-S', 'SET386-KR-NP-XXXL', 'JNE3673-TU-M', 'JNE3313-KR-A-XXXL', 'SET044-KR-NP-XXL', 'JNE3451-KR-XXXL', 'SET357-KR-NP-XL', 'J0091-TP-XL', 'JNE3403-KR-L', 'JNE2251-KR-537-XS', 'JNE2305-KR-533-S', 'BTM041-PP-S', 'JNE3160-KR-S', 'SET201-KR-NP-A-XS', 'JNE1906-KR-031-M', 'JNE3816-KR-M', 'JNE3539-KR-M', 'JNE3363-KR-1032-M', 'JNE3144-KR-S', 'J0334-TP-XS', 'JNE3466-KR-XS', 'JNE3404-KR-XXXL', 'NW027-TP-PJ-XXL', 'NW015-TP-PJ-XXL', 'JNE3806-KR-XXXL', 'J0369-SKD-XXL', 'JNE3611-KR-XS', 'SET051-KR-NP-XXXL', 'J0072-KR-XL', 'JNE3501-KR-XXXL', 'SET062-KR-SP-M', 'J0001-DR-XXL', 'SET200-KR-NP-A-XXL', 'SET343-KR-NP-L', 'J0185-DR-XS', 'JNE3458-KR-M', 'NW003-TP-PJ-XXL', 'SET277-KR-NP-XS', 'J0070-KR-M', 'JNE3803-KR-XS', 'J0096-KR-L', 'JNE3530-KR-XS', 'MEN5011-KR-XXL', 'J0328-KR-XXXL', 'J0007-SKD-XXL', 'J0310-TP-XS', 'SAR041', 'JNE3562-KR-L', 'JNE3516-KR-E-L', 'JNE3636-KR-L', 'JNE3788-KR-M', 'JNE3413-KR-L', 'JNE3439-KR-XS', 'JNE3371-KR-XS', 'JNE3459-KR-S', 'SET326-KR-PP-XXXL', 'JNE3504-KR-M', 'SET320-KR-NP-S', 'J0331-KR-M', 'J0369-SKD-XL', 'SET221-KR-NP-L', 'JNE3707-DR-M', 'SET247-KR-SHA-XS', 'JNE3528-KR-M', 'JNE3660-TP-N-M', 'JNE3719-KR-L', 'JNE3480-KR-L', 'SET289-KR-NP-XS', 'MEN5007-KR-L', 'SET038-KR-PP-XS', 'JNE3745-KR-M', 'J0134-SET-XS', 'JNE3675-TU-XL', 'JNE3442-KR-XXL', 'JNE3530-KR-S', 'JNE3565-KR-S', 'JNE3270-KR-XXL', 'J0239-SKD-XL', 'JNE3486-KR-XS', 'JNE3640-TP-N-XS', 'SET230-KR-PP-XS', 'SET400-KR-NP-XS', 'SET209-KR-PP-XL', 'SET378-KR-NP-L', 'SET435-KR-NP-M', 'NW035-ST-CP-M', 'JNE3365-KR-1052-A-XXL', 'JNE3760-KR-M', 'J0205-TP-XS', 'CH204-PURPLE-L', 'CH213-BROWN-L', 'MEN5028-KR-M', 'JNE3366-KR-1053-XL', 'SET156-KR-NP-XL', 'JNE3376-KR-XL', 'JNE3471-KR-XS', 'J0213-TP-S', 'SET326-KR-PP-S', 'J0160-TP-XXL', 'JNE3612-KR-M', 'NW012-TP-PJ-M', 'SET048-KR-NP-M', 'JNE2171-KR-437-XXXL', 'J0143-SET-A-XXXL', 'SET087-KR-PP-S', 'JNE3412-KR-XL', 'JNE3655-TP-XL', 'SET276-KR-PP-S', 'JNE3700-KR-XXXL', 'J0011-LCD-XXL', 'JNE2307-KR-572-XXL', 'JNE3454-KR-S', 'BL103-XS', 'J0354-KR-XXL', 'JNE1977-KR-237-L', 'NW008-ST-CP-M', 'J0147-SET-M', 'JNE3160-KR-XXXL', 'JNE2291-KR-602-L', 'NW020-ST-SR-S', 'J0342-TP-XS', 'SET154-KR-NP-XXXL', 'JNE3778-KR-XL', 'JNE3030-KR-XS', 'SET062-KR-SP-S', 'SET321-KR-DPT-S', 'JNE3813-KR-XS', 'JNE3617-KR-XS', 'JNE3819-KR-M', 'J0092-SET-XXXL', 'J0239-SKD-S', 'JNE3452-KR-XS', 'SET306-KR-PP-XXL', 'J0201-TP-XL', 'NW029-ST-SR-S', 'CH202-ORANGE-L', 'J0180-DR-XXL', 'SET293-KR-NP-L', 'SET300-KR-NP-XXXL', 'JNE3522-KR-XS', 'SET230-KR-PP-L', 'JNE3756-KR-XXL', 'JNE3643-TP-N-XL', 'BTM021-B-L', 'BTM002-B-L', 'JNE3562-KR-M', 'JNE3323-KR-A-XS', 'BL101-XXL', 'MEN5006-KR-S', 'JNE3441-KR-S', 'SET058-KR-NP-XXL', 'JNE2132-KR-398-XS', 'JNE3500-KR-M', 'JNE3749-KR-XL', 'NW007-ST-CP-XXL', 'SET403-KR-NP-XL', 'JNE3400-KR-XS', 'JNE3610-KR-XXXL', 'JNE3714-KR-XS', 'JNE3778-KR-XS', 'JNE3581-KR-L', 'JNE3364-KR-1051-A-XS', 'JNE3864-TU-L', 'JNE3726-KR-XXL', 'SET156-KR-NP-L', 'J0106-KR-S', 'JNE3656-TP-N-M', 'JNE3763-KR-XXXL', 'JNE3714-KR-XXL', 'J0025-DR-XXL', 'J0195-TP-XXXL', 'SET132-KR-NP-M', 'J0117-TP-XXXL', 'JNE3614-KR-XXL', 'JNE3549-KR-XXXL', 'JNE2291-KR-602-S', 'J0062-DR-XS', 'J0072-KR-XXXL', 'JNE3348-KR-M', 'JNE3615-KR-XL', 'SET194-KR-NP-XXL', 'J0120-TP-XL', 'JNE3523-KR-XL', 'J0248-KR-DPT-XS', 'SET196-KR-NP-XL', 'J0184-KR-A-L', 'SET004-KR-SP-A-XXXL', 'JNE3255-KR-XS', 'NW005-ST-PJ-XS', 'JNE3554-KR-L', 'SET232-KR-PP-L', 'JNE3395-KR-S', 'NW013-ST-SR-XXL', 'MEN5020-KR-S', 'SET131-KR-NP-A-L', 'SET351-KR-NP-XL', 'JNE3668-TP-N-XL', 'J0298-DR-XS', 'NW022-TP-PJ-XXL', 'SET145-KR-NP-XL', 'J0333-DR-M', 'J0205-TP-S', 'BTM047-PP-XXL', 'J0095-SET-S', 'J0172-TP-XL', 'J0214-TP-M', 'J0143-SET-A-S', 'JNE3416-KR-XXL', 'JNE3833-KR-M', 'JNE3712-TP-N-XS', 'SET401-KR-NP-XXXL', 'SET138-KR-PP-XS', 'J0277-SKD-XS', 'JNE2321-KR-576-L', 'JNE3771-KR-M', 'JNE3273-KR-XL', 'SET219-KR-PP-S', 'J0131-KR-XS', 'JNE3438-KR-XL', 'J0202-TP-XL', 'J0340-TP-XL', 'SET250-KR-SHA-XS', 'JNE3528-KR-XXXL', 'J0238-LCD-XXXL', 'J0087-TP-S', 'J0110-SKD-S', 'JNE1234-MULTI-KR-032-XXL', 'JNE3420-KR-L', 'JNE3474-KR-E-S', 'JNE09186-BLUE-SR-JP7104RMV-K', 'SAR092', 'SAR110', 'JNE3507-KR-XXL', 'NW032-ST-CP-M', 'J0233-SKD-XS', 'JNE3501-KR-XS', 'SET196-KR-NP-XXXL', 'JNE3270-KR-XL', 'JNE1525-KR-UDF19BLACK-M', 'JNE3735-KR-XL', 'JNE2265-KR-501-XXL', 'J0214-TP-L', 'JNE3457-KR-XL', 'NW038-ST-SR-XXL', 'J0376-SKD-XXXL', 'BL036-176GOLD', 'JNE3515-KR-XS', 'SET335-KR-NP-M', 'JNE3881-DR-XL', 'JNE3602-KR-XXL', 'SET230-KR-PP-XXXL', 'JNE3454-KR-XXXL', 'JNE3825-KR-S', 'JNE3887-KR-XXXL', 'SET138-KR-PP-XXXL', 'JNE3816-KR-L', 'J0178-TP-XS', 'SET395-KR-NP-XXXL', 'NW035-ST-CP-S', 'JNE3655-TP-XXL', 'MEN5029-KR-L', 'J0092-SET-XS', 'JNE3524-KR-M', 'SET187-KR-DH-L', 'SET069-KR-NP-XS', 'SET200-KR-NP-A-XL', 'SET350-KR-NP-XXL', 'J0184-KR-XS', 'JNE1525-KR-UDF19-A-M', 'JNE2265-KR-501-M', 'JNE3431-KR-S', 'J0077-SKD-S', 'SET332-KR-PP-M', 'JNE3480-KR-S', 'J0348-SET-XL', 'AN202-ORANGE-XXL', 'J0011-LCD-XS', 'NW012-TP-PJ-XXL', 'J0375-SKD-S', 'J0131-KR-XXL', 'JNE3800-KR-A-L', 'SET193-KR-NP-A-XL', 'MEN5030-KR-XL', 'JNE3436-KR-XS', 'J0112-TP-L', 'J0186-SET-L', 'JNE3451-KR-XL', 'SET147-KR-NP-S', 'JNE3613-KR-M', 'JNE3836-KR-XL', 'JNE3400-KR-XXL', 'JNE3880-DR-L', 'JNE3617-KR-XXXL', 'JNE3767-KR-L', 'SET318-KR-SHA-L', 'BTM002-B-XXXL', 'J0135-SET-XXXL', 'SAR071', 'SET038-KR-PP-L', 'SET403-KR-NP-S', 'NW005-ST-PJ-L', 'SET245-KR-NP-XL', 'JNE3256-KR-L', 'JNE3408-KR-L', 'SET392-KR-NP-S', 'BL073-85BLACK', 'MEN5003-KR-XL', 'JNE3563-KR-S', 'SET062-KR-SP-L', 'SET037-KR-NP-XXXL', 'SET243-KR-PP-S', 'J0201-TP-M', 'SET364-KR-NP-XS', 'JNE3756-KR-M', 'JNE3743-TP-L', 'PJNE2171-KR-N-4XL', 'BTM031-NP-XS', 'J0211-DR-XL', 'JNE3759-KR-XXL', 'NW008-ST-CP-XXXL', 'J0214-TP-XXL', 'JNE3670-TU-S', 'JNE3557-KR-S', 'J0310-TP-M', 'SET240-KR-PP-L', 'SET236-KR-PP-XS', 'JNE1525-KR-UDF19-A-XXL', 'J0093-DR-XS', 'J0129-SET-XS', 'J0205-TP-M', 'J0116-TP-S', 'JNE2170-KR-436-XS', 'SET153-KR-NP-XS', 'JNE3549-KR-S', 'JNE3366-KR-1053-A-L', 'SET014-KR-PP-XXXL', 'J0151-KR-S', 'J0291-JS-XS', 'JNE3674-TU-XL', 'SET286-KR-NP-S', 'SET334-KR-NP-M', 'JNE3758-KR-M', 'JNE3351-KR-XL', 'JNE3719-KR-M', 'J0150-KR-S', 'JNE3659-TP-N-XS', 'SET242-KR-PP-S', 'SET014-KR-PP-XS', 'JNE3574-KR-XXL', 'J0001-DR-XXXL', 'MEN5003-KR-M', 'JNE3489-KR-L', 'BTM003-M', 'JNE3524-KR-L', 'SET044-KR-NP-XXXL', 'JNE3719-KR-S', 'J0090-TP-XXL', 'BTM002-B-XL', 'SET396-KR-PP-XXXL', 'J0164-DR-L', 'J0381-SKD-M', 'JNE3516-KR-E-M', 'SET340-KR-NP-XXXL', 'NW009-ST-CP-L', 'SET243-KR-PP-M', 'J0096-KR-XXXL', 'JNE3896-KR-XXXL', 'JNE3825-KR-XS', 'SET239-KR-NP-XS', 'JNE3760-KR-XXXL', 'J0297-TP-L', 'JNE3431-KR-L', 'JNE3700-KR-L', 'J0370-SKD-XS', 'NW036-ST-SR-M', 'SET321-KR-DPT-XL', 'J0381-SKD-XS', 'JNE3806-KR-XS', 'J0351-SET-XS', 'SET249-KR-NP-XL', 'JNE3065-KR-S', 'SET221-KR-NP-XXXL', 'SET357-KR-NP-S', 'JNE3708-TU-XXXL', 'SET073-KR-SHA-XXXL', 'JNE3730-KR-M', 'J0210-DR-XXL', 'SET267-KR-NP-S', 'NW002-TP-PJ-S', 'NW012-TP-PJ-XS', 'MEN5029-KR-S', 'J0334-TP-XXXL', 'SET322-KR-SHA-XS', 'JNE3473-KR-XS', 'SET072-KR-SHA-S', 'JNE3253-KR-M', 'JNE3365-KR-1052-A-XL', 'JNE3531-KR-XXXL', 'J0181-TP-S', 'SET038-KR-PP-XXL', 'JNE3225-KR-XXXL', 'JNE2009-KR-310-XL', 'SET240-KR-PP-XXXL', 'J0212-DR-XXL', 'BL098-XS', 'J0019-SET-S', 'J0205-TP-XL', 'SET228-KR-PP-A-S', 'MEN5018-KR-S', 'JNE0722-K', 'J0087-TP-XXL', 'SET156-KR-NP-M', 'MEN5026-KR-S', 'SET204-KR-DPT-XXL', 'SET111-KR-SP-XXL', 'JNE3766-KR-XXXL', 'J0015-DR-S', 'NW006-ST-SR-S', 'J0053-KR-XS', 'JNE3407-KR-XXL', 'JNE3751-KR-M', 'JNE3544-KR-M', 'J0376-SKD-XL', 'JNE3879-DR-XL', 'JNE3404-KR-S', 'SET297-KR-NP-XXL', 'JNE3782-KR-L', 'SET339-KR-NP-M', 'JNE3866-KR-L', 'JNE3866-KR-XL', 'J0228-SKD-XXL', 'JNE3394-KR-XXL', 'SET229-KR-PP-XS', 'JNE3489-KR-XL', 'J0297-TP-M', 'SET339-KR-NP-XL', 'J0049-TP-XXL', 'JNE3452-KR-XXL', 'J0131-KR-L', 'JNE3612-KR-XXXL', 'J0378-SKD-XL', 'SET378-KR-NP-M', 'J0347-SET-XXL', 'BL025-74BLACK-B', 'SET143-KR-PP-M', 'JNE3810-KR-XXXL', 'SET271-KR-NP-XS', 'JNE3313-KR-S', 'JNE2291-KR-602-XS', 'J0187-KR-S', 'SET404-KR-NP-XS', 'JNE3894-TP-XL', 'JNE3806-KR-XL', 'SET305-KR-DPT-S', 'JNE3501-KR-S', 'J0251-SKD-S', 'J0247-SKD-M', 'JNE3531-KR-XS', 'JNE3818-KR-XS', 'JNE3783-KR-XXL', 'JNE3438-KR-XXL', 'JNE3674-TU-M', 'JNE3673-TU-XXXL', 'BTM031-NP-XXL', 'SET132-KR-NP-XL', 'J0297-TP-XL', 'BTM029-NP-XXXL', 'J0248-KR-DPT-XXL', 'JNE3776-KR-XXXL', 'NW037-TP-SR-XL', 'J0291-JS-XL', 'SET193-KR-NP-A-S', 'JNE3838-KR-XS', 'SET221-KR-NP-S', 'SET196-KR-NP-S', 'JNE3576-KR-XL', 'SET193-KR-NP-A-XXL', 'J0079-SKD-L', 'J0083-KR-XXL', 'SET205-KR-DPT-A-XS', 'J0377-SKD-S', 'JNE3565-KR-XXL', 'J0002-SKD-XS', 'BL090-M', 'JNE3658-TP-XXL', 'BL021-71BLACK-B', 'SET172-KR-PP-B-S', 'MEN5016-KR-M', 'JNE3717-KR-XXL', 'JNE3265-KR-S', 'JNE3334-KR-S', 'NW003-TP-PJ-S', 'SET353-KR-NP-S', 'J0283-SET-S', 'NW003-TP-PJ-XS', 'JNE3601-KR-XL', 'JNE3800-KR-A-M', 'JNE3425-KR-XXL', 'JNE3756-KR-XXXL', 'JNE3323-KR-A-L', 'J0179-KR-XS', 'JNE3376-KR-XS', 'JNE3726-KR-XS', 'JNE3369-KR-XS', 'JNE3434-KR-S', 'J0297-TP-XXL', 'SAR166', 'J0132-KR-L', 'CH205-YELLOW-S', 'JNE3740-KR-XS', 'JNE3487-KR-S', 'JNE3786-KR-XS', 'SET244-KR-NP-XXL', 'SET303-KR-NP-L', 'JNE3879-DR-XS', 'SET388-KR-NP-XXL', 'JNE3760-KR-XXL', 'SET326-KR-PP-L', 'MEN5031-KR-XL', 'MEN5021-KR-XXXL', 'JNE3743-TP-XL', 'JNE3670-TU-L', 'JNE3606-KR-M', 'SET131-KR-NP-A-M', 'JNE3383-KR-A-S', 'JNE3691-TU-XXXL', 'JNE3473-KR-L', 'JNE3457-KR-M', 'JNE3837-KR-XXL', 'JNE3687-TU-XXL', 'JNE3802-KR-XXL', 'BTM044-PP-XS', 'BTM040-PP-XS', 'BTM043-PP-XS', 'SET289-KR-NP-L', 'JNE3422-KR-M', 'J0089-TP-XS', 'J0087-TP-XS', 'JNE3707-DR-L', 'JNE3649-TP-N-XS', 'SET281-KR-PP-S', 'J0230-SKD-XXXL', 'MEN5006-KR-M', 'J0110-SKD-XL', 'J0332-DR-L', 'SET318-KR-SHA-XL', 'JNE3565-KR-L', 'JNE3225-KR-XL', 'JNE3441-KR-L', 'JNE3467-KR-XXXL', 'JNE3458-KR-XXXL', 'JNE3400-KR-XXXL', 'JNE3402-KR-L', 'SET308-KR-PP-S', 'BL090-XXL', 'J0249-SKD-XXXL', 'J0400-DR-XXL', 'JNE1525-KR-UDF19BLACK-XS', 'JNE3431-KR-M', 'JNE3467-KR-M', 'SET053-KR-NP-XXXL', 'JNE3753-KR-L', 'NW006-ST-SR-L', 'SET357-KR-NP-XS', 'NW038-TP-SR-L', 'SET171-KR-NP-XXL', 'JNE3613-KR-S', 'JNE3491-KR-XS', 'J0284-SKD-M', 'SET218-KR-NP-S', 'JNE3571-KR-XXL', 'JNE3838-KR-S', 'J0083-KR-S', 'J0247-SKD-XXL', 'SET158-KR-PP-XXL', 'SET281-KR-PP-M', 'SET289-KR-NP-M', 'JNE3270-KR-XXXL', 'JNE3655-TP-XS', 'JNE3396-KR-M', 'J0249-SKD-S', 'J0306-DR-XS', 'JNE3894-TP-XXXL', 'BL003-50BLACK-B', 'JNE3528-KR-XS', 'SET318-KR-SHA-S', 'JNE3738-KR-L', 'J0140-SET-XL', 'J0305-DR-S', 'BL074-85RED', 'J0184-KR-S', 'JNE3733-KR-M', 'BL029-78BLACK-B', 'J0397-DR-L', 'J0243-DR-XXL', 'J0188-KR-XS', 'SAR062', 'NW022-TP-PJ-L', 'J0413-DR-M', 'BTM042-PP-XXXL', 'J0135-SET-XL', 'J0153-DR-XL', 'J0232-SKD-L', 'SET273-KR-NP-L', 'SET144-KR-NP-L', 'CH208-MUSTARD-L', 'JNE3042-KR-XXL', 'JNE3694-KR-S', 'SET226-KR-PP-XXL', 'J0036-TP-XS', 'J0397-DR-XXXL', 'SET172-KR-PP-B-XL', 'SET333-KR-DPT-XXXL', 'SET094-KR-NP-L', 'J0175-KR-XXXL', 'SET276-KR-PP-XL', 'J0251-SKD-XL', 'MEN5013-KR-XXL', 'SET316-KR-DPT-XXL', 'J0400-DR-L', 'SET350-KR-NP-XS', 'SET369-KR-NP-S', 'J0083-KR-XXXL', 'JNE3566-KR-L', 'NW039-TP-SR-XXXL', 'NW035-ST-CP-XXL', 'JNE3398-KR-S', 'SET144-KR-NP-XL', 'JNE3751-KR-L', 'NW027-TP-PJ-M', 'JNE3501-KR-XL', 'SET238-KR-PP-M', 'JNE3535-KR-XXXL', 'JNE3452-KR-M', 'JNE3555-KR-XL', 'JNE1525-KR-UDF19-A-XXXL', 'SET073-KR-SHA-XS', 'J0020-SET-XXXL', 'JNE3864-TU-XXXL', 'JNE3602-KR-XL', 'JNE3819-KR-XXL', 'J0120-TP-XXXL', 'J0111-TP-XXL', 'JNE3727-KR-XL', 'J0352-KR-M', 'JNE3506-KR-XL', 'J0220-BL-S', 'JNE3436-KR-S', 'BL029-78BLACK', 'MEN5026-KR-XXL', 'JNE3614-KR-S', 'J0340-TP-XXXL', 'JNE3833-KR-XXL', 'SET409-KR-NP-M', 'MEN5005-KR-L', 'J0126-SKD-XS', 'JNE3619-KR-M', 'JNE3256-KR-XS', 'JNE3623-KR-XS', 'JNE3366-KR-1053-XS', 'SET244-KR-NP-L', 'JNE3766-KR-XL', 'J0291-JS-M', 'SET364-KR-NP-XL', 'JNE3422-KR-L', 'SET144-KR-NP-S', 'SET306-KR-PP-L', 'JNE3562-KR-S', 'J0094-KR-XS', 'JNE3323-KR-A-XL', 'J0140-SET-S', 'SET116-KR-NP-S', 'JNE3445-KR-S', 'J0172-TP-M', 'J0102-SKD-XXL', 'JNE3700-KR-S', 'SET044-KR-NP-S', 'JNE2251-KR-537-XL', 'SET392-KR-NP-XL', 'JNE1408-GREY-KR-UDF19-XL', 'J0149-KR-S', 'J0300-TP-XXL', 'JNE3778-KR-M', 'JNE3573-KR-XXL', 'J0244-SKD-XS', 'J0118-TP-XS', 'JNE3863-TU-XS', 'J0159-DR-XXXL', 'SET239-KR-NP-S', 'SET346-KR-PP-XS', 'SET263-KR-NP-XS', 'SET402-KR-NP-XS', 'J0380-SKD-S', 'JNE3813-KR-XXXL', 'SET285-KR-SHA-XL', 'SET055-KR-NP-XXL', 'JNE3774-KR-M', 'BTM002-L', 'JNE3556-KR-S', 'J0224-SKD-XXL', 'J0204-TP-XS', 'JNE3427-KR-XL', 'BTM030-NP-XXXL', 'J0248-KR-DPT-S', 'CH209-BIEGE-XL', 'JNE3834-KR-S', 'J0209-DR-XL', 'SET034-KR-NP-XL', 'JNE3860-DR-XXL', 'JNE3407-KR-XS', 'SET323-KR-NP-XS', 'BL060-75RED', 'JNE3782-KR-M', 'JNE3608-KR-XL', 'J0077-SKD-XXL', 'JNE1977-KR-237-XXXL', 'J0103-SKD-XXXL', 'J0400-DR-S', 'J0112-TP-XXXL', 'JNE3550-KR-S', 'JNE3725-KR-S', 'SET338-KR-NP-L', 'J0307-TP-XL', 'MEN5028-KR-S', 'SET274-KR-PP-M', 'SET205-KR-DPT-A-M', 'SET144-KR-NP-M', 'SET228-KR-PP-A-L', 'JNE3447-KR-L', 'J0163-SKD-XS', 'BTM045-PP-XXXL', 'JNE3789-KR-M', 'J0290-CD-XXL', 'NW033-ST-CP-XXL', 'JNE3787-KR-XL', 'JNE3637-KR-XXL', 'JNE3574-KR-XS', 'JNE3622-KR-S', 'NW028-TP-PJ-XL', 'JNE3466-KR-L', 'SET250-KR-SHA-S', 'JNE3630-KR-L', 'JNE3704-KR-XXL', 'JNE3311-KR-L', 'JNE3339-KR-XS', 'JNE3451-KR-M', 'JNE3555-KR-M', 'SET062-KR-SP-XL', 'NW002-TP-PJ-XS', 'SET332-KR-PP-XXL', 'JNE3394-KR-L', 'SET340-KR-NP-XL', 'JNE3407-KR-M', 'JNE3654-TP-XXL', 'JNE3524-KR-S', 'SET158-KR-PP-S', 'J0070-KR-XS', 'NW004-TP-PJ-L', 'SET220-KR-PP-XS', 'JNE3730-KR-S', 'SET227-KR-PP-A-S', 'SET116-KR-NP-M', 'JNE3803-KR-XL', 'JNE0850-N', 'JNE09209-MULTI-SR-JP8101RMV', 'SAR163', 'SAR165', 'SAR181', 'SAR136', 'SAR112', 'JNE09186-BLUE-SR-JP7104RMV', 'SAR091', 'SAR098', 'SAR100', 'JNE3713-TP-N-S', 'SET014-KR-PP-A-L', 'NW022-TP-PJ-M', 'SET225-KR-NP-XXXL', 'SET135-KR-PP-XS', 'JNE3662-TP-XXL', 'BL087-M', 'SET135-KR-PP-XXXL', 'J0049-TP-S', 'SET340-KR-NP-L', 'JNE3487-KR-XS', 'JNE3348-KR-S', 'SET131-KR-NP-XXXL', 'JNE3608-KR-XXL', 'JNE3741-KR-XL', 'SET306-KR-PP-M', 'J0305-DR-M', 'BTM005-L', 'JNE3803-KR-L', 'JNE3665-TP-XL', 'JNE3707-DR-XS', 'JNE3728-KR-XXL', 'SET361-KR-NP-M', 'J0181-TP-XXL', 'JNE3769-KR-M', 'J0380-SKD-L', 'JNE3477-KR-S', 'J0231-SKD-L', 'J0207-DR-XXXL', 'BTM042-PP-XS', 'BTM047-PP-XS', 'JNE3534-KR-S', 'J0299-KR-L', 'JNE3542-KR-XS', 'JNE3524-KR-XXL', 'JNE2266-KR-490-A-M', 'JNE3491-KR-XXL', 'JNE3787-KR-L', 'SET266-KR-NP-XL', 'JNE3408-KR-S', 'J0131-KR-S', 'SET325-KR-NP-XL', 'J0132-KR-XXXL', 'J0043-SET-XL', 'JNE1951-KR-155-XXXL', 'JNE3543-KR-L', 'JNE3756-KR-S', 'SET038-KR-PP-XL', 'JNE3394-KR-A-M', 'SET270-KR-PP-XL', 'SET404-KR-NP-M', 'JNE2132-KR-398-XXL', 'JNE3576-KR-M', 'JNE1408-KR-UDF19-A-S', 'JNE1408-KR-UDF19-A-M', 'JNE3701-KR-XS', 'SET130-KR-NP-L', 'JNE3364-KR-1051-XXL', 'NW001-TP-PJ-M', 'SET267-KR-NP-XS', 'JNE1906-KR-031-S', 'J0213-TP-XXXL', 'J0395-DR-XL', 'JNE3491-KR-L', 'JNE3668-TP-N-L', 'JNE3454-KR-M', 'AN208-MUSTARD-S', 'J0027-SET-XXL', 'JNE3796-KR-XXL', 'J0243-DR-XS', 'NW037-TP-SR-M', 'SET401-KR-NP-S', 'SET038-KR-PP-XXXL', 'JNE3623-KR-M', 'JNE3491-KR-M', 'J0352-KR-L', 'BL007-61PINK-B', 'JNE3412-KR-S', 'J0190-TP-S', 'SET100-KR-PP-XXL', 'JNE3813-KR-XL', 'JNE3434-KR-M', 'SET390-KR-NP-M', 'J0185-DR-XXL', 'JNE3603-KR-M', 'J0007-SKD-XS', 'JNE2049-KR-351-XXL', 'J0159-DR-XXL', 'JNE3647-TP-N-XS', 'JNE3770-KR-L', 'JNE2199-KR-411-A-S', 'JNE3160-KR-XS', 'SET154-KR-NP-XS', 'SET187-KR-DH-S', 'SET330-KR-PP-XS', 'JNE2251-KR-537-XXL', 'JNE3458-KR-XXL', 'J0077-SKD-L', 'SET266-KR-NP-XXL', 'SET204-KR-DPT-XL', 'JNE3611-KR-M', 'JNE3643-TP-N-L', 'MEN5030-KR-XXXL', 'J0292-TP-XL', 'JNE3636-KR-XXL', 'J0117-TP-XL', 'JNE3778-KR-S', 'JNE3904-DR-XXL', 'SET303-KR-NP-S', 'SET185-KR-NP-M', 'SET249-KR-NP-XXXL', 'JNE3481-KR-S', 'J0379-SKD-XXL', 'J0381-SKD-S', 'J0243-DR-XXXL', 'J0219-BL-XXL', 'J0170-TP-A-XL', 'SET388-KR-NP-XS', 'BL055-164GOLD-A', 'BL041-65RED-A', 'NW003-TP-PJ-M', 'SET252-KR-PP-L', 'SET318-KR-SHA-M', 'JNE3518-KR-S', 'NW008-ST-CP-L', 'JNE3610-KR-S', 'SET158-KR-PP-XS', 'J0165-TP-M', 'SET130-KR-NP-XXL', 'J0171-DR-M', 'JNE3693-KR-M', 'SET048-KR-NP-XS', 'JNE3366-KR-1053-A-XXL', 'JNE3446-KR-XS', 'JNE3160-KR-L', 'SET257-KR-PP-XXXL', 'JNE3225-KR-L', 'JNE3665-TP-XS', 'SET252-KR-PP-XS', 'SET248-KR-NP-XXXL', 'J0329-KR-M', 'SET253-KR-NP-M', 'SET053-KR-NP-M', 'SET390-KR-NP-XXL', 'SET433-KR-NP-XS', 'SET128-KR-DH-XXXL', 'JNE3621-KR-L', 'JNE3605-KR-L', 'SET187-KR-DH-XXXL', 'JNE3744-TU-XS', 'JNE1525-KR-UDF19BLACK-XL', 'SET313-KR-NP-XXL', 'J0379-SKD-L', 'JNE3672-TU-XXXL', 'JNE3404-KR-XS', 'JNE3621-KR-S', 'JNE3364-KR-1051-A-S', 'SET154-KR-NP-M', 'JNE3758-KR-XL', 'JNE3476-KR-XXL', 'SET193-KR-NP-A-XS', 'J0154-DR-S', 'JNE3693-KR-S', 'JNE2266-KR-490-A-L', 'JNE2049-KR-351-XS', 'SET383-KR-NP-XS', 'NW033-ST-CP-M', 'J0078-SET-S', 'J0161-DR-XL', 'BL017-63BLACK-B', 'JNE1408-KR-UDF19-A-XXXL', 'J0083-KR-XL', 'SET349-KR-NP-L', 'JNE3391-KR-XS', 'JNE1525-KR-UDF19BLACK-L', 'JNE3657-TP-XS', 'JNE3386-KR-XS', 'SAR108', 'NW016-ST-SR-L', 'J0228-SKD-XXXL', 'JNE2101-KR-210-XL', 'MEN5012-KR-XL', 'JNE1233-BLUE-KR-031-S', 'J0378-SKD-S', 'JNE3643-TP-N-XXL', 'JNE3856-KR-XS', 'J0089-TP-XXXL', 'JNE3819-KR-XXXL', 'JNE3160-KR-G-XS', 'JNE3607-KR-L', 'J0152-DR-S', 'SET179-KR-PP-XS', 'NW036-ST-SR-XXXL', 'J0090-TP-XS', 'JNE1906-KR-031-XS', 'J0345-SET-XXL', 'JNE3610-KR-XS', 'SET188-KR-NP-M', 'JNE2100-KR-144-XS', 'BL056-185GOLD', 'JNE1233-BLUE-KR-031-M', 'SET250-KR-SHA-M', 'SET165-KR-PP-XXXL', 'JNE3796-KR-XXXL', 'JNE3822-KR-XXXL', 'JNE3470-KR-M', 'JNE3653-TP-N-XL', 'JNE2270-KR-487-A-XS', 'JNE2199-KR-411-A-XS', 'SET043-KR-NP-M', 'SET264-KR-NP-XS', 'JNE3623-KR-XXXL', 'SET355-KR-PP-XXXL', 'JNE3684-TU-XS', 'JNE3624-KR-L', 'J0176-TP-L', 'JNE3313-KR-XL', 'J0278-SET-XXL', 'J0178-TP-XL', 'JNE3566-KR-XXL', 'NW014-ST-SR-XXXL', 'JNE3758-KR-XXXL', 'JNE2170-KR-436-XXL', 'J0154-DR-XXXL', 'J0310-TP-S', 'JNE3768-KR-XXL', 'JNE3709-DR-XS', 'JNE3610-KR-XL', 'SET252-KR-PP-XL', 'SET277-KR-NP-XXXL', 'JNE3438-KR-L', 'SET413-KR-NP-XS', 'SET073-KR-SHA-XXL', 'J0224-SKD-XS', 'SET258-KR-PP-M', 'SET248-KR-NP-XL', 'JNE3887-KR-L', 'JNE2302-KR-595-G-M', 'JNE3628-KR-L', 'JNE3700-KR-XS', 'J0134-SET-M', 'JNE3797-KR-A-XXL', 'JNE3797-KR-A-XL', 'JNE3834-KR-L', 'JNE3482-KR-XS', 'J0330-KR-XS', 'J0282-SET-S', 'JNE3605-KR-XS', 'BTM048-PP-M', 'J0011-LCD-XXXL', 'JNE3763-KR-XXL', 'JNE3256-KR-XL', 'J0330-KR-XXL', 'JNE1906-KR-031-XL', 'NW033-ST-CP-S', 'JNE3881-DR-XXL', 'J0310-TP-L', 'SET318-KR-SHA-XS', 'SET369-KR-NP-L', 'J0291-JS-XXXL', 'BL087-XXL', 'JNE3255-KR-L', 'JNE3563-KR-XL', 'J0399-DR-S', 'JNE3365-KR-1052-M', 'JNE3627-KR-M', 'J0022-KR-XS', 'JNE3732-KR-XS', 'JNE3732-KR-M', 'JNE3253-KR-XL', 'JNE3451-KR-S', 'SET394-KR-NP-L', 'J0137-SET-S', 'JNE3608-KR-M', 'JNE3375-KR-S', 'SET198-KR-NP-A-XXL', 'J0127-SKD-XXXL', 'NW020-ST-SR-XS', 'JNE3435-KR-L', 'JNE3642-TP-XL', 'SET195-KR-NP-A-XS', 'SET087-KR-PP-XXXL', 'J0228-SKD-XS', 'JNE3421-KR-S', 'J0009-SKD-XS', 'SET246-KR-PP-L', 'J0252-SKD-XXXL', 'JNE1233-BLUE-KR-031-XS', 'JNE3401-KR-XL', 'SET172-KR-PP-B-XS', 'J0001-DR-S', 'J0103-SKD-S', 'J0089-TP-S', 'J0212-DR-S', 'JNE2153-KR-278-A-XXXL', 'JNE3736-KR-XXXL', 'SET116-KR-NP-XXXL', 'JNE3753-KR-XXXL', 'JNE3726-KR-XXXL', 'SET055-KR-NP-XL', 'JNE3709-DR-XL', 'JNE3751-KR-S', 'JNE3879-DR-XXL', 'JNE2205-KR-467-A-XL', 'JNE3548-KR-XXXL', 'JNE3676-TU-XXXL', 'SET244-KR-NP-XXXL', 'JNE3865-TP-M', 'J0377-SKD-XXL', 'J0088-TP-XXL', 'J0300-TP-XL', 'J0379-SKD-M', 'SET392-KR-NP-L', 'J0004-SKD-S', 'JNE3389-KR-A-XXXL', 'SET130-KR-NP-S', 'JNE3483-KR-XXXL', 'SET210-KR-PP-XXXL', 'BL100-M', 'SET394-KR-NP-XS', 'J0237-SKD-XXL', 'JNE3364-KR-1051-XL', 'JNE3567-KR-XXXL', 'BL020-71RED-B', 'J0142-KR-M', 'JNE3750-KR-L', 'JNE3431-KR-XL', 'SET131-KR-NP-XS', 'J0010-LCD-XXL', 'SET245-KR-NP-M', 'BL008-61RED-B', 'SET188-KR-NP-S', 'J0145-SET-XXL', 'SET302-KR-PP-S', 'JNE2270-KR-487-A-S', 'BTM040-PP-XXL', 'J0203-TP-L', 'J0396-DR-S', 'J0166-DR-XL', 'JNE3817-KR-M', 'JNE2170-KR-436-XL', 'JNE2265-KR-501-XS', 'SET138-KR-PP-L', 'JNE3408-KR-XS', 'PJ0096-KR-N-4XL', 'SET249-KR-NP-XS', 'J0105-KR-XS', 'JNE3770-KR-S', 'SET225-KR-NP-M', 'J0290-CD-L', 'JNE3790-KR-M', 'SET321-KR-DPT-XXXL', 'J0308-DR-XS', 'SET203-KR-DPT-XXL', 'J0237-SKD-M', 'JNE3678-TU-XL', 'MEN5001-KR-XXXL', 'JNE3860-DR-XXXL', 'J0328-KR-XL', 'JNE3610-KR-L', 'J0232-SKD-XS', 'JNE3762-KR-XXL', 'J0184-KR-XXXL', 'J0400-DR-XXXL', 'JNE3687-TU-XS', 'SET055-KR-NP-XS', 'JNE3890-TP-XXL', 'JNE3602-KR-M', 'JNE3813-KR-M', 'BTM036-PP-M', 'SET247-KR-SHA-S', 'JNE3797-KR-A-M', 'J0209-DR-S', 'JNE3838-KR-M', 'J0133-KR-A-XL', 'JNE3311-KR-XXL', 'JNE3528-KR-L', 'JNE1234-MULTI-KR-032-XXXL', 'J0333-DR-S', 'JNE3743-TP-XXL', 'JNE3501-KR-XXL', 'JNE3620-KR-XXXL', 'SET241-KR-PP-XS', 'JNE3535-KR-L', 'J0134-SET-L', 'SET330-KR-PP-XL', 'J0398-DR-S', 'J0140-SET-XXL', 'JNE3658-TP-XS', 'JNE3733-KR-XL', 'SET250-KR-SHA-XL', 'JNE3555-KR-S', 'J0379-SKD-XXXL', 'MEN5012-KR-M', 'JNE3744-TU-L', 'JNE3894-TP-S', 'J0042-DR-L', 'JNE3779-KR-M', 'J0159-DR-S', 'JNE3273-KR-L', 'JNE3252-KR-M', 'J0195-TP-L', 'J0399-DR-XL', 'JNE3821-KR-S', 'SET346-KR-PP-L', 'JNE3578-KR-XL', 'J0175-KR-XL', 'JNE3672-TU-XL', 'SET308-KR-PP-XXL', 'JNE3880-DR-XL', 'SET338-KR-NP-M', 'SET330-KR-PP-L', 'J0094-KR-XXXL', 'J0159-DR-L', 'JNE3445-KR-M', 'J0252-SKD-M', 'J0249-SKD-XS', 'JNE3348-KR-XXXL', 'J0126-SKD-S', 'JNE3676-TU-S', 'JNE3279-KR-A-S', 'SET353-KR-NP-XXXL', 'MEN5026-KR-XXXL', 'J0038-DR-XS', 'JNE3571-KR-S', 'SET156-KR-NP-XS', 'J0078-SET-XXL', 'J0078-SET-M', 'JNE3708-TU-L', 'SET257-KR-PP-XXL', 'J0123-TP-XS', 'J0085-TP-M', 'NW035-ST-CP-L', 'SET248-KR-NP-XS', 'SET165-KR-PP-XL', 'NW028-TP-PJ-M', 'SET043-KR-NP-XXL', 'SET048-KR-NP-XXL', 'JNE3760-KR-S', 'JNE3396-KR-XS', 'JNE3472-KR-XS', 'SET376-KR-NP-XXL', 'SET221-KR-NP-XXL', 'JNE3311-KR-XL', 'JNE3689-TU-XL', 'SET300-KR-NP-XL', 'J0208-DR-M', 'MEN5016-KR-S', 'J0093-DR-S', 'MEN5031-KR-M', 'JNE3736-KR-M', 'J0087-TP-XXXL', 'SET147-KR-NP-XXXL', 'JNE3658-TP-XL', 'J0105-KR-XXL', 'SET165-KR-PP-L', 'J0395-DR-S', 'JNE3704-KR-XL', 'J0042-DR-S', 'J0337-TP-XXXL', 'J0205-TP-L', 'SET004-KR-SP-XXXL', 'J0076-SET-S', 'J0020-SET-XXL', 'BTM040-PP-XXXL', 'J0186-SET-XL', 'JNE3581-KR-XXL', 'J0281-SKD-L', 'JNE3823-KR-XXL', 'JNE3563-KR-M', 'SET409-KR-NP-L', 'J0087-TP-L', 'J0007-SKD-XXXL', 'SET144-KR-NP-XXL', 'JNE3473-KR-XXL', 'MEN5030-KR-XXL', 'J0010-LCD-XL', 'J0194-DR-XXL', 'JNE3783-KR-S', 'SET365-KR-NP-XXXL', 'BL113-M', 'J0207-DR-XS', 'J0292-TP-S', 'NW009-ST-CP-S', 'BTM043-PP-S', 'JNE3458-KR-S', 'JNE3506-KR-XXXL', 'J0251-SKD-L', 'JNE3819-KR-XL', 'JNE3542-KR-XL', 'BL107-S', 'JNE3579-KR-XL', 'SET320-KR-NP-XL', 'J0130-SET-L', 'JNE3700-KR-XXL', 'SET361-KR-NP-L', 'JNE3792-KR-XXXL', 'SET433-KR-NP-XXXL', 'JNE3715-KR-XXXL', 'JNE3435-KR-XXL', 'J0298-DR-S', 'J0220-BL-L', 'JNE3426-KR-XS', 'JNE2009-KR-310-XXL', 'SET369-KR-NP-M', 'SET305-KR-DPT-L', 'SET121-KR-NP-XXXL', 'BTM033-NP-XXXL', 'SET004-KR-SP-XL', 'NW032-ST-CP-XXXL', 'SET330-KR-PP-XXL', 'J0027-SET-XS', 'JNE3811-KR-XXXL', 'SET132-KR-NP-XXXL', 'J0153-DR-XXL', 'SET186-KR-DH-XXXL', 'J0140-SET-M', 'NW014-ST-SR-XL', 'JNE3452-KR-XXXL', 'JNE3780-KR-XXXL', 'JNE3656-TP-N-XXL', 'JNE3559-KR-XS', 'J0199-SET-XXL', 'SET327-KR-DPT-XXL', 'J0126-SKD-M', 'J0040-SET-XXXL', 'JNE3701-KR-L', 'JNE3816-KR-S', 'SET266-KR-NP-XS', 'JNE3778-KR-XXXL', 'JNE3616-KR-L', 'JNE3803-KR-XXL', 'JNE3834-KR-XL', 'J0239-SKD-M', 'J0375-SKD-XXXL', 'J0130-SET-XL', 'JNE3528-KR-XL', 'J0025-DR-XL', 'JNE3770-KR-XXXL', 'J0121-TP-L', 'PJ0096-KR-N-6XL', 'J0203-TP-S', 'SET365-KR-NP-XL', 'J0100-DR-XXXL', 'SET321-KR-DPT-M', 'JNE3225-KR-XXL', 'J0380-SKD-XL', 'BL086-XXL', 'J0139-KR-M', 'JNE3821-KR-XL', 'BL086-XL', 'J0379-SKD-XL', 'J0149-KR-XS', 'SET075-KR-DH-XXL', 'SET139-KR-PP-S', 'MEN5018-KR-XXL', 'JNE3475-KR-K-XS', 'J0329-KR-XL', 'J0237-SKD-XL', 'SET085-KR-PT-S', 'SET192-KR-NP-S', 'SET203-KR-DPT-XS', 'JNE3480-KR-XS', 'J0171-DR-L', 'J0145-SET-XS', 'J0101-DR-XXL', 'SET308-KR-PP-L', 'JNE3472-KR-S', 'JNE3817-KR-XL', 'JNE3680-TU-XS', 'JNE3792-KR-XXL', 'BTM043-PP-XXL', 'JNE3656-TP-N-S', 'J0150-KR-L', 'J0033-KR-L', 'JNE3797-KR-A-L', 'SET078-KR-NP-XS', 'JNE3717-KR-M', 'JNE3860-DR-M', 'JNE3688-TU-M', 'NW029-ST-SR-L', 'J0001-DR-M', 'JNE2266-KR-490-A-XXL', 'BL096-S', 'J0281-SKD-M', 'JNE3667-TP-XL', 'JNE3774-KR-XL', 'BTM039-PP-XXL', 'SET205-KR-DPT-A-XXL', 'JNE3389-KR-A-M', 'JNE3786-KR-L', 'SET332-KR-PP-XXXL', 'SAR024', 'J0370-SKD-XL', 'BL109-XXL', 'JNE3768-KR-M', 'JNE3425-KR-S', 'J0120-TP-S', 'JNE3389-KR-A-L', 'JNE3667-TP-XXL', 'JNE3578-KR-XXL', 'JNE3470-KR-XL', 'JNE3895-TP-XXL', 'JNE3443-KR-L', 'J0211-DR-XS', 'JNE3733-KR-XXL', 'SET024-KR-SP-A-M', 'JNE2113-KR-381-M', 'J0073-KR-XXXL', 'JNE3676-TU-XL', 'JNE3578-KR-L', 'J0195-TP-M', 'MEN5003-KR-S', 'JNE3821-KR-M', 'J0305-DR-XXL', 'J0395-DR-XXL', 'J0369-SKD-XXXL', 'SET141-KR-NP-S', 'JNE3648-TP-N-S', 'AN213-BROWN-S', 'JNE3753-KR-M', 'JNE3797-KR-A-XS', 'J0164-DR-XXXL', 'J0300-TP-L', 'SET206-KR-PP-S', 'JNE3684-TU-S', 'J0332-DR-XXXL', 'J0353-KR-S', 'JNE3667-TP-L', 'BTM036-PP-S', 'SET257-KR-PP-M', 'J0114-TP-S', 'NW033-ST-CP-XS', 'JNE3835-KR-M', 'JNE3777-KR-M', 'SET243-KR-PP-XXXL', 'JNE3628-KR-XL', 'J0238-LCD-XL', 'J0216-BL-XXL', 'J0152-DR-XS', 'JNE3376-KR-S', 'JNE2251-KR-537-C-XXL', 'J0304-TP-XXXL', 'SET132-KR-NP-XXL', 'JNE3745-KR-XL', 'J0371-SKD-S', 'J0297-TP-XXXL', 'AN202-ORANGE-S', 'JNE3836-KR-S', 'SET100-KR-PP-XXXL', 'J0086-DR-XL', 'J0072-KR-XXL', 'J0102-SKD-L', 'SET253-KR-NP-XL', 'J0074-TP-S', 'J0242-SKD-S', 'J0005-DR-M', 'JNE2049-KR-351-XXXL1', 'J0005-DR-XS', 'JNE3616-KR-XXXL', 'J0077-SKD-XXXL', 'J0195-TP-S', 'SET254-KR-NP-XL', 'JNE3856-KR-S', 'J0034-SET-XL', 'J0084-TP-S', 'NW027-TP-PJ-XS', 'J0282-SET-XXL', 'J0157-DR-L', 'J0085-TP-XXXL', 'JNE3602-KR-S', 'J0023-TP-XL', 'SAR096', 'SET266-KR-NP-XXXL', 'JNE3518-KR-XS', 'JNE3503-KR-XXL', 'SET218-KR-NP-M', 'J0304-TP-XL', 'J0029-KR-S', 'J0038-DR-XXXL', 'J0105-KR-XXXL', 'NW035-ST-CP-XXXL', 'SET346-KR-PP-XXL', 'J0138-KR-XS', 'J0129-SET-S', 'J0167-KR-XXL', 'J0329-KR-S', 'SET257-KR-PP-XL', 'J0123-TP-XL', 'J0398-DR-XXL', 'SET334-KR-NP-XS', 'J0011-LCD-XL', 'J0175-KR-M', 'J0038-DR-S', 'J0016-DR-XS', 'JNE3856-KR-M', 'AN208-MUSTARD-M', 'JNE3449-KR-XS', 'BTM046-PP-XL', 'J0226-SKD-XXXL', 'SET116-KR-NP-L', 'MEN5014-KR-S', 'J0197-TP-XL', 'JNE3689-TU-M', 'SET326-KR-PP-XS', 'JNE3396-KR-S', 'JNE3729-KR-S', 'J0111-TP-XS', 'SET297-KR-NP-XXXL', 'BTM041-PP-XS', 'J0245-SKD-XL', 'SET244-KR-NP-XL', 'J0026-KR-XS', 'NW022-TP-PJ-XXXL', 'JNE3750-KR-S', 'JNE3030-KR-XL', 'JNE3766-KR-S', 'NW027-TP-PJ-XL', 'JNE3702-KR-XS', 'JNE3670-TU-XXXL', 'SET048-KR-NP-XL', 'SET186-KR-DH-XL', 'JNE3564-KR-XL', 'JNE3856-KR-L', 'J0155-KR-XL', 'JNE3666-TP-S', 'J0134-SET-XXXL', 'JNE3669-TU-XL', 'JNE3796-KR-M', 'BTM041-PP-XXL', 'J0091-TP-M', 'SET242-KR-PP-M', 'NW013-ST-SR-XS', 'JNE3838-KR-XXL', 'J0140-SET-L', 'JNE3816-KR-XXL', 'NW027-TP-PJ-XXXL', 'JNE3666-TP-XS', 'J0159-DR-M', 'NW024-TP-PJ-XXXL', 'SET307-KR-DPT-XS', 'JNE3856-KR-XL', 'JNE3616-KR-XXL', 'J0280-SKD-XXXL', 'JNE2262-KR-569-S', 'J0189-TP-S', 'SET274-KR-PP-XXXL', 'JNE3836-KR-XS', 'NW038-ST-SR-XL', 'JNE3838-KR-XXXL', 'SET192-KR-NP-M', 'J0057-DR-XS', 'J0300-TP-S', 'SET408-KR-NP-XS', 'JNE3539-KR-XS', 'SET351-KR-NP-XS', 'SET251-KR-PP-XL', 'JNE3420-KR-XXL', 'JNE3676-TU-XXL', 'JNE3833-KR-XL', 'JNE3550-KR-XS', 'SET401-KR-NP-XXL', 'NW028-TP-PJ-L', 'MEN5030-KR-S', 'J0133-KR-XXL', 'SET307-KR-DPT-XL', 'J0240-SKD-M', 'JNE3676-TU-M', 'JNE3683-TU-S', 'BTM026-NP-L', 'SET353-KR-NP-XS', 'J0229-SKD-XXL', 'J0378-SKD-XXXL', 'J0284-SKD-XS', 'SET138-KR-PP-S', 'SET336-KR-NP-XS', 'JNE3807-KR-XL', 'SET402-KR-NP-XL', 'JNE3763-KR-S', 'SAR051', 'J0100-DR-XS', 'JNE2032-KR-205-XS', 'SAR023', 'SET340-KR-NP-XS', 'BTM042-PP-XL', 'J0375-SKD-M', 'NW024-TP-PJ-M', 'SET055-KR-NP-XXXL', 'BL113-XL', 'SET210-KR-PP-M', 'JNE3683-TU-XL', 'J0304-TP-XXL', 'JNE3783-KR-M', 'JNE3470-KR-S', 'JNE3445-KR-L', 'J0240-SKD-XS', 'JNE3798-KR-A-XL', 'MEN5010-KR-XXL', 'JNE3276-KR-XXL', 'JNE3644-TP-N-XXL', 'J0233-SKD-XXL', 'SET128-KR-DH-XS', 'JNE3790-KR-S', 'JNE3870-DR-XS', 'J0110-SKD-XXL', 'JNE3446-KR-XXXL', 'J0080-TP-XXL', 'JNE3698-KR-S', 'JNE3640-TP-N-S', 'SET128-KR-DH-S', 'J0350-SET-L', 'J0091-TP-L', 'JNE2049-KR-351-XL', 'JNE3581-KR-XL', 'J0348-SET-XXL', 'J0153-DR-XS', 'JNE3538-KR-XS', 'JNE3622-KR-XS', 'JNE2266-KR-490-A-S', 'JNE3458-KR-XS', 'JNE3769-KR-XL', 'J0001-DR-XS', 'J0336-TP-XS', 'JNE3661-TP-XS', 'JNE3445-KR-XL', 'J0085-TP-XS', 'JNE3748-KR-XS', 'AN201-RED-M', 'SET195-KR-NP-A-XL', 'J0014-LCD-XXXL', 'J0375-SKD-L', 'J0163-SKD-L', 'JNE3725-KR-XL', 'SET179-KR-PP-XXL', 'NW016-ST-SR-XXL', 'AN208-MUSTARD-XL', 'SAR034', 'JNE3763-KR-M', 'SET004-KR-SP-A-XL', 'SET317-KR-PP-S', 'JNE3446-KR-XL', 'J0294-TP-XXL', 'SET097-KR-PP-XL', 'JNE3688-TU-XXXL', 'JNE3661-TP-XXL', 'JNE3774-KR-XXL', 'J0319-KR-L', 'SET004-KR-SP-M', 'JNE3471-KR-XXL', 'JNE3717-KR-S', 'SET325-KR-NP-XXL', 'BL102-L', 'JNE3758-KR-XS', 'J0120-TP-XXL', 'SET390-KR-NP-XS', 'SET300-KR-NP-S', 'AN206-GREEN-M', 'JNE3724-KR-XS', 'J0198-TP-XXL', 'J0112-TP-XS', 'JNE2009-KR-310-L', 'J0122-TP-L', 'JNE3323-KR-A-XXXL', 'SET303-KR-NP-XXXL', 'JNE3539-KR-XXL', 'JNE3757-KR-XXXL', 'J0199-SET-XL', 'J0278-SET-XL', 'SET186-KR-DH-XXL', 'JNE3766-KR-XXL', 'SET306-KR-PP-XXXL', 'SET254-KR-NP-XXXL', 'BL113-XS', 'J0176-TP-S', 'BL104-XL', 'J0187-KR-XL', 'SET185-KR-NP-XXL', 'JNE3574-KR-S', 'MEN5001-KR-S', 'JNE3885-KR-L', 'JNE3615-KR-XS', 'J0112-TP-M', 'J0085-TP-XL', 'JNE3452-KR-S', 'JNE3797-KR-A-S', 'BL015-63PINK', 'SET343-KR-NP-XXXL', 'JNE3743-TP-S', 'JNE3615-KR-XXXL', 'SAR107', 'BTM044-PP-XXXL', 'BTM047-PP-XXXL', 'JNE3800-KR-A-XXXL', 'NW032-ST-CP-L', 'SET275-KR-NP-L', 'BL079-87RED', 'CH204-PURPLE-S', 'JNE3663-TP-M', 'BTM040-PP-XL', 'SET204-KR-DPT-L', 'JNE3541-KR-S', 'NW013-ST-SR-XL', 'NW009-ST-CP-XL', 'J0147-SET-L', 'JNE3548-KR-M', 'JNE3403-KR-M', 'JNE3276-KR-XXXL', 'J0371-SKD-XXXL', 'JNE3515-KR-S', 'JNE3434-KR-L', 'J0232-SKD-S', 'J0245-SKD-XXXL', 'JNE3820-KR-M', 'JNE3544-KR-S', 'JNE3726-KR-S', 'J0238-LCD-L', 'J0151-KR-XS', 'JNE3530-KR-XXXL', 'JNE3606-KR-S', 'SET394-KR-NP-XXL', 'SET147-KR-NP-XXL', 'JNE3752-KR-S', 'JNE3820-KR-XL', 'SET097-KR-PP-L', 'JNE3434-KR-XXL', 'JNE3531-KR-XL', 'JNE3744-TU-M', 'J0103-SKD-XXL', 'J0027-SET-S', 'JNE3516-KR-E-XXL', 'J0033-KR-XS', 'SET188-KR-NP-XL', 'JNE3618-KR-XXXL', 'SET165-KR-PP-XS', 'JNE3680-TU-XL', 'JNE3789-KR-XL', 'JNE3719-KR-XS', 'JNE3693-KR-XXL', 'JNE3273-KR-M', 'SET097-KR-PP-XXL', 'SET097-KR-PP-XXXL', 'J0122-TP-XS', 'JNE3679-TU-S', 'PJNE3404-KR-N-4XL', 'JNE3752-KR-XXL', 'PJNE3440-KR-N-6XL', 'JNE3635-KR-XXXL', 'PJNE2014-KR-N-6XL', 'PJNE3568-KR-N-4XL', 'JNE3475-KR-K-L', 'J0199-SET-XS', 'BL107-XL', 'JNE3539-KR-XXXL', 'JNE3738-KR-XXL', 'BTM039-PP-XS', 'PJNE3364-KR-5XL', 'PJNE3364-KR-6XL', 'PJNE3568-KR-N-5XL', 'AN202-ORANGE-M', 'JNE3722-KR-XS', 'PJNE3423-KR-N-4XL', 'JNE3466-KR-S', 'MEN5012-KR-S', 'PJNE2199-KR-N-5XL', 'SET153-KR-NP-XXL', 'JNE3800-KR-A-XXL', 'JNE3823-KR-XL', 'PJNE2014-KR-N-4XL', 'AN209-BIEGE-XL', 'J0162-SKD-XS', 'SET376-KR-NP-L', 'J0178-TP-XXL', 'SET004-KR-SP-A-M', 'PSET268-KR-NP-6XL', 'JNE3629-KR-S', 'JNE3415-KR-XL', 'MEN5027-KR-XXXL', 'PJNE2100-KR-N-4XL', 'J0183-TP-XS', 'JNE3727-KR-M', 'SET327-KR-DPT-XS', 'SET053-KR-NP-XL', 'PJNE1906-KR-N-5XL', 'PJNE3440-KR-N-4XL', 'PJNE2014-KR-N-5XL', 'SET232-KR-PP-M', 'SET004-KR-SP-A-XXL', 'PJNE3373-KR-N-5XL', 'PSET264-KR-NP-4XL', 'PJNE3368-KR-4XL', 'JNE3769-KR-XXXL', 'SET034-KR-NP-XXXL', 'SET210-KR-PP-S', 'JNE3833-KR-S', 'SET138-KR-PP-XL', 'J0226-SKD-XS', 'JNE3630-KR-XL', 'JNE3686-TU-XXL', 'JNE3732-KR-XL', 'JNE3789-KR-XXL', 'JNE3657-TP-XXL', 'SET297-KR-NP-L', 'SET091-KR-NP-S', 'J0028-KR-S', 'J0103-SKD-XS', 'JNE3531-KR-M', 'MEN5028-KR-XXXL', 'SET346-KR-PP-S', 'JNE3878-KR-XXL', 'PSET264-KR-NP-6XL', 'MEN5012-KR-XXXL', 'J0141-KR-XXL', 'JNE3813-KR-S', 'PJNE3404-KR-N-6XL', 'PJNE3607-KR-4XL', 'SET034-KR-NP-XXL', 'JNE3466-KR-XXL', 'PSET043-KR-NP-6XL', 'SET037-KR-NP-S', 'J0001-DR-XL', 'J0001-DR-L', 'JNE3706-DR-XS', 'PJNE3399-KR-N-5XL', 'MEN5013-KR-XXXL', 'BTM042-PP-M', 'J0355-KR-XXL', 'SET242-KR-PP-XS', 'JNE3676-TU-XS', 'JNE3563-KR-XXL', 'JNE3401-KR-XXL', 'JNE3457-KR-L', 'PJNE3423-KR-N-5XL', 'J0131-KR-XL', 'J0033-KR-M', 'SET321-KR-DPT-L', 'J0077-SKD-XL', 'BTM043-PP-XL', 'JNE3364-KR-1051-XXXL', 'J0299-KR-XL', 'J0044-TP-XS', 'SET305-KR-DPT-XXXL', 'JNE3545-KR-M', 'JNE3654-TP-S', 'JNE3766-KR-XS', 'J0184-KR-M', 'BTM033-NP-XXL', 'SET334-KR-NP-XXXL', 'SET153-KR-NP-XXXL', 'JNE3504-KR-S', 'JNE3885-KR-XXL', 'JNE3625-DR-XXXL', 'PJNE3405-KR-N-6XL', 'JNE3279-KR-A-XXL', 'JNE3515-KR-L', 'J0058-DR-XS', 'J0214-TP-S', 'PJNE3568-KR-N-6XL', 'JNE3313-KR-A-M', 'PJNE3423-KR-N-6XL', 'SET245-KR-NP-XS', 'JNE3767-KR-M', 'J0074-TP-XL', 'PJNE2270-KR-N-4XL', 'PJNE3405-KR-N-4XL', 'JNE3574-KR-XL', 'J0202-TP-XXXL', 'J0370-SKD-XXL', 'J0329-KR-XXL', 'J0161-DR-XXL', 'AN205-YELLOW-S', 'SET204-KR-DPT-S', 'JNE3686-TU-XS', 'PSET043-KR-NP-4XL', 'JNE3428-KR-XL', 'J0351-SET-M', 'JNE3539-KR-XL', 'J0133-KR-A-M', 'PJNE3363-KR-N-5XL', 'J0355-KR-XL', 'JNE3323-KR-S', 'JNE3474-KR-E-L', 'J0347-SET-XS', 'SET194-KR-NP-S', 'JNE3823-KR-XS', 'SET131-KR-NP-A-S', 'J0375-SKD-XL', 'PJNE3363-KR-N-4XL', 'J0181-TP-XL', 'BL110-M', 'J0034-SET-XS', 'J0136-KR-XS', 'JNE3680-TU-A-L', 'J0044-TP-S', 'SET172-KR-PP-B-XXXL', 'JNE2101-KR-210-L', 'PSET058-KR-NP-4XL', 'J0229-SKD-S', 'JNE3741-KR-XS', 'JNE3769-KR-S', 'JNE3798-KR-A-M', 'SET130-KR-NP-XL', 'JNE3323-KR-L', 'JNE3668-TP-N-XXL', 'J0346-SET-S', 'J0228-SKD-L', 'J0033-KR-XL', 'J0166-DR-M', 'JNE3252-KR-XXXL', 'BL104-XS', 'J0242-SKD-M', 'J0062-DR-XXL', 'JNE2086-KR-389-S', 'SET112-KR-SP-XS', 'SET306-KR-PP-XL', 'JNE3669-TU-XXXL', 'JNE3608-KR-XXXL', 'J0178-TP-L', 'JNE3389-KR-A-XXL', 'SET270-KR-PP-L', 'J0138-KR-M', 'J0077-SKD-XS', 'JNE3785-KR-XS', 'JNE3429-KR-XXL', 'SET193-KR-NP-A-XXXL', 'J0093-DR-M', 'SET136-KR-PP-L', 'J0147-SET-XXXL', 'JNE3441-KR-E-M', 'J0112-TP-XL', 'JNE3571-KR-XL', 'J0171-DR-XL', 'J0075-KR-M', 'NW004-TP-PJ-S', 'PSET268-KR-NP-5XL', 'JNE3783-KR-XS', 'PJNE1906-KR-N-4XL', 'JNE3817-KR-XXXL', 'JNE3895-TP-L', 'SET413-KR-NP-XXXL', 'BL050-83RED-A', 'JNE3491-KR-XXXL', 'J0073-KR-XL', 'J0180-DR-XXXL', 'J0104-KR-XL', 'BTM037-PP-XL', 'SET147-KR-NP-M', 'JNE3821-KR-XXL', 'SET037-KR-NP-L', 'J0254-SKD-S', 'J0172-TP-XS', 'JNE3547-KR-L', 'JNE3791-DR-M', 'JNE3823-KR-S', 'PSET268-KR-NP-4XL', 'MEN5015-KR-S', 'JNE3820-KR-L', 'J0154-DR-M', 'PJNE3364-KR-4XL', 'SET395-KR-NP-S', 'SAR109', 'J0161-DR-L', 'JNE3547-KR-XXL', 'JNE3577-KR-XXL', 'JNE3323-KR-M', 'SAR026', 'JNE3391-KR-L', 'JNE3438-KR-XXXL', 'JNE3651-TP-N-XS', 'J0205-TP-XXXL', 'JNE3531-KR-XXL', 'JNE3622-KR-XXXL', 'SET336-KR-NP-L', 'JNE09187-PINK-SR-JP7104RNV', 'JNE3323-KR-XXXL', 'JNE3042-KR-XL', 'JNE3624-KR-XL', 'J0235-SKD-M', 'PJNE1906-KR-N-6XL', 'JNE3436-KR-XL', 'PSET043-KR-NP-5XL', 'JNE2132-KR-398-XL', 'SET258-KR-PP-XXXL', 'SET195-KR-NP-A-XXL', 'J0161-DR-M', 'SET179-KR-PP-L', 'J0294-TP-XL', 'PJNE2270-KR-N-5XL', 'PSET264-KR-NP-5XL', 'J0248-KR-DPT-M', 'SET097-KR-PP-XS', 'MEN5014-KR-L', 'J0137-SET-XS', 'SET043-KR-NP-XS', 'SET245-KR-NP-XXL', 'JNE3323-KR-A-S', 'SAR132', 'BL099-L', 'J0140-SET-XXXL', 'J0133-KR-XXXL', 'SET055-KR-NP-S', 'JNE3323-KR-XS', 'JNE3570-KR-XS', 'SET321-KR-DPT-XXL', 'SAR049', 'J0179-KR-XXXL', 'SET300-KR-NP-XS', 'SET326-KR-PP-XL', 'JNE3684-TU-XL', 'PJNE3404-KR-N-5XL', 'SET100-KR-PP-M', 'SET336-KR-NP-S', 'J0142-KR-L', 'J0160-TP-L', 'PJNE3291-KR-5XL', 'SET236-KR-PP-XXL', 'J0143-SET-A-L', 'J0091-TP-XXL', 'JNE3816-KR-XXXL', 'SET327-KR-DPT-XL', 'JNE3729-KR-XXL', 'JNE3666-TP-M', 'NW023-ST-SR-XL', 'JNE3728-KR-M', 'SET037-KR-NP-M', 'J0347-SET-L', 'JNE3265-KR-M', 'JNE2251-KR-537-C-L', 'SET236-KR-PP-S', 'SET327-KR-DPT-S', 'MEN5018-KR-XXXL', 'J0112-TP-S', 'SET132-KR-NP-L', 'JNE3887-KR-XS', 'SET179-KR-PP-XL', 'PJNE3373-KR-N-4XL', 'J0183-TP-M', 'SET390-KR-NP-XXXL', 'J0154-DR-L', 'JNE3577-KR-S', 'PJNE3252-KR-N-4XL', 'JNE2086-KR-389-XXXL', 'SET402-KR-NP-XXL', 'JNE3539-KR-S', 'J0165-TP-S', 'J0151-KR-L', 'JNE3738-KR-S', 'JNE3438-KR-XS', 'JNE3429-KR-XS', 'J0192-TP-XXL', 'SET062-KR-SP-XS', 'J0305-DR-L', 'SET313-KR-NP-XXXL', 'JNE3644-TP-N-XS', 'SAR029', 'SET271-KR-NP-M', 'JNE3348-KR-XL', 'J0232-SKD-XXXL', 'JNE3524-KR-XXXL', 'SET250-KR-SHA-XXXL', 'JNE3779-KR-S', 'JNE3415-KR-M', 'SET274-KR-PP-L', 'JNE3481-KR-XL', 'JNE3674-TU-XS', 'J0155-KR-L', 'JNE3813-KR-L', 'J0023-TP-XS', 'J0160-TP-S', 'JNE3684-TU-XXXL', 'J0120-TP-L', 'SET043-KR-NP-XXXL', 'PSET058-KR-NP-5XL', 'J0354-KR-XL', 'JNE3879-DR-L', 'SET376-KR-NP-S', 'JNE3729-KR-XS', 'NW022-TP-PJ-S', 'JNE3764-KR-XS', 'J0302-DR-XXXL', 'J0299-KR-XXL', 'SET336-KR-NP-M', 'BTM029-NP-L', 'JNE3686-TU-XXXL', 'JNE3684-TU-M', 'JNE3532-KR-XXL', 'J0155-KR-S', 'JNE3647-TP-N-XXL', 'J0345-SET-M', 'BL023-74PINK-B', 'JNE3564-KR-S', 'SET364-KR-NP-XXXL', 'SET240-KR-PP-S', 'SET251-KR-PP-L', 'JNE1408-KR-UDF19-A-XL', 'SET321-KR-DPT-XS', 'SET130-KR-NP-XS', 'JNE3528-KR-XXL', 'JNE3721-KR-XXXL', 'SET271-KR-NP-XXXL', 'J0137-SET-XXL', 'J0328-KR-M', 'JNE3447-KR-M', 'BTM047-PP-L', 'SET351-KR-NP-S', 'SET376-KR-NP-M', 'JNE3065-KR-L', 'BL009-61BLACK', 'SET245-KR-NP-L', 'SET182-KR-DH-K-M', 'JNE3472-KR-XXXL', 'SET373-KR-PP-S', 'J0098-TP-L', 'SET317-KR-PP-XS', 'BL111-M', 'JNE3457-KR-XXXL', 'JNE3798-KR-A-XXL', 'JNE3510-KR-XXXL', 'SET182-KR-DH-XXL', 'JNE3878-KR-M', 'JNE3904-DR-XXXL', 'SET154-KR-NP-S', 'J0390-TP-XXXL', 'JNE3687-TU-XXXL', 'JNE3346-KR-XXL', 'JNE3788-KR-XL', 'J0175-KR-S', 'JNE3756-KR-XS', 'JNE3252-KR-XXL', 'SET436-KR-NP-XS', 'JNE3440-KR-XL', 'SET335-KR-NP-L', 'JNE3905-DR-XXXL', 'JNE3753-KR-S', 'SET341-KR-NP-M', 'SET415-KR-NP-XS', 'JNE3456-KR-S', 'JNE3265-KR-L', 'J0398-DR-XS', 'JNE3862-TU-L', 'SET357-KR-NP-M', 'JNE3905-DR-S', 'JNE3904-DR-L', 'JNE3905-DR-M', 'JNE3671-TU-XL', 'JNE3601-KR-L', 'JNE3535-KR-XL', 'SET318-KR-SHA-XXL', 'SET357-KR-NP-L', 'JNE3837-KR-XXXL', 'JNE3791-DR-L', 'J0389-TP-XXL', 'JNE3905-DR-XXL', 'J0413-DR-S', 'JNE3875-KR-L', 'SET152-KR-NP-S', 'SET139-KR-PP-XXXL', 'SET403-KR-NP-L', 'J0182-SET-S', 'JNE3928-KR-XS', 'JNE3395-KR-XXXL', 'SET404-KR-NP-XL', 'SET435-KR-NP-XS', 'J0225-SKD-XL', 'JNE3885-KR-XS', 'JNE3739-KR-S', 'SET414-KR-NP-XL', 'JNE3753-KR-XS', 'JNE3860-DR-XL', 'NW036-ST-SR-S', 'J0177-KR-S', 'JNE3485-KR-XS', 'J0390-TP-XS', 'JNE3665-TP-M', 'SET436-KR-NP-L', 'JNE3674-TU-S', 'SET433-KR-NP-M', 'JNE3871-KR-S', 'PJNE3291-KR-4XL', 'J0418-TP-XS', 'JNE3800-KR-A-XL', 'JNE3904-DR-M', 'SET299-KR-PP-S', 'J0386-KR-XL', 'JNE3928-KR-L', 'SET218-KR-NP-L', 'J0314-KR-S', 'JNE3928-KR-XL', 'J0385-KR-S', 'PJNE2270-KR-N-6XL', 'J0126-SKD-XL', 'J0402-DR-S', 'J0106-KR-XS', 'J0127-SKD-XL', 'J0226-SKD-XXL', 'PJNE3421-KR-N-5XL', 'PJNE3421-KR-N-4XL', 'JNE3445-KR-XXXL', 'SET198-KR-NP-A-S', 'JNE3389-KR-XL', 'SET327-KR-DPT-XXXL', 'SET254-KR-NP-L', 'J0164-DR-XS', 'SET274-KR-PP-XS', 'JNE3821-KR-XS', 'J0416-DR-XS', 'JNE3779-KR-XXXL', 'BTM008-B-L', 'J0397-DR-S', 'J0415-DR-XL', 'J0207-DR-L', 'JNE3905-DR-XS', 'JNE3792-KR-XL', 'SET053-KR-NP-XS', 'J0413-DR-XL', 'PJNE3421-KR-N-6XL', 'SET404-KR-NP-L', 'JNE3363-KR-1032-L', 'J0021-TP-XXL', 'J0307-TP-L', 'JNE3892-TP-L', 'JNE3904-DR-XL', 'SET340-KR-NP-S', 'JNE3887-KR-S', 'J0413-DR-XS', 'JNE3780-KR-XL', 'J0400-DR-XL', 'J0229-SKD-XL', 'J0196-TP-S', 'JNE3261-KR-XL', 'JNE3553-KR-XXL', 'SET130-KR-NP-M', 'SET272-KR-PP-L', 'J0072-KR-S', 'AN213-BROWN-L', 'JNE2300-KR-594-A-S', 'SET285-KR-SHA-XXXL', 'JNE3701-KR-S', 'JNE3739-KR-M', 'JNE2131-KR-A-S', 'J0082-TP-XS', 'NW031-TP-PJ-XS', 'JNE3548-KR-XS', 'JNE3630-KR-XS', 'JNE3628-KR-XS', 'JNE3928-KR-S', 'JNE3771-KR-L', 'JNE3891-TP-XXXL', 'J0103-SKD-A-M', 'J0252-SKD-XXL', 'NW036-ST-SR-XS', 'AN210-NAVY-M', 'SET415-KR-NP-XXXL', 'JNE3888-KR-XXXL', 'AN213-BROWN-M', 'JNE3885-KR-XL', 'JNE3767-KR-XXXL', 'JNE3255-KR-XXXL', 'SET335-KR-NP-XXXL', 'JNE3451-KR-XS', 'J0415-DR-XS', 'J0375-SKD-XS', 'JNE3865-TP-XS', 'JNE3771-KR-S', 'SET403-KR-NP-XXXL', 'J0233-SKD-XL', 'SET373-KR-PP-XL', 'JNE3888-KR-S', 'SET433-KR-NP-XXL', 'SET357-KR-NP-XXL', 'SET129-KR-NP-XL', 'JNE3928-KR-M', 'JNE3734-KR-XL', 'J0391-TP-L', 'J0390-TP-L', 'SET376-KR-NP-XL', 'J0106-KR-XXL', 'SET410-KR-NP-XS', 'PJNE3252-KR-N-5XL', 'SET409-KR-NP-S', 'J0391-TP-XL', 'J0388-TP-M', 'SET373-KR-PP-XXL', 'SAR061', 'JNE3394-KR-A-S', 'JNE3601-KR-XS', 'JNE3745-KR-XS', 'J0073-KR-L', 'J0385-KR-XS', 'J0385-KR-XL', 'SET403-KR-NP-M', 'J0145-SET-M', 'SET346-KR-PP-M', 'AN204-PURPLE-L', 'JNE3767-KR-XL', 'JNE3866-KR-XXXL', 'JNE3279-KR-A-XXXL', 'JNE2294-KR-A-XL', 'SET310-KR-NP-XXXL', 'JNE3893-TP-L', 'J0163-SKD-XL', 'SET218-KR-NP-XS', 'J0123-TP-XXXL', 'BL098-XL', 'JNE3898-KR-XXXL', 'JNE3888-KR-XXL', 'JNE3576-KR-XXXL', 'J0372-SKD-XS', 'PJNE3291-KR-6XL', 'JNE3734-KR-XXXL', 'SET154-KR-NP-L', 'SET357-KR-NP-XXXL', 'JNE3403-KR-S', 'SET373-KR-PP-XXXL', 'SET404-KR-NP-S', 'SET338-KR-NP-XL', 'JNE3768-KR-XXXL', 'SET338-KR-NP-S', 'JNE3369-KR-XXXL', 'J0014-LCD-XXL', 'SET202-KR-NP-M', 'SET414-KR-NP-XXL', 'JNE3878-KR-S', 'JNE3573-KR-XXXL', 'JNE3720-KR-S', 'J0193-SET-XXXL', 'PJNE3445-KR-N-6XL', 'BTM041-PP-L', 'J0241-SKD-XS', 'BTM021-B-XXXL', 'JNE3571-KR-L', 'JNE3467-KR-XXL', 'JNE3791-DR-S', 'JNE3898-KR-M', 'JNE3788-KR-XXL', 'JNE3700-KR-M', 'JNE3415-KR-S', 'JNE3416-KR-M', 'SET435-KR-NP-XL', 'JNE3875-KR-M', 'SET200-KR-NP-A-L', 'JNE3893-TP-XXL', 'JNE3739-KR-XS', 'SET025-KR-SP-A-XS', 'JNE2086-KR-389-M', 'SET058-KR-NP-XS', 'J0330-KR-XXXL', 'JNE3296-KR-XXL', 'JNE3811-KR-L', 'J0381-SKD-XXL', 'J0391-TP-XXXL', 'JNE3905-DR-XL', 'J0389-TP-S', 'J0112-TP-XXL', 'JNE3346-KR-M', 'JNE3765-KR-L', 'J0413-DR-L', 'J0116-TP-XXL', 'JNE3701-KR-M', 'J0290-CD-XL', 'JNE3727-KR-S', 'J0162-SKD-M', 'SET251-KR-PP-XXXL', 'JNE3475-KR-K-XXL', 'JNE3803-KR-XXXL', 'JNE3296-KR-S', 'SET352-KR-NP-S', 'J0282-SET-M', 'BTM043-PP-XXXL', 'J0228-SKD-M', 'SET147-KR-NP-XS', 'JNE3875-KR-XL', 'JNE3500-KR-XL', 'JNE3577-KR-XXXL', 'JNE3485-KR-L', 'JNE3733-KR-S', 'JNE3727-KR-XS', 'NW015-TP-PJ-XL', 'SET121-KR-NP-L', 'JNE3485-KR-XL', 'J0145-SET-L', 'SET078-KR-NP-S', 'JNE3928-KR-XXL', 'JNE3537-KR-S', 'JNE3394-KR-M', 'JNE3453-KR-M', 'JNE3313-KR-XXXL', 'JNE3485-KR-XXXL', 'SET262-KR-NP-M', 'JNE3887-KR-M', 'J0414-DR-XS', 'JNE3885-KR-XXXL', 'JNE3899-KR-S', 'J0165-TP-XS', 'J0398-DR-L', 'JNE3526-KR-XS', 'MEN5016-KR-XXL', 'SET204-KR-DPT-M', 'JNE3601-KR-M', 'SET436-KR-NP-XL', 'SET352-KR-NP-M', 'JNE3389-KR-A-XS', 'SET307-KR-DPT-XXL', 'NW001-TP-PJ-XS', 'BTM041-PP-XL', 'JNE3748-KR-L', 'SET352-KR-NP-XXXL', 'JNE3904-DR-XS', 'JNE3475-KR-K-XL', 'SAR154', 'JNE3651-TP-N-S', 'JNE3637-KR-XXXL', 'AN211-BLACK-L', 'J0142-KR-XS', 'J0419-TP-M', 'J0278-SET-S', 'J0388-TP-XS', 'J0166-DR-S', 'SET301-KR-PP-M', 'NW034-TP-PJ-S', 'J0390-TP-M', 'J0048-TP-XS', 'JNE3279-KR-A-XS', 'J0390-TP-S', 'SET232-KR-PP-XXL', 'J0319-KR-XXL', 'SET034-KR-NP-S', 'JNE3642-TP-L', 'JNE3674-TU-XXXL', 'J0103-SKD-L', 'JNE3371-KR-XXL', 'SET435-KR-NP-L', 'JNE3894-TP-L', 'JNE3880-DR-XXL', 'JNE3637-KR-XS', 'J0136-KR-XXXL', 'J0152-DR-XL', 'BTM008-L', 'NW016-ST-SR-XS', 'SET302-KR-PP-XL', 'SET221-KR-NP-XL', 'J0385-KR-XXL', 'JNE3475-KR-K-M', 'J0323-CD-XXL', 'SET158-KR-PP-XL', 'BTM029-NP-XS', 'J0105-KR-S', 'J0102-SKD-XS', 'JNE3255-KR-XXL', 'SET335-KR-NP-S', 'BL109-XL', 'BTM035-NP-XXXL', 'SET152-KR-NP-XS', 'JNE3565-KR-XL', 'SET436-KR-NP-M', 'JNE3872-KR-XL', 'AN213-BROWN-XL', 'J0386-KR-M', 'JNE3892-TP-M', 'BTM046-PP-M', 'JNE3453-KR-XL', 'SET394-KR-NP-XL', 'J0353-KR-M', 'SAR174', 'SET003-KR-NP-A-S', 'SET415-KR-NP-L', 'SET335-KR-NP-XS', 'SET276-KR-PP-L', 'JNE3426-KR-S', 'BL024-74RED-B', 'JNE3281-KR-XL', 'J0419-TP-L', 'SET306-KR-PP-XS', 'JNE3359-KR-S', 'JNE3720-KR-L', 'SET262-KR-NP-XXL', 'JNE3752-KR-XS', 'JNE3790-KR-XS', 'J0150-KR-XS', 'JNE3630-KR-XXL', 'JNE3456-KR-XS', 'JNE3823-KR-L', 'SET198-KR-NP-A-L', 'SET415-KR-NP-M', 'J0024-KR-XXL', 'JNE3892-TP-XL', 'MEN5030-KR-L', 'NW024-TP-PJ-L', 'J0192-TP-S', 'J0190-TP-XS', 'JNE3788-KR-L', 'J0279-SET-S', 'SET014-KR-PP-S', 'SET128-KR-DH-XXL', 'JNE3896-KR-XXL', 'J0072-KR-XS', 'SET401-KR-NP-XS', 'J0391-TP-XXL', 'J0389-TP-XS', 'J0251-SKD-XXXL', 'JNE3460-KR-XL', 'SET224-KR-NP-XXXL', 'JNE2205-KR-467-A-L', 'SET376-KR-NP-XXXL', 'J0103-SKD-XL', 'JNE3630-KR-S', 'JNE3578-KR-XS', 'JNE3888-KR-XS', 'J0374-KR-XXL', 'JNE3631-DR-XS', 'JNE3355-KR-XL', 'J0389-TP-XXXL', 'JNE3893-TP-M', 'BL100-XXL', 'SET435-KR-NP-XXXL', 'J0241-SKD-XXL', 'JNE3798-KR-A-S', 'SET202-KR-NP-XL', 'JNE3670-TU-XL', 'AN207-PINK-L', 'JNE3780-KR-L', 'BL098-S', 'JNE3862-TU-S', 'JNE3157-KR-M', 'J0091-TP-XS', 'SET156-KR-NP-S', 'J0177-KR-XS', 'J0250-SKD-M', 'JNE3257-KR-S', 'J0331-KR-XXL', 'JNE3860-DR-XS', 'SET159-KR-NP-XXL', 'SET313-KR-NP-L', 'JNE3788-KR-S', 'SET301-KR-PP-S', 'SET390-KR-NP-S', 'SET226-KR-PP-S', 'J0397-DR-XXL', 'J0151-KR-A-M', 'SET404-KR-NP-XXL', 'JNE3791-DR-XXL', 'J0049-TP-XL', 'J0418-TP-L', 'SET087-KR-PP-L', 'J0386-KR-L', 'BTM026-NP-XXXL', 'JNE3888-KR-L', 'J0019-SET-XS', 'J0175-KR-L', 'JNE3895-TP-XL', 'J0323-CD-L', 'JNE3296-KR-XL', 'J0282-SET-XL', 'SET004-KR-SP-XXL', 'JNE3875-KR-XXXL', 'JNE3771-KR-XXL', 'J0189-TP-XS', 'J0231-SKD-XS', 'J0354-KR-S', 'JNE3727-KR-XXXL', 'J0168-DR-L', 'JNE3485-KR-XXL', 'J0241-SKD-S', 'J0417-TP-XL', 'J0389-TP-XL', 'J0388-TP-XL', 'J0390-TP-XL', 'J0392-TP-XL', 'SET172-KR-PP-B-XXL', 'SET202-KR-NP-XXXL', 'JNE3627-KR-XXXL', 'J0330-KR-L', 'SET036-KR-NP-XXXL', 'JNE3313-KR-A-XL', 'SET352-KR-NP-XXL', 'J0172-TP-L', 'J0389-TP-L', 'J0371-SKD-XL', 'JNE3779-KR-L', 'SET435-KR-NP-XXL', 'BTM004-XXXL', 'J0379-SKD-XS', 'SET280-KR-PP-XXXL', 'JNE3261-KR-L', 'NW038-ST-SR-L', 'JNE3890-TP-S', 'SET395-KR-NP-XL', 'SET196-KR-NP-XS', 'SET436-KR-NP-XXL', 'JNE3904-DR-S', 'JNE3748-KR-M', 'J0331-KR-L', 'BL090-XS', 'BTM045-PP-M', 'SET238-KR-PP-S', 'SET280-KR-PP-L', 'JNE3798-KR-A-XXXL', 'JNE3734-KR-XXL', 'J0074-TP-XXL', 'BTM044-PP-XXL', 'BTM008-B-XXL', 'J0418-TP-M', 'SET034-KR-NP-XS', 'BTM037-PP-XXL', 'SET200-KR-NP-A-M', 'NW015-TP-PJ-L', 'J0282-SET-L', 'J0388-TP-S', 'J0138-KR-XXL', 'JNE3363-KR-1032-S', 'SET201-KR-NP-A-M', 'JNE3557-KR-XXL', 'AN208-MUSTARD-L', 'J0386-KR-S', 'J0082-TP-S', 'JNE3770-KR-XXL', 'J0089-TP-M', 'J0241-SKD-XXXL', 'JNE3881-DR-XS', 'J0229-SKD-L', 'JNE3862-TU-XL', 'AN211-BLACK-XXL', 'AN203-MAROON-XXL', 'AN207-PINK-XXL', 'J0151-KR-A-XXXL', 'SET199-KR-NP-M', 'JNE3625-DR-M', 'JNE3601-KR-S', 'JNE3791-DR-XL', 'SET403-KR-NP-XXL', 'JNE3928-KR-XXXL', 'JNE3902-KR-XXXL', 'JNE3430-KR-XS', 'JNE3416-KR-XS', 'J0225-SKD-M', 'BL075-85CHIKU', 'J0142-KR-S', 'NW038-ST-SR-XS', 'J0151-KR-A-XL', 'J0174-TP-XS', 'JNE3734-KR-XS', 'SET257-KR-PP-L', 'NW038-ST-SR-XXXL', 'NW038-ST-SR-M', 'J0377-SKD-XS', 'JNE3786-KR-XL', 'CH208-MUSTARD-M', 'JNE3447-KR-XL', 'JNE3679-TU-M', 'J0049-TP-L', 'JNE3453-KR-L', 'JNE3526-KR-XL', 'JNE2049-KR-351-M', 'JNE3252-KR-XS', 'SET372-KR-PP-M', 'BTM032-NP-M', 'SET435-KR-NP-S', 'JNE3780-KR-XS', 'JNE3602-KR-XS', 'J0225-SKD-XS', 'J0127-SKD-XXL', 'NW032-ST-CP-XS', 'JNE3902-KR-L', 'JNE3662-TP-M', 'JNE3456-KR-XL', 'JNE3820-KR-XXL', 'JNE3895-TP-XXXL', 'J0124-TP-XS', 'BTM038-PP-XXL', 'BL091-XL', 'JNE3770-KR-XS', 'JNE3390-KR-S', 'JNE3625-DR-XXL', 'SET308-KR-PP-XL', 'JNE3631-DR-XL', 'SET372-KR-PP-XL', 'JNE3749-KR-M', 'J0138-KR-S', 'J0190-TP-M', 'JNE3601-KR-XXL', 'JNE3388-KR-L', 'JNE3792-KR-L', 'J0226-SKD-L', 'J0370-SKD-L', 'J0049-TP-M', 'J0123-TP-M', 'JNE3802-KR-XXXL', 'JNE3257-KR-M', 'J0178-TP-M', 'SET248-KR-NP-XXL', 'JNE3649-TP-N-XXL', 'JNE3792-KR-M', 'PJNE3607-KR-6XL', 'NW004-TP-PJ-XS', 'MEN5005-KR-XL', 'J0078-SET-XL', 'J0176-TP-XS', 'JNE3665-TP-L', 'J0350-SET-M', 'SET308-KR-PP-XS', 'SET199-KR-NP-XL', 'SET244-KR-NP-XS', 'J0224-SKD-XXXL', 'SET315-KR-PP-M', 'JNE2251-KR-537-C-XXXL', 'SAR076', 'JNE3748-KR-XL', 'J0183-TP-XL', 'JNE3672-TU-XS', 'JNE3544-KR-XS', 'J0419-TP-S', 'JNE3889-KR-M', 'J0159-DR-XS', 'J0296-DR-M', 'SET199-KR-NP-XXXL', 'J0120-TP-M', 'SET083-KR-PP-XXL', 'J0062-DR-L', 'SET410-KR-NP-XXXL', 'JNE3520-KR-XS', 'JNE3395-KR-M', 'J0185-DR-M', 'JNE3887-KR-XXL', 'SET087-KR-PP-XXL', 'JNE3338-KR-S', 'J0225-SKD-L', 'J0293-DR-M', 'JNE3881-DR-S', 'JNE3517-KR-XXL', 'JNE3780-KR-S', 'JNE3701-KR-XXL', 'SET372-KR-PP-XXXL', 'JNE3686-TU-S', 'JNE3625-DR-L', 'PJNE3363-KR-N-6XL', 'NW028-TP-PJ-XS', 'J0197-TP-XS', 'JNE3734-KR-L', 'NW009-ST-CP-M', 'JNE3695-KR-XL', 'JNE3313-KR-A-L', 'J0127-SKD-L', 'JNE3641-TP-N-XXL', 'J0201-TP-S', 'NW015-TP-PJ-XXXL', 'J0293-DR-XL', 'J0223-SKD-XXXL', 'JNE3416-KR-S', 'NW006-ST-SR-XL', 'JNE3323-KR-A-M', 'SET240-KR-PP-M', 'SET100-KR-PP-L', 'JNE3678-TU-S', 'J0173-DR-XL', 'J0194-DR-L', 'JNE3771-KR-XS', 'JNE3753-KR-XL', 'SET242-KR-PP-XXL', 'JNE2100-KR-144-XXXL', 'SET199-KR-NP-XS', 'NW009-ST-CP-XS', 'JNE3434-KR-XXXL', 'SET235-KR-PP-S', 'JNE3823-KR-XXXL', 'JNE3750-KR-XL', 'SET346-KR-PP-XXXL', 'SET335-KR-NP-XL', 'JNE3898-KR-XL', 'SET224-KR-NP-L', 'J0323-CD-S', 'J0388-TP-L', 'JNE3500-KR-L', 'JNE3893-TP-S', 'JNE3825-KR-XXXL', 'J0040-SET-XS', 'SET230-KR-PP-XXL', 'SET238-KR-PP-XXL', 'JNE3631-DR-M', 'JNE3526-KR-XXL', 'JNE3577-KR-L', 'CH208-MUSTARD-S', 'JNE3734-KR-S', 'SET223-KR-NP-XS', 'JNE3821-KR-XXXL', 'BTM044-PP-XL', 'BTM039-PP-XL', 'JNE3821-KR-L', 'JNE3886-KR-XXXL', 'SET014-KR-PP-A-S', 'J0374-KR-L', 'JNE3563-KR-XXXL', 'J0131-KR-A-M', 'JNE3819-KR-XS', 'J0302-DR-XS', 'J0137-SET-XXXL', 'JNE3768-KR-XS', 'SET299-KR-PP-M', 'SET272-KR-PP-M', 'JNE3413-KR-XXXL', 'JNE3879-DR-S', 'J0348-SET-XXXL', 'SET372-KR-PP-XS', 'JNE3389-KR-S', 'JNE3798-KR-A-XS', 'NW028-TP-PJ-XXL', 'JNE3342-KR-S', 'SET275-KR-NP-XS', 'SET414-KR-NP-S', 'JNE3898-KR-S', 'J0153-DR-M', 'SET335-KR-NP-XXL', 'AN204-PURPLE-XL', 'JNE1408-KR-UDF19-A-L', 'J0144-SET-XS', 'JNE3500-KR-XXXL', 'JNE3395-KR-XXL', 'NW031-TP-PJ-XL', 'JNE3446-KR-M', 'J0142-KR-XXXL', 'J0188-KR-XXXL', 'SET226-KR-PP-XXXL', 'JNE2251-KR-537-XXXL', 'JNE3574-KR-XXXL', 'J0057-DR-XXXL', 'JNE3532-KR-S', 'J0133-KR-A-L', 'SET274-KR-PP-S', 'SET100-KR-PP-S', 'J0089-TP-L', 'J0082-TP-L', 'J0184-KR-A-XL', 'BTM039-PP-L', 'JNE3825-KR-L', 'JNE3534-KR-M', 'J0390-TP-XXL', 'J0345-SET-XS', 'J0418-TP-XXL', 'J0284-SKD-XL', 'BTM037-PP-M', 'JNE3042-KR-XS', 'SET214-KR-DPT-XXXL', 'JNE3456-KR-M', 'J0168-DR-M', 'JNE3825-KR-XXL', 'J0293-DR-XXL', 'J0111-TP-M', 'SET299-KR-PP-XXL', 'JNE3395-KR-XL', 'PJNE3439-KR-N-5XL', 'J0292-TP-L', 'J0350-SET-XS', 'J0212-DR-XS', 'J0307-TP-XS', 'J0330-KR-XL', 'JNE3627-KR-S', 'JNE3864-TU-S', 'J0190-TP-XXXL', 'JNE3774-KR-XXXL', 'AN211-BLACK-S', 'JNE3449-KR-M', 'J0296-DR-XXL', 'AN205-YELLOW-XL', 'J0302-DR-XL', 'J0173-DR-L', 'J0292-TP-XXXL', 'SET410-KR-NP-L', 'BL104-M', 'JNE3370-KR-L', 'JNE3875-KR-S', 'JNE3375-KR-XXXL', 'J0150-KR-M', 'J0116-TP-M', 'JNE3284-KR-XXL', 'JNE3273-KR-S', 'JNE3864-TU-XXL', 'JNE1408-KR-UDF19-A-XS', 'SET191-KR-PP-M', 'JNE3265-KR-XL', 'BTM008-B-M', 'J0331-KR-S', 'BTM008-XXXL', 'JNE3899-KR-XXL', 'J0235-SKD-L', 'SAR032', 'PSET058-KR-NP-6XL', 'BL111-XS', 'BL089-XS', 'BL098-XXL', 'JNE2251-KR-537-C-S', 'JNE3765-KR-M', 'SET299-KR-PP-XL', 'JNE3284-KR-XL', 'JNE3313-KR-A-S', 'SET275-KR-NP-XXL', 'BTM002-XXXL', 'J0254-SKD-XXL', 'CH201-RED-M', 'J0225-SKD-S', 'J0391-TP-M', 'JNE2309-KR-598-L', 'BL016-63RED-B', 'JNE3160-KR-XL', 'JNE3255-KR-M', 'JNE3284-KR-S', 'JNE3548-KR-S', 'JNE3777-KR-XS', 'JNE3736-KR-XXL', 'JNE3252-KR-S', 'JNE3862-TU-XXXL', 'JNE3030-KR-M', 'SAR036', 'SET014-KR-PP-A-XL', 'JNE3477-KR-M', 'SAR101', 'J0083-KR-XS', 'JNE3252-KR-L', 'SET436-KR-NP-S', 'J0290-CD-S', 'JNE3748-KR-S', 'JNE3489-KR-S', 'SET299-KR-PP-XS', 'JNE3725-KR-L', 'J0374-KR-XXXL', 'JNE3866-KR-S', 'SET185-KR-NP-XS', 'JNE3875-KR-XXL', 'BL096-XL', 'SET143-KR-PP-S', 'SET236-KR-PP-L', 'SET409-KR-NP-XS', 'SET162-KR-PP-XL', 'J0392-TP-L', 'JNE3477-KR-XL', 'SET131-KR-NP-XXL', 'JNE3765-KR-S', 'SET185-KR-NP-L', 'JNE3362-KR-XXXL', 'JNE3424-KR-M', 'JNE3762-KR-M', 'JNE3467-KR-S', 'J0386-KR-XXL', 'JNE3160-KR-M', 'J0418-TP-S', 'SET221-KR-NP-M', 'JNE3767-KR-XXL', 'JNE3902-KR-M', 'JNE1408-KR-UDF19-A-XXL', 'JNE3251-KR-XL', 'JNE3251-KR-M', 'J0102-SKD-S', 'J0186-SET-XS', 'NW014-ST-SR-XS', 'NW028-TP-PJ-S', 'JNE3313-KR-XXL', 'J0101-DR-S', 'J0208-DR-L', 'J0042-DR-XL', 'JNE3359-KR-XL', 'J0043-SET-S', 'JNE2294-KR-A-L', 'BTM047-PP-M', 'JNE2009-KR-310-S', 'JNE3443-KR-M', 'JNE3395-KR-L', 'J0073-KR-XXL', 'BTM042-PP-S', 'J0238-LCD-XS', 'JNE3860-DR-S', 'J0225-SKD-XXXL', 'JNE3771-KR-XL', 'SET087-KR-PP-XS', 'JNE3284-KR-M', 'JNE3672-TU-S', 'SET372-KR-PP-S', 'J0102-SKD-M', 'J0195-TP-XS', 'JNE3893-TP-XS', 'JNE3792-KR-XS', 'JNE3636-KR-XS', 'J0386-KR-XS', 'JNE3886-KR-XXL', 'JNE3251-KR-L', 'J0024-KR-M', 'JNE3897-KR-XXXL', 'SET062-KR-SP-XXL', 'SET415-KR-NP-XL', 'JNE3750-KR-XXXL', 'JNE3577-KR-XS', 'J0078-SET-XXXL', 'SET200-KR-NP-A-S', 'J0084-TP-XS', 'JNE2294-KR-A-XXL', 'SET094-KR-NP-XXL', 'JNE2324-KR-575-XXL', 'J0372-SKD-XL', 'SET026-KR-PP-A-XS', 'J0114-TP-XS', 'JNE3734-KR-M', 'JNE2131-KR-A-XXL', 'SET305-KR-DPT-XL', 'J0279-SET-L', 'SET097-KR-PP-S', 'J0235-SKD-XL', 'J0162-SKD-S', 'JNE3486-KR-XXXL', 'BL109-S', 'JNE3902-KR-XS', 'JNE3899-KR-L', 'SET210-KR-PP-XS', 'SET214-KR-DPT-XL', 'SET131-KR-NP-A-XS', 'SAR149', 'BL010-61CHIKU-B', 'JNE3629-KR-XXXL', 'SAR025', 'J0246-SKD-XXXL', 'JNE2294-KR-A-XS', 'SET372-KR-PP-L', 'J0378-SKD-XS', 'JNE3888-KR-XL', 'SET311-KR-NP-XL', 'SET311-KR-NP-XS', 'SAR039', 'SAR134', 'J0314-KR-XL', 'SAR046', 'JNE3542-KR-S', 'J0413-DR-XXXL', 'SET132-KR-NP-S', 'JNE3483-KR-XL', 'J0037-KR-XXL', 'JNE3359-KR-M', 'BTM042-PP-XXL', 'J0075-KR-XS', 'JNE2086-KR-389-XS', 'JNE1408-GREY-KR-UDF19-M', 'JNE3313-KR-XS', 'SAR053', 'JNE3363-KR-1032-XS', 'JNE3556-KR-L', 'SET091-KR-NP-XXL', 'JNE3503-KR-S', 'JNE3770-KR-XL', 'SAR056', 'JNE3366-KR-1053-A-XS', 'JNE2251-KR-537-S', 'J0100-DR-S', 'NW002-TP-PJ-XXL', 'SET185-KR-NP-S', 'BL107-XS', 'SET083-KR-PP-L', 'J0163-SKD-M', 'JNE2292-KR-588-L', 'J0145-SET-S', 'NW028-TP-PJ-XXXL', 'J0085-TP-XXL', 'JNE3445-KR-XS', 'SAR130', 'SAR097', 'J0101-DR-XS', 'JNE3736-KR-XS', 'JNE3624-KR-S', 'J0254-SKD-XL', 'SET131-KR-NP-S', 'JNE3768-KR-XL', 'AN201-RED-XXL', 'J0109-SKD-M', 'SET094-KR-NP-XS', 'SET372-KR-PP-XXL', 'SET315-KR-PP-L', 'JNE3464-KR-XXXL', 'JNE3257-KR-XXL', 'AN209-BIEGE-XXL', 'JNE3765-KR-XXXL', 'J0398-DR-XL', 'BL011-62PINK-B', 'JNE3667-TP-S', 'BTM027-NP-XXL', 'SET299-KR-PP-L', 'JNE3313-KR-M', 'J0011-LCD-A-L', 'JNE3667-TP-XS', 'BL095-XL', 'SET414-KR-NP-L', 'J0170-TP-A-M', 'BTM005-XXXL', 'JNE3369-KR-XL', 'J0120-TP-XS', 'SET311-KR-NP-S', 'JNE3748-KR-XXL', 'SAR102', 'SET194-KR-NP-XS', 'SET263-KR-NP-XL', 'SET313-KR-NP-S', 'BTM036-PP-XL', 'SET245-KR-NP-XXXL', 'JNE3364-KR-1051-XS', 'NW007-ST-CP-XL', 'JNE3403-KR-XL', 'BTM048-PP-XXXL', 'JNE3537-KR-XS', 'J0170-TP-A-L', 'JNE3555-KR-L', 'BL019-71PINK', 'JNE3486-KR-XXL', 'SET444-KR-SH-M', 'J0062-DR-M', 'SET414-KR-NP-XXXL', 'SET444-KR-SH-L', 'JNE3434-KR-XL', 'J0137-SET-XL', 'NW023-ST-SR-L', 'SET444-KR-SH-XXL', 'JNE3811-KR-XL', 'SET369-KR-NP-XL', 'JNE3484-KR-XS', 'SET444-KR-SH-S', 'J0431-DR-S', 'JNE3336-KR-S', 'SET444-KR-SH-XS', 'JNE2086-KR-389-XL', 'JNE2113-KR-381-XL', 'JNE2132-KR-398-L', 'JNE3908-KR-M', 'JNE3924-TU-L', 'JNE3621-KR-A-XXXL', 'JNE3909-KR-L', 'SET409-KR-NP-XXL', 'SET444-KR-SH-XXXL', 'JNE3906-KR-XL', 'SET444-KR-SH-XL', 'SET461-KR-NP-XL', 'JNE3900-KR-A-L', 'J0431-DR-L', 'J0434-DR-XXXL', 'JNE3656-TP-N-XL', 'JNE3885-KR-M', 'JNE3903-KR-XXXL', 'J0434-DR-XXL', 'JNE3898-KR-L', 'JNE3346-KR-XL', 'J0229-SKD-XXXL', 'SET432-KR-PP-M', 'SET338-KR-NP-XS', 'BTM005-B-L', 'SET409-KR-NP-XL', 'JNE3476-KR-XXXL', 'JNE3900-KR-A-XXL', 'JNE3744-TU-XXXL', 'JNE3413-KR-M', 'AN206-GREEN-S', 'J0378-SKD-L', 'JNE3761-KR-XXXL', 'J0244-SKD-XXL', 'BTM005-XXL', 'J0431-DR-M', 'J0294-TP-XXXL', 'J0072-KR-L', 'JNE3811-KR-XXL', 'J0374-KR-M', 'J0187-KR-XXL', 'JNE3910-KR-L', 'AN212-WHITE-XXL', 'JNE2049-KR-351-L', 'JNE2145-KR-A-XXXL', 'JNE1951-KR-155-L', 'SET003-KR-NP-A-XXL', 'JNE3891-TP-L', 'JNE3902-KR-XXL', 'AN204-PURPLE-M', 'SET414-KR-NP-XS', 'AN204-PURPLE-XXL', 'JNE3273-KR-XS', 'BL087-XS', 'SET019-KR-PP-A-S', 'JNE3910-KR-XXL', 'JNE3908-KR-XXL', 'JNE3455-KR-XL', 'MEN5029-KR-XXXL', 'SET438-KR-NP-M', 'J0429-DR-XXXL', 'J0101-DR-A-XL', 'JNE3890-TP-XL', 'SET415-KR-NP-XXL', 'JNE3896-KR-A-XL', 'SET191-KR-PP-XL', 'JNE3474-KR-E-XXXL', 'JNE3902-KR-S', 'JNE3359-KR-XXL', 'J0085-TP-L', 'JNE2294-KR-A-XXXL', 'JNE3561-KR-XXXL', 'SET340-KR-NP-M', 'J0418-TP-XL', 'JNE3889-KR-XXL', 'J0431-DR-XXL', 'J0429-DR-XXL', 'JNE3927-KR-XL', 'J0042-DR-XS', 'JNE3621-KR-A-XL', 'SAR060', 'SET431-KR-NP-L', 'SET442-KR-NP-XXXL', 'JNE2293-KR-555-XXL', 'SET437-KR-PP-XXXL', 'J0431-DR-XXXL', 'DPT052', 'JNE3924-TU-M', 'SET281-KR-PP-A-S', 'SET272-KR-PP-A-S', 'DPT041', 'DPT032', 'JNE3364-KR-1051-L', 'JNE3910-KR-XS', 'JNE3903-KR-XXL', 'J0391-TP-S', 'JNE2323-KR-574-XS', 'J0420-TP-M', 'J0314-KR-L', 'J0374-KR-XL', 'J0429-DR-XS', 'JNE3891-TP-XXL', 'JNE3909-KR-M', 'AN206-GREEN-XL', 'AN212-WHITE-XL', 'AN201-RED-XL', 'J0434-DR-L', 'JNE3888-KR-M', 'JNE3910-KR-S', 'JNE3906-KR-XXXL', 'SET271-KR-NP-XL', 'JNE3629-KR-XS', 'JNE3864-TU-XS', 'JNE3910-KR-M', 'J0429-DR-S', 'JNE3890-TP-M', 'JNE3423-KR-A-XL', 'J0420-TP-S', 'J0419-TP-XS', 'JNE3663-TP-S', 'J0434-DR-XL', 'JNE3893-TP-XL', 'J0028-KR-XS', 'J0180-DR-XS', 'AN212-WHITE-L', 'JNE3886-KR-L', 'SET415-KR-NP-S', 'CH213-BROWN-S', 'PJNE3439-KR-N-4XL', 'JNE3910-KR-XL', 'BTM003-B-L', 'J0431-DR-XS', 'J0429-DR-XL', 'JNE3336-KR-XL', 'SET410-KR-NP-M', 'SET409-KR-NP-XXXL', 'SET251-KR-PP-XXL', 'BL111-XL', 'SET437-KR-PP-XXL', 'JNE3257-KR-L', 'SET442-KR-NP-L', 'NW006-ST-SR-XS', 'JNE3903-KR-XL', 'J0417-TP-S', 'JNE3872-KR-XXXL', 'J0136-KR-XL', 'SET022-KR-SP-A-XXL', 'J0117-TP-A-XXXL', 'JNE3908-KR-XS', 'JNE3703-KR-XXXL', 'SAR028', 'JNE3897-KR-XL', 'NW036-ST-SR-L', 'JNE3460-KR-L', 'JNE3908-KR-XL', 'AN210-NAVY-XL', 'BL107-M', 'JNE3424-KR-XS', 'SET438-KR-NP-XXL', 'JNE3423-KR-A-L', 'JNE3383-KR-A-L', 'J0419-TP-XXXL', 'BL089-M', 'BL093-M', 'SET431-KR-NP-M', 'J0242-SKD-XXXL', 'SET337-KR-NP-XXL', 'CH208-MUSTARD-XXL', 'SET442-KR-NP-M', 'SAR027', 'JNE2171-KR-437-XS', 'JNE3906-KR-L', 'JNE3897-KR-S', 'SET431-KR-NP-XS', 'JNE3903-KR-XS', 'JNE3760-KR-XS', 'JNE3895-TP-M', 'JNE3862-TU-XS', 'JNE3890-TP-L', 'J0102-SKD-XXXL', 'SET410-KR-NP-XXL', 'SET281-KR-PP-A-XXXL', 'JNE3765-KR-XL', 'JNE3896-KR-A-L', 'JNE3420-KR-M', 'SET438-KR-NP-XL', 'JNE3906-KR-M', 'JNE3927-KR-XS', 'AN205-YELLOW-XXL', 'SET437-KR-PP-M', 'SET437-KR-PP-S', 'SET437-KR-PP-L', 'SET462-KR-NP-S', 'JNE3927-KR-M', 'J0136-KR-M', 'JNE3398-KR-XXXL', 'JNE2006-KR-158-S', 'JNE3811-KR-S', 'JNE3547-KR-M', 'J0037-KR-L', 'JNE3220-KR-XXL', 'JNE3621-KR-A-XXL', 'JNE3903-KR-L', 'JNE3416-KR-XL', 'BTM040-PP-M', 'J0232-SKD-M', 'SET226-KR-PP-XS', 'JNE3908-KR-S', 'JNE3909-KR-XL', 'JNE3612-KR-XS', 'JNE3878-KR-XS', 'J0241-SKD-M', 'SET431-KR-NP-S', 'JNE3862-TU-XXL', 'SET431-KR-NP-XXXL', 'NW006-ST-SR-M', 'J0073-KR-S', 'JNE3924-TU-XS', 'NW033-ST-CP-L', 'JNE3768-KR-L', 'J0279-SET-XXXL', 'SET338-KR-NP-XXL', 'SET461-KR-NP-XXL', 'J0388-TP-XXL', 'SET449-KR-NP-S', 'J0429-DR-M', 'SET445-KR-NP-S', 'SET060-KR-NP-XL', 'CH203-MAROON-S', 'JNE3441-KR-B-XS', 'JNE3899-KR-A-M', 'JNE3908-KR-L', 'SET432-KR-PP-XL', 'JNE3893-TP-XXXL', 'JNE3062-KR-M', 'SET263-KR-NP-S', 'J0420-TP-L', 'J0434-DR-S', 'SET404-KR-NP-XXXL', 'BL107-XXL', 'PJNE3445-KR-N-5XL', 'J0374-KR-XS', 'J0279-SET-XXL', 'NW033-ST-CP-XL', 'CH202-ORANGE-XXL', 'SET432-KR-PP-L', 'J0303-KR-XS', 'JNE3450-KR-XL', 'J0323-CD-M', 'J0170-TP-A-S', 'JNE3897-KR-M', 'SET446-KR-NP-XS', 'JNE3762-KR-XS', 'JNE3504-KR-XXXL', 'J0397-DR-XS', 'CH206-GREEN-M', 'CH205-YELLOW-XL', 'JNE3872-KR-L', 'AN212-WHITE-S', 'JNE3365-KR-1052-S', 'JNE3423-KR-A-XXL', 'JNE3899-KR-A-S', 'SET461-KR-NP-XS', 'SET449-KR-NP-M', 'JNE3030-KR-S', 'BTM048-PP-XXL', 'SAR182', 'JNE3628-KR-XXL', 'JNE3617-KR-M', 'JNE3777-KR-S', 'JNE3765-KR-XXL', 'J0101-DR-A-M', 'JNE3483-KR-M', 'SET262-KR-NP-A-XS', 'SET281-KR-PP-A-XS', 'JNE3403-KR-XXL', 'JNE3909-KR-S', 'JNE3257-KR-XL', 'SET301-KR-PP-XL', 'JNE3576-KR-L', 'JNE3615-KR-XXL', 'JNE3750-KR-XS', 'J0380-SKD-XS', 'SET431-KR-NP-XL', 'J0115-TP-XXL', 'JNE2307-KR-572-XL', 'J0330-KR-M', 'J0226-SKD-XL', 'J0165-TP-XXXL', 'JNE3866-KR-XS', 'JNE3910-KR-XXXL', 'JNE3441-KR-B-XXXL', 'JNE3688-TU-S', 'J0145-SET-XXXL', 'SET410-KR-NP-S', 'BTM030-NP-XL', 'JNE3483-KR-XXL', 'J0163-SKD-XXL', 'SET014-KR-PP-A-XS', 'AN212-WHITE-M', 'J0127-SKD-M', 'JNE3872-KR-M', 'J0109-SKD-XS', 'MEN5005-KR-M', 'CH207-PINK-L', 'J0431-DR-XL', 'JNE3907-KR-L', 'SET111-KR-SP-XL', 'SET247-KR-SHA-XXL', 'J0371-SKD-M', 'SET336-KR-NP-XXL', 'JNE2251-KR-537-C-XS', 'JNE3903-KR-M', 'SET289-KR-NP-XXL', 'JNE3886-KR-XL', 'JNE3892-TP-S', 'J0187-KR-L', 'JNE3896-KR-A-XXXL', 'JNE3900-KR-A-XXXL', 'SET205-KR-DPT-A-XL', 'JNE3621-KR-A-S', 'JNE3834-KR-XXXL', 'BL095-M', 'J0331-KR-XS', 'JNE3423-KR-A-S', 'BTM037-PP-S', 'J0245-SKD-XS', 'JNE3571-KR-XXXL', 'SET306-KR-PP-S', 'AN204-PURPLE-S', 'JNE3909-KR-XXL', 'J0174-TP-S', 'J0019-SET-M', 'BTM038-PP-XS', 'J0091-TP-S', 'SET091-KR-NP-XXXL', 'SET373-KR-PP-L', 'JNE2145-KR-A-L', 'SET234-KR-PP-M', 'PJNE3445-KR-N-4XL', 'JNE3791-DR-XS', 'J0057-DR-S', 'J0005-DR-B-M', 'JNE3485-KR-M', 'JNE2145-KR-A-XL', 'SET358-KR-NP-XL', 'JNE3891-TP-M', 'SET004-KR-SP-A-XS', 'SET410-KR-NP-XL', 'JNE3547-KR-XL', 'SET289-KR-NP-S', 'JNE3369-KR-S', 'SET373-KR-PP-M', 'JNE3424-KR-XXL', 'SET301-KR-PP-L', 'JNE3486-KR-L', 'JNE3719-KR-XL', 'JNE3389-KR-XS', 'JNE3491-KR-S', 'JNE3780-KR-M', 'JNE3627-KR-XS', 'J0417-TP-XS', 'J0074-TP-XS', 'JNE3460-KR-S', 'J0152-DR-M', 'SET432-KR-PP-XXL', 'BTM003-XXXL', 'JNE3517-KR-M', 'JNE3486-KR-S', 'AN207-PINK-S', 'JNE3899-KR-A-XL', 'J0279-SET-M', 'JNE3890-TP-XXXL', 'SET431-KR-NP-XXL', 'JNE2113-KR-381-L', 'JNE3644-TP-N-L', 'J0391-TP-XS', 'JNE3770-KR-M', 'J0246-SKD-XS', 'AN211-BLACK-XL', 'JNE3364-KR-1051-M', 'JNE3460-KR-XXL', 'JNE3886-KR-M', 'JNE3575-KR-XS', 'SAR037', 'J0417-TP-M', 'JNE3820-KR-XXXL', 'JNE2131-KR-A-XXXL', 'J0137-SET-M', 'NW036-ST-SR-XXL', 'SET337-KR-NP-XL', 'JNE3516-KR-E-XS', 'CH209-BIEGE-L', 'SAR148', 'BL085-S', 'SET266-KR-NP-S', 'JNE2131-KR-A-XL', 'SET192-KR-NP-XL', 'JNE3364-KR-1051-S', 'J0279-SET-XL', 'SAR059', 'JNE3416-KR-L', 'JNE3432-KR-M', 'JNE3432-KR-S', 'JNE3564-KR-XS', 'BTM048-PP-L', 'JNE3447-KR-XXXL', 'J0419-TP-XXL', 'JNE3401-KR-XXXL', 'JNE3872-KR-XXL', 'JNE3464-KR-XXL', 'SET201-KR-NP-A-XL', 'JNE2131-KR-A-M', 'SAR030', 'JNE3296-KR-M', 'J0163-SKD-XXXL', 'BL098-M', 'J0238-LCD-S', 'JNE3907-KR-S', 'JNE3907-KR-XS', 'JNE3370-KR-XXL', 'JNE3663-TP-L', 'JNE3625-DR-XL', 'SET373-KR-PP-XS', 'J0052-KR-XS', 'J0172-TP-XXL', 'JNE3665-TP-XXL', 'JNE3789-KR-L', 'JNE3432-KR-XS', 'JNE3516-KR-E-XXXL', 'JNE3694-KR-XXL', 'JNE3535-KR-XS', 'SET301-KR-PP-XXL', 'J0110-SKD-L', 'JNE3555-KR-XXXL', 'JNE3743-TP-M', 'SET414-KR-NP-M', 'PJNE3439-KR-N-6XL', 'JNE3725-KR-M', 'JNE3520-KR-XXL', 'JNE3520-KR-M', 'J0079-SKD-XL', 'JNE3438-KR-M', 'BL087-S', 'JNE3417-KR-M', 'JNE3534-KR-XL', 'JNE09210-PINK-SR-JP8101RNV-K', 'SAR113', 'NW035-ST-CP-XL', 'SAR159', 'JNE3394-KR-S', 'J0121-TP-S', 'BTM026-NP-XXL', 'J0291-JS-L', 'JNE3687-TU-S', 'SET211-KR-DPT-XXL', 'JNE09209-MULTI-SR-JP8101RMV-K', 'J0194-DR-M', 'J0039-SET-XS', 'J0319-KR-S', 'J0246-SKD-L', 'JNE2294-KR-A-S', 'JNE3559-KR-M', 'SET247-KR-SHA-XXXL', 'JNE3234-KR-M', 'BL087-L', 'J0034-SET-S', 'SET432-KR-PP-S', 'J0109-SKD-S', 'NW032-ST-CP-S', 'JNE3788-KR-XS', 'SET270-KR-PP-M', 'BL025-74BLACK', 'JNE3892-TP-XS', 'SET066-KR-PP-M', 'JNE2251-KR-537-C-XL', 'J0070-KR-S', 'JNE3678-TU-XS', 'J0116-TP-XS', 'SET232-KR-PP-XS', 'J0196-TP-XS', 'JNE3889-KR-S', 'JNE3896-KR-XL', 'BL103-M', 'J0286-KR-L', 'J0319-KR-XL', 'JNE3398-KR-XL', 'JNE3370-KR-S', 'JNE3678-TU-XXL', 'SET045-KR-NP-M']}
2023-10-30 09:57:00,839 - INFO - Executed in: 7.6728739738464355s
2023-10-30 09:57:00,840 - INFO - 127.0.0.1 - - [30/Oct/2023 09:57:00] "GET /ask/List%20all%20unique%20'SKU'%20values%20in%20the%20dataset. HTTP/1.1" 200 -
2023-10-30 09:58:42,600 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 09:58:42,601 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 09:59:02,254 - INFO - Question: List all unique 'SKU' values in the dataset.
2023-10-30 09:59:02,301 - INFO - Running PandasAI with openai LLM...
2023-10-30 09:59:02,302 - INFO - Prompt ID: 6990c888-9317-4fdb-add9-801a55b7c751
2023-10-30 09:59:02,359 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
2,5254886092,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping ...,True,,
0,2295146529,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
1,3759335602,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,Amazon PLCC Free-Finan...,False,Easy Ship,
3,8743320509,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
4,1756122549,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
</dataframe>

<conversation>
User 1: List all unique 'SKU' values in the dataset.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 09:59:09,934 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0]
    
    # Process
    unique_skus = df['SKU'].unique()
    
    # Analyze
    result = {
        "type": "dataframe",
        "value": pd.DataFrame(unique_skus, columns=['SKU'])
    }
    
    return result
```

2023-10-30 09:59:09,936 - INFO - Saving charts to plots/6990c888-9317-4fdb-add9-801a55b7c751.png
2023-10-30 09:59:09,940 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/6990c888-9317-4fdb-add9-801a55b7c751.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/6990c888-9317-4fdb-add9-801a55b7c751.png" }
    """
    df = dfs[0]
    unique_skus = df['SKU'].unique()
    result = {'type': 'dataframe', 'value': pd.DataFrame(unique_skus, columns=['SKU'])}
    return result
        ```
2023-10-30 09:59:09,986 - INFO - Answer: {'type': 'dataframe', 'value':                   SKU
0      SET389-KR-NP-S
1     JNE3781-KR-XXXL
2       JNE3371-KR-XL
3          J0341-DR-L
4     JNE3671-TU-XXXL
...               ...
7190      J0319-KR-XL
7191    JNE3398-KR-XL
7192     JNE3370-KR-S
7193   JNE3678-TU-XXL
7194   SET045-KR-NP-M

[7195 rows x 1 columns]}
2023-10-30 09:59:09,986 - INFO - Executed in: 7.732161998748779s
2023-10-30 09:59:09,999 - INFO - 127.0.0.1 - - [30/Oct/2023 09:59:09] "GET /ask/List%20all%20unique%20'SKU'%20values%20in%20the%20dataset. HTTP/1.1" 200 -
2023-10-30 10:01:57,770 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 10:01:57,770 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 10:02:02,842 - INFO - Question: List all unique 'SKU' values in the dataset.
2023-10-30 10:02:02,884 - INFO - Running PandasAI with openai LLM...
2023-10-30 10:02:02,885 - INFO - Prompt ID: eb0c8563-1d2e-4b54-853e-670764f7ffb9
2023-10-30 10:02:02,936 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
4,0104064071,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
3,3106480889,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
2,1350073013,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
0,4420969440,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
1,5383373807,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
</dataframe>

<conversation>
User 1: List all unique 'SKU' values in the dataset.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 10:02:10,436 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Extract the SKU column from the dataframe
    sku_values = dfs[0]['SKU'].unique().tolist()
    
    # Return the unique SKU values as a list
    return {"type": "list", "value": sku_values}
```

2023-10-30 10:02:10,438 - INFO - Saving charts to plots/eb0c8563-1d2e-4b54-853e-670764f7ffb9.png
2023-10-30 10:02:10,441 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/eb0c8563-1d2e-4b54-853e-670764f7ffb9.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/eb0c8563-1d2e-4b54-853e-670764f7ffb9.png" }
    """
    sku_values = dfs[0]['SKU'].unique().tolist()
    return {'type': 'list', 'value': sku_values}
        ```
2023-10-30 10:02:10,488 - INFO - Answer: {'type': 'list', 'value': ['SET389-KR-NP-S', 'JNE3781-KR-XXXL', 'JNE3371-KR-XL', 'J0341-DR-L', 'JNE3671-TU-XXXL', 'SET264-KR-NP-XL', 'J0095-SET-L', 'JNE3405-KR-S', 'SET200-KR-NP-A-XXXL', 'JNE3461-KR-XXL', 'JNE3160-KR-G-S', 'JNE3500-KR-XS', 'JNE3405-KR-XS', 'SET182-KR-DH-XS', 'J0351-SET-L', 'PJNE3368-KR-6XL', 'JNE3721-KR-XXL', 'JNE3405-KR-XL', 'JNE3697-KR-XXL', 'SET254-KR-NP-XS', 'JNE3795-KR-XXXL', 'SET345-KR-NP-M', 'JNE3373-KR-L', 'SET291-KR-PP-M', 'MEN5002-KR-L', 'NW030-TP-PJ-XS', 'JNE3415-KR-XXXL', 'PJNE2199-KR-N-4XL', 'JNE3567-KR-M', 'JNE2132-KR-398-XXXL', 'J0341-DR-S', 'MEN5009-KR-XL', 'J0011-LCD-M', 'JNE3766-KR-M', 'JNE3373-KR-XL', 'MEN5001-KR-XL', 'SET345-KR-NP-L', 'JNE3787-KR-S', 'JNE3543-KR-S', 'JNE3405-KR-L', 'J0211-DR-XXL', 'J0401-DR-XXXL', 'JNE2153-KR-278-A-M', 'SET360-KR-NP-M', 'SET268-KR-NP-L', 'SET183-KR-DH-S', 'J0230-SKD-L', 'JNE3744-TU-S', 'JNE3510-KR-S', 'JNE3405-KR-M', 'J0186-SET-S', 'J0003-SET-M', 'SET282-KR-PP-M', 'JNE1407-BLACK-KR-UDF18-XL', 'J0301-TP-L', 'JNE3869-DR-S', 'SET324-KR-NP-XS', 'SET279-LC-S', 'JNE2014-KR-178-XXL', 'NW005-ST-PJ-XL', 'JNE2270-KR-487-A-M', 'JNE3579-KR-M', 'SET347-KR-NP-XS', 'SET264-KR-NP-M', 'JNE3373-KR-XXL', 'SET333-KR-DPT-XXL', 'JNE3645-TP-N-L', 'SET233-KR-PP-L', 'J0381-SKD-XXXL', 'JNE3068-KR-A-XL', 'JNE3718-KR-M', 'SET386-KR-NP-S', 'JNE3745-KR-XXL', 'JNE3467-KR-XL', 'JNE3721-KR-L', 'JNE3405-KR-XXL', 'SET295-KR-NP-XXXL', 'JNE3861-DR-XL', 'SET288-KR-NP-XXXL', 'SET394-KR-NP-XXXL', 'SET397-KR-NP-XXXL', 'MEN5002-KR-XXL', 'SET377-KR-NP-M', 'JNE3510-KR-M', 'BTM038-PP-XXXL', 'J0343-DR-M', 'J0341-DR-XL', 'J0295-DR-XXL', 'JNE3560-KR-M', 'J0333-DR-XXXL', 'SET389-KR-NP-M', 'JNE3801-KR-XXXL', 'SET098-KR-PP-M', 'MEN5013-KR-L', 'J0003-SET-L', 'JNE3718-KR-XXXL', 'SET347-KR-NP-S', 'JNE3391-KR-XXL', 'SET277-KR-NP-XXL', 'J0293-DR-S', 'SET154-KR-NP-XL', 'JNE3439-KR-XL', 'SET291-KR-PP-XL', 'SET293-KR-NP-M', 'JNE3648-TP-N-M', 'JNE3334-KR-M', 'SET331-KR-NP-XS', 'SET265-KR-NP-S', 'JNE3718-KR-S', 'SET397-KR-NP  -M', 'JNE3861-DR-XXL', 'J0335-DR-XL', 'J0335-DR-XXL', 'JNE1525-KR-UDF19-A-S', 'JNE3654-TP-XL', 'JNE3261-KR-S', 'SET324-KR-NP-S', 'SET332-KR-PP-S', 'SET324-KR-NP-XXXL', 'SET280-KR-PP-S', 'JNE3618-KR-XXL', 'SET304-KR-DPT-XS', 'MEN5032-KR-XXXL', 'SET110-KR-PP-XXL', 'SET324-KR-NP-M', 'SET269-KR-NP-XXXL', 'JNE3794-KR-M', 'JNE3291-KR-XXL', 'JNE3440-KR-N-XXXL', 'JNE2270-KR-487-A-XXL', 'JNE3261-KR-M', 'SET110-KR-PP-M', 'J0300-TP-XXXL', 'JNE3810-KR-S', 'JNE3461-KR-XL', 'JNE3429-KR-XL', 'JNE3710-DR-S', 'J0113-TP-XS', 'SET355-KR-PP-M', 'J0009-SKD-S', 'J0248-KR-DPT-XL', 'JNE3560-KR-XL', 'JNE3373-KR-XXXL', 'SET398-KR-PP-L', 'NW032-ST-CP-XXL', 'SET361-KR-NP-S', 'JNE3797-KR-L', 'JNE3887-KR-XL', 'JNE3870-DR-XXL', 'SET345-KR-NP-XS', 'NW013-ST-SR-L', 'JNE2014-KR-178-XL', 'JNE3612-KR-S', 'PJNE2100-KR-N-6XL', 'SET398-KR-PP-XXXL', 'J0006-SET-M', 'JNE3437-KR-S', 'JNE3465-KR-S', 'J0373-KR-XXXL', 'J0344-TP-XXXL', 'J0118-TP-XXL', 'SET200-KR-NP-A-XS', 'JNE1998-KR-311-XXL', 'MEN5004-KR-XXXL', 'SET345-KR-NP-XXL', 'JNE3654-TP-L', 'J0344-TP-L', 'J0334-TP-L', 'J0230-SKD-S', 'JNE1233-BLUE-KR-031-XXL', 'J0295-DR-M', 'SET324-KR-NP-L', 'J0147-SET-XL', 'J0308-DR-L', 'NW030-TP-PJ-L', 'SET360-KR-NP-XL', 'PJNE3373-KR-N-6XL', 'JNE3449-KR-XXL', 'JNE3786-KR-S', 'J0003-SET-XXL', 'J0314-KR-M', 'J0341-DR-M', 'PJNE3068-KR-4XL', 'J0340-TP-M', 'JNE3687-TU-M', 'J0376-SKD-L', 'J0198-TP-S', 'JNE3453-KR-S', 'SET398-KR-PP-M', 'NW033-ST-CP-XXXL', 'NW037-TP-SR-XXXL', 'JNE3618-KR-M', 'SET290-KR-DPT-M', 'JNE3568-KR-XXL', 'J0003-SET-XXXL', 'JNE2153-KR-278-A-S', 'JNE3645-TP-N-XS', 'JNE3662-TP-XS', 'JNE3440-KR-N-L', 'SET331-KR-NP-S', 'J0301-TP-M', 'MEN5004-KR-XL', 'J0352-KR-S', 'JNE3160-KR-G-XXL', 'JNE3798-KR-M', 'JNE3690-TU-XL', 'SET355-KR-PP-XXL', 'SET317-KR-PP-XXL', 'SET375-KR-NP-XL', 'JNE3371-KR-M', 'SET116-KR-NP-XL', 'SET147-KR-NP-XL', 'SET397-KR-NP-XL', 'SET300-KR-NP-L', 'JNE3384-KR-M', 'JNE3291-KR-XL', 'SET291-KR-PP-L', 'JNE3399-KR-L', 'JNE3440-KR-N-XS', 'SET363-KR-NP-XXL', 'J0348-SET-S', 'J0399-DR-M', 'JNE3797-KR-M', 'JNE3440-KR-N-M', 'JNE3802-KR-M', 'J0285-SKD-M', 'SET322-KR-SHA-XL', 'MEN5021-KR-XL', 'PJ0096-KR-N-5XL', 'JNE3461-KR-M', 'SET383-KR-NP-L', 'J0002-SKD-XXXL', 'SET344-KR-NP-XXXL', 'JNE3465-KR-XXL', 'SET324-KR-NP-XXL', 'SET184-KR-PP-XXXL', 'J0008-SKD-S', 'J0008-SKD-XXL', 'J0013-SKD-XXL', 'J0208-DR-S', 'SET344-KR-NP-XL', 'NW001-TP-PJ-XXL', 'SET304-KR-DPT-S', 'SET265-KR-NP-XL', 'SET004-KR-SP-A-S', 'J0012-SKD-M', 'JNE3465-KR-M', 'SET374-KR-NP-XS', 'JNE3567-KR-XL', 'J0041-SET-M', 'JNE3611-KR-XL', 'SET384-KR-NP-XS', 'JNE3635-KR-L', 'J0118-TP-XXXL', 'JNE3654-TP-XS', 'JNE3652-TP-N-XL', 'J0339-DR-L', 'SET303-KR-NP-XL', 'JNE3396-KR-XXXL', 'JNE3256-KR-XXXL', 'J0340-TP-XS', 'J0335-DR-S', 'J0008-SKD-L', 'SET268-KR-NP-XS', 'J0280-SKD-S', 'J0339-DR-M', 'JNE3564-KR-XXXL', 'SET182-KR-DH-L', 'SET128-KR-DH-M', 'JNE3567-KR-XXL', 'JNE3568-KR-L', 'JNE3881-DR-XXXL', 'JNE3639-TP-N-XXL', 'SET291-KR-PP-XXL', 'JNE3613-KR-XXL', 'JNE3368-KR-XXXL', 'JNE3522-KR-XXL', 'JNE3741-KR-XXL', 'SET293-KR-NP-S', 'SET388-KR-NP-L', 'J0008-SKD-XS', 'SET197-KR-NP-L', 'MEN5029-KR-M', 'J0341-DR-XS', 'J0010-LCD-L', 'JNE3800-KR-M', 'SET183-KR-DH-M', 'J0341-DR-XXL', 'J0341-DR-XXXL', 'J0331-KR-XXXL', 'JNE3752-KR-XXXL', 'SET369-KR-NP-XXL', 'JNE3373-KR-XS', 'JNE3805-KR-L', 'JNE3537-KR-M', 'J0003-SET-XL', 'SET436-KR-NP-XXXL', 'SET264-KR-NP-XXL', 'JNE3567-KR-XS', 'J0329-KR-XXXL', 'JNE3568-KR-XL', 'SET341-KR-NP-L', 'JNE3543-KR-M', 'JNE3365-KR-1052-A-S', 'JNE3759-KR-XL', 'MEN5001-KR-L', 'J0098-TP-XS', 'SET226-KR-PP-L', 'SET380-KR-NP-XXXL', 'MEN5009-KR-M', 'MEN5011-KR-M', 'MEN5032-KR-S', 'SET359-KR-NP-XXL', 'J0199-SET-XXXL', 'J0401-DR-L', 'J0003-SET-XS', 'J0308-DR-XL', 'PJNE3252-KR-N-6XL', 'JNE3752-KR-M', 'SET217-KR-PP-XXXL', 'JNE3799-KR-XL', 'JNE3294-KR-S', 'SET356-KR-NP-XXXL', 'JNE2014-KR-178-XXXL', 'J0401-DR-XS', 'SET365-KR-NP-L', 'JNE3405-KR-XXXL', 'J0230-SKD-XXL', 'JNE3465-KR-XXXL', 'SET265-KR-NP-M', 'JNE3288-KR-M', 'SET316-KR-DPT-M', 'SET268-KR-NP-S', 'JNE3800-KR-XXL', 'JNE2270-KR-487-A-L', 'MEN5024-KR-M', 'MEN5023-KR-XL', 'JNE3797-KR-XS', 'JNE3515-KR-XL', 'J0225-SKD-XXL', 'JNE3461-KR-L', 'JNE3618-KR-XS', 'PJNE3405-KR-N-5XL', 'JNE3500-KR-S', 'JNE3368-KR-XXL', 'JNE2270-KR-487-A-XL', 'JNE3568-KR-S', 'J0096-KR-S', 'SET319-KR-NP-S', 'J0415-DR-L', 'JNE3718-KR-XXL', 'SET014-KR-PP-XXL', 'SET408-KR-NP-XXL', 'J0254-SKD-XS', 'SAR114', 'J0010-LCD-XS', 'SET186-KR-DH-K-M', 'JNE3819-KR-L', 'J0335-DR-L', 'SET334-KR-NP-XXL', 'JNE3470-KR-XS', 'JNE3619-KR-XS', 'J0283-SET-XL', 'JNE3440-KR-N-XL', 'JNE3787-KR-XXL', 'SET282-KR-PP-XXL', 'JNE3691-TU-L', 'JNE3727-KR-XXL', 'JNE3634-KR-XL', 'JNE3675-TU-L', 'JNE2199-KR-411-A-XXL', 'SET184-KR-PP-XXL', 'JNE3468-KR-L', 'J0213-TP-L', 'BL110-XL', 'J0008-SKD-XL', 'SET288-KR-NP-XXL', 'SET110-KR-PP-L', 'MEN5031-KR-XXXL', 'JNE3421-KR-N-M', 'SET351-KR-NP-L', 'SET337-KR-NP-L', 'MEN5021-KR-XXL', 'J0338-DR-L', 'JNE3364-KR-1051-A-L', 'JNE2153-KR-278-A-XL', 'JNE3487-KR-XXL', 'JNE3865-TP-XXXL', 'SET291-KR-PP-XXXL', 'JNE3704-KR-L', 'J0378-SKD-XXL', 'JNE3721-KR-XL', 'J0308-DR-XXL', 'SET398-KR-PP-XXL', 'J0157-DR-S', 'JNE3799-KR-S', 'JNE2265-KR-501-S', 'JNE3401-KR-M', 'SET332-KR-PP-L', 'SET345-KR-NP-XL', 'JNE1525-KR-UDF19-A-XL', 'J0373-KR-M', 'JNE3449-KR-XXXL', 'J0006-SET-L', 'SET228-KR-PP-A-XXXL', 'MEN5023-KR-S', 'SET388-KR-NP-S', 'SET333-KR-DPT-XL', 'SET172-KR-PP-B-M', 'SET268-KR-NP-XL', 'SET319-KR-NP-XL', 'SET378-KR-NP-XS', 'SET344-KR-NP-S', 'MEN5002-KR-M', 'MEN5006-KR-XXL', 'SET363-KR-NP-XL', 'JNE3794-KR-XXXL', 'SET131-KR-NP-A-XXL', 'SET203-KR-DPT-S', 'SET098-KR-PP-XL', 'JNE3614-KR-M', 'J0201-TP-L', 'SET201-KR-NP-A-XXL', 'NW030-TP-PJ-XXL', 'SET273-KR-NP-XXXL', 'JNE3690-TU-L', 'J0247-SKD-S', 'SET347-KR-NP-XXXL', 'J0386-KR-XXXL', 'J0342-TP-L', 'SET363-KR-NP-L', 'J0342-TP-M', 'J0198-TP-XXXL', 'JNE3500-KR-XXL', 'JNE3510-KR-XL', 'J0005-DR-XXL', 'SET360-KR-NP-XXL', 'SET110-KR-PP-S', 'J0416-DR-S', 'SET310-KR-NP-XXL', 'SET188-KR-NP-XS', 'J0096-KR-XS', 'SET323-KR-NP-XXL', 'PJNE2100-KR-N-5XL', 'PJNE3068-KR-5XL', 'J0196-TP-XXL', 'SET187-KR-DH-XL', 'SET389-KR-NP-XL', 'SAR040', 'J0372-SKD-L', 'J0376-SKD-S', 'JNE3518-KR-M', 'J0095-SET-XXXL', 'NW004-TP-PJ-XXXL', 'J0167-KR-S', 'SET374-KR-NP-XXXL', 'SET331-KR-NP-M', 'SET356-KR-NP-L', 'SET293-KR-NP-XXL', 'SET375-KR-NP-XXL', 'JNE3273-KR-XXL', 'SET331-KR-NP-L', 'JNE3518-KR-XL', 'JNE3476-KR-XL', 'JNE3738-KR-XXXL', 'JNE3465-KR-XS', 'JNE3463-KR-XXXL', 'MEN5032-KR-XXL', 'SET380-KR-NP-L', 'J0230-SKD-M', 'JNE3611-KR-XXXL', 'JNE3784-KR-M', 'SET114-KR-PP-XS', 'J0385-KR-M', 'SET347-KR-NP-L', 'JNE3437-KR-XXL', 'JNE3065-KR-XXL', 'J0343-DR-XXL', 'J0119-TP-XL', 'J0334-TP-XL', 'J0236-SKD-XXL', 'J0126-SKD-XXXL', 'J0230-SKD-XL', 'SET171-KR-NP-M', 'JNE3365-KR-1052-A-XXXL', 'J0012-SKD-XXL', 'J0308-DR-M', 'J0117-TP-XXL', 'SET265-KR-NP-XS', 'SET433-KR-NP-XL', 'JNE3769-KR-L', 'JNE3468-KR-XXXL', 'J0154-DR-XXL', 'J0154-DR-XS', 'SET268-KR-NP-M', 'MEN5019-KR-XXXL', 'SET333-KR-DPT-XS', 'SET110-KR-PP-XXXL', 'PJNE2171-KR-N-5XL', 'SET310-KR-NP-S', 'SET219-KR-PP-XXXL', 'J0096-KR-XL', 'JNE3562-KR-XXL', 'JNE3745-KR-S', 'JNE3795-KR-XS', 'SET397-KR-NP-XXL', 'JNE3365-KR-1052-A-M', 'SET145-KR-NP-S', 'SET220-KR-PP-XL', 'JNE3371-KR-XXXL', 'JNE3487-KR-XXXL', 'JNE3702-KR-XXXL', 'JNE3461-KR-XXXL', 'JNE3739-KR-L', 'SET265-KR-NP-L', 'SET343-KR-NP-XXL', 'JNE3534-KR-XS', 'J0094-KR-M', 'SET364-KR-NP-XXL', 'JNE2265-KR-501-XL', 'JNE3690-TU-S', 'SET347-KR-NP-XL', 'JNE1998-KR-311-S', 'JNE3715-KR-S', 'BL003-50BLACK', 'MEN5005-KR-XXXL', 'MEN5028-KR-XXL', 'J0215-BL-L', 'JNE3714-KR-L', 'PJNE2199-KR-N-6XL', 'JNE3634-KR-M', 'JNE3421-KR-N-L', 'SET285-KR-SHA-XS', 'JNE3394-KR-A-XL', 'SET356-KR-NP-XL', 'JNE3468-KR-XXL', 'J0343-DR-XXXL', 'J0380-SKD-XXXL', 'J0382-SKD-XL', 'PJNE3399-KR-N-6XL', 'PJNE3068-KR-6XL', 'JNE3468-KR-XL', 'J0236-SKD-S', 'JNE3799-KR-XS', 'SET121-KR-NP-XS', 'J0202-TP-XXL', 'J0014-LCD-S', 'JNE3396-KR-XL', 'JNE3609-KR-XXL', 'JNE3775-KR-S', 'J0301-TP-XXL', 'JNE3659-TP-N-L', 'JNE3652-TP-N-L', 'SET192-KR-NP-XXXL', 'J0336-TP-XXXL', 'SET187-KR-DH-M', 'JNE3409-KR-S', 'SET345-KR-NP-S', 'JNE3800-KR-XL', 'J0228-SKD-S', 'J0119-TP-XXL', 'JNE3562-KR-XL', 'JNE3818-KR-M', 'JNE3712-TP-N-M', 'JNE3423-KR-XL', 'J0023-TP-XXL', 'JNE2032-KR-205-XXXL', 'JNE3560-KR-L', 'JNE3706-DR-L', 'SET398-KR-PP-XS', 'J0294-TP-XS', 'J0095-SET-XXL', 'JNE3463-KR-L', 'JNE3546-KR-L', 'JNE3764-KR-XL', 'SET331-KR-NP-XXXL', 'J0278-SET-XXXL', 'SET319-KR-NP-XXXL', 'J0117-TP-S', 'JNE3870-DR-XL', 'JNE3784-KR-L', 'SET287-KR-NP-M', 'JNE3567-KR-L', 'J0372-SKD-M', 'J0139-KR-XXXL', 'J0097-KR-XXXL', 'JNE3399-KR-XL', 'SET182-KR-DH-XXXL', 'SET304-KR-DPT-XL', 'SET356-KR-NP-XXL', 'SET110-KR-PP-XS', 'JNE3722-KR-L', 'JNE3480-KR-M', 'SET014-KR-PP-M', 'MEN5007-KR-M', 'J0339-DR-XL', 'JNE3784-KR-XXXL', 'JNE3894-TP-M', 'JNE3543-KR-XL', 'MEN5027-KR-XL', 'MEN5006-KR-XL', 'JNE3806-KR-L', 'JNE3870-DR-XXXL', 'SET349-KR-NP-XS', 'JNE3465-KR-XL', 'J0343-DR-XL', 'MEN5021-KR-M', 'MEN5031-KR-S', 'SET098-KR-PP-S', 'SET278-KR-NP-S', 'JNE3294-KR-XXL', 'SET363-KR-NP-M', 'SET282-KR-PP-XXXL', 'J0414-DR-XXXL', 'JNE3506-KR-XXL', 'MEN5001-KR-M', 'MEN5022-KR-M', 'MEN5023-KR-M', 'MEN5030-KR-M', 'MEN5003-KR-XXXL', 'JNE3660-TP-N-S', 'JNE3407-KR-S', 'SET359-KR-NP-L', 'J0377-SKD-XXXL', 'JNE3818-KR-XXL', 'JNE3412-KR-XXL', 'JNE3757-KR-XXL', 'JNE3805-KR-S', 'J0308-DR-XXXL', 'SET184-KR-PP-S', 'JNE3825-KR-M', 'BL017-63BLACK', 'J0098-TP-XXL', 'JNE2171-KR-437-S', 'JNE3802-KR-L', 'PJNE3399-KR-N-4XL', 'J0349-SET-XL', 'PJNE3440-KR-N-5XL', 'JNE3579-KR-L', 'JNE3373-KR-M', 'J0139-KR-XXL', 'MEN5006-KR-L', 'J0285-SKD-S', 'JNE3724-KR-XL', 'NW037-TP-SR-L', 'J0334-TP-S', 'BL001-50PINK', 'SET098-KR-PP-XXL', 'SET388-KR-NP-XXXL', 'NW034-TP-PJ-XXXL', 'JNE3639-TP-N-XL', 'MEN5028-KR-XL', 'MEN5011-KR-XL', 'JNE3718-KR-L', 'SET266-KR-NP-L', 'SET048-KR-NP-L', 'J0210-DR-XL', 'J0095-SET-XL', 'SET342-KR-NP-N-XXL', 'JNE3487-KR-L', 'JNE3651-TP-N-M', 'J0002-SKD-XL', 'J0004-SKD-XL', 'J0234-SKD-L', 'J0236-SKD-L', 'J0010-LCD-S', 'J0247-SKD-L', 'JNE3721-KR-XS', 'JNE3160-KR-G-XXXL', 'MEN5008-KR-XXL', 'BL103-XL', 'MEN5029-KR-XL', 'J0281-SKD-XS', 'JNE3861-DR-M', 'JNE3739-KR-XL', 'J0349-SET-XXL', 'SET183-KR-DH-XXXL', 'JNE3865-TP-XL', 'SET199-KR-NP-L', 'J0006-SET-XXXL', 'JNE3334-KR-XXL', 'J0004-SKD-XXXL', 'JNE3564-KR-XXL', 'JNE3534-KR-XXXL', 'JNE3620-KR-L', 'JNE3795-KR-S', 'SET358-KR-NP-XXL', 'SET332-KR-PP-XL', 'JNE3691-TU-M', 'J0334-TP-M', 'JNE2205-KR-467-A-XXXL', 'JNE3618-KR-L', 'J0003-SET-S', 'SET364-KR-NP-L', 'SET264-KR-NP-XXXL', 'SET315-KR-PP-XL', 'J0332-DR-XXL', 'J0336-TP-M', 'JNE3805-KR-M', 'J0158-DR-XL', 'SET269-KR-NP-S', 'JNE2153-KR-278-A-XS', 'PJNE3607-KR-5XL', 'NW009-ST-CP-XXXL', 'J0352-KR-XXL', 'J0162-SKD-XXXL', 'JNE3627-KR-L', 'J0014-LCD-L', 'JNE3803-KR-S', 'JNE3437-KR-L', 'JNE3718-KR-XL', 'JNE3463-KR-XL', 'SET313-KR-NP-XS', 'SET239-KR-NP-XXL', 'NW030-TP-PJ-XL', 'JNE3543-KR-XS', 'J0049-TP-XXXL', 'JNE3794-KR-XXL', 'JNE3863-TU-L', 'J0181-TP-M', 'JNE3837-KR-L', 'JNE3730-KR-XL', 'J0301-TP-XL', 'PJNE3368-KR-5XL', 'J0342-TP-XXL', 'SET398-KR-PP-XL', 'JNE3510-KR-L', 'SET333-KR-DPT-L', 'JNE3399-KR-M', 'SET316-KR-DPT-XXXL', 'JNE3160-KR-G-XL', 'JNE3773-KR-XL', 'JNE3784-KR-XL', 'J0004-SKD-L', 'JNE3463-KR-XS', 'J0346-SET-L', 'JNE3366-KR-1053-L', 'J0285-SKD-XS', 'MEN5009-KR-S', 'SET110-KR-PP-XL', 'MEN5013-KR-S', 'J0378-SKD-M', 'JNE3371-KR-S', 'NW006-ST-SR-XXXL', 'JNE3439-KR-M', 'JNE3636-KR-XL', 'NW034-TP-PJ-XL', 'J0118-TP-XL', 'J0132-KR-XXL', 'SET293-KR-NP-XL', 'SET073-KR-SHA-M', 'JNE3703-KR-XL', 'SET087-KR-PP-M', 'J0353-KR-XXL', 'JNE1977-KR-237-M', 'JNE3781-KR-XS', 'NW037-TP-SR-XS', 'J0025-DR-XXXL', 'J0152-DR-XXL', 'J0158-DR-XXXL', 'SET353-KR-NP-XL', 'J0092-SET-XXL', 'MEN5026-KR-M', 'SET253-KR-NP-XXXL', 'J0248-KR-DPT-L', 'JNE3618-KR-XL', 'SET286-KR-NP-XL', 'SET268-KR-NP-XXXL', 'J0402-DR-L', 'SET304-KR-DPT-L', 'JNE3710-DR-XL', 'SET374-KR-NP-M', 'SET366-KR-NP-XL', 'J0119-TP-XS', 'JNE3697-KR-L', 'NW015-TP-PJ-M', 'JNE2171-KR-437-L', 'J0198-TP-XS', 'SET386-KR-NP-L', 'SET197-KR-NP-XXL', 'J0293-DR-XS', 'SET322-KR-SHA-S', 'J0281-SKD-S', 'SET350-KR-NP-XL', 'JNE3605-KR-XXL', 'SET295-KR-NP-M', 'SET264-KR-NP-L', 'JNE2171-KR-437-XL', 'JNE1234-MULTI-KR-032-M', 'JNE3673-TU-L', 'J0124-TP-L', 'SET293-KR-NP-XXXL', 'JNE3742-KR-M', 'MEN5012-KR-L', 'JNE3757-KR-XL', 'MEN5032-KR-XL', 'SET183-KR-DH-XXL', 'JNE3455-KR-M', 'J0333-DR-XS', 'JNE3761-KR-XL', 'SET145-KR-NP-L', 'JNE3801-KR-XL', 'SET171-KR-NP-XXXL', 'JNE3404-KR-XXL', 'J0234-SKD-XL', 'JNE1408-GREY-KR-UDF19-XXL', 'MEN5022-KR-S', 'MEN5020-KR-XXXL', 'SET304-KR-DPT-XXL', 'SET275-KR-NP-XL', 'J0122-TP-XL', 'SET183-KR-DH-XS', 'SET233-KR-PP-XXL', 'JNE3504-KR-XL', 'JNE3473-KR-XXXL', 'JNE3366-KR-1053-A-XXXL', 'NW012-TP-PJ-XL', 'JNE3425-KR-M', 'SET197-KR-NP-XL', 'SET374-KR-NP-L', 'JNE3334-KR-L', 'JNE3567-KR-S', 'J0014-LCD-XL', 'J0111-TP-S', 'SET217-KR-PP-XL', 'J0280-SKD-XXL', 'J0216-BL-S', 'J0154-DR-XL', 'JNE3667-TP-M', 'BL026-74BEIGE-B', 'J0020-SET-XL', 'SET227-KR-PP-A-XL', 'J0119-TP-XXXL', 'JNE3798-KR-XXL', 'SET304-KR-DPT-XXXL', 'JNE3838-KR-XL', 'NW034-TP-PJ-XXL', 'JNE3311-KR-XS', 'JNE3764-KR-M', 'SET203-KR-DPT-XL', 'JNE3437-KR-M', 'JNE3288-KR-XXL', 'JNE3801-KR-XXL', 'NW030-TP-PJ-S', 'SET187-KR-DH-XS', 'SET398-KR-PP-S', 'JNE3741-KR-XXXL', 'J0296-DR-XS', 'SET196-KR-NP-M', 'J0373-KR-S', 'J0104-KR-S', 'J0338-DR-XL', 'JNE3735-KR-XXL', 'JNE3706-DR-S', 'JNE3710-DR-L', 'SET328-KR-NP-XXL', 'SET339-KR-NP-XXL', 'JNE3465-KR-L', 'JNE3403-KR-XS', 'SET171-KR-NP-L', 'JNE3612-KR-XL', 'JNE3420-KR-S', 'JNE3563-KR-XS', 'NW003-TP-PJ-L', 'SET328-KR-NP-L', 'SET343-KR-NP-M', 'J0007-SKD-M', 'SET258-KR-PP-XXL', 'SET352-KR-NP-L', 'MEN5014-KR-XXXL', 'MEN5032-KR-M', 'SET287-KR-NP-L', 'J0344-TP-XL', 'J0355-KR-L', 'J0352-KR-XL', 'JNE3749-KR-L', 'JNE3616-KR-M', 'MEN5025-KR-XXL', 'J0135-SET-XXL', 'JNE3313-KR-A-XXL', 'MEN5031-KR-XXL', 'JNE3581-KR-S', 'JNE2014-KR-178-L', 'JNE3639-TP-N-M', 'JNE1951-KR-155-XL', 'J0008-SKD-M', 'JNE3560-KR-XXL', 'JNE3905-DR-L', 'J0335-DR-M', 'SET347-KR-NP-M', 'J0113-TP-XL', 'SET198-KR-NP-A-XXXL', 'JNE3484-KR-XL', 'J0285-SKD-XL', 'J0097-KR-L', 'J0171-DR-XXL', 'SET330-KR-PP-S', 'SET279-LC-XXXL', 'JNE3761-KR-XXL', 'JNE3703-KR-XXL', 'JNE3265-KR-XXL', 'SET286-KR-NP-XXXL', 'SET400-KR-NP-XXXL', 'J0283-SET-XXXL', 'J0004-SKD-XS', 'JNE3779-KR-XXL', 'J0349-SET-L', 'SET358-KR-NP-XXXL', 'J0340-TP-L', 'SET233-KR-PP-M', 'JNE3510-KR-XXL', 'J0097-KR-XS', 'JNE3801-KR-M', 'J0025-DR-XS', 'J0209-DR-XS', 'J0395-DR-XS', 'JNE3568-KR-M', 'SET014-KR-PP-A-XXL', 'NW005-ST-PJ-XXXL', 'NW013-ST-SR-XXXL', 'J0023-TP-XXXL', 'J0343-DR-L', 'SET184-KR-PP-XL', 'JNE3869-DR-XXXL', 'JNE3479-KR-XL', 'JNE3634-KR-XS', 'SET397-KR-NP-S', 'SET389-KR-NP-XXXL', 'SET138-KR-PP-M', 'JNE3690-TU-XS', 'JNE3620-KR-XL', 'JNE3613-KR-XL', 'J0108-SKD-XL', 'J0098-TP-M', 'J0089-TP-XXL', 'MEN5014-KR-XL', 'JNE3861-DR-L', 'SET229-KR-PP-L', 'J0415-DR-M', 'JNE3384-KR-S', 'SET405-KR-NP-XS', 'MEN5018-KR-XL', 'J0244-SKD-XL', 'JNE3691-TU-XL', 'J0349-SET-M', 'SET363-KR-NP-S', 'JNE3468-KR-M', 'SET100-KR-PP-XL', 'JNE3261-KR-XXL', 'J0277-SKD-M', 'SET393-KR-NP-XS', 'SET348-KR-NP-L', 'SET233-KR-PP-XXXL', 'JNE3547-KR-XXXL', 'JNE3797-KR-XXXL', 'SET324-KR-NP-XL', 'J0400-DR-M', 'JNE3548-KR-L', 'JNE3709-DR-M', 'J0126-SKD-L', 'JNE3581-KR-M', 'SET280-KR-PP-XS', 'SET239-KR-NP-XXXL', 'SET058-KR-NP-M', 'J0343-DR-S', 'JNE3449-KR-S', 'J0333-DR-XL', 'J0301-TP-XXXL', 'JNE2251-KR-537-L', 'J0239-SKD-XS', 'J0344-TP-M', 'J0219-BL-XL', 'JNE3659-TP-N-S', 'JNE3479-KR-S', 'JNE3715-KR-M', 'J0294-TP-S', 'JNE3618-KR-S', 'J0373-KR-XS', 'SET366-KR-NP-XXL', 'SET334-KR-NP-S', 'SET337-KR-NP-S', 'JNE3652-TP-N-S', 'JNE3421-KR-N-XXL', 'SET408-KR-NP-S', 'JNE2086-KR-389-L', 'SET322-KR-SHA-M', 'JNE3799-KR-M', 'JNE3673-TU-XS', 'JNE3665-TP-S', 'J0349-SET-S', 'JNE3777-KR-XXL', 'SET268-KR-NP-XXL', 'JNE3697-KR-S', 'SET345-KR-NP-XXXL', 'SET329-KR-NP-XXXL', 'NW024-TP-PJ-XS', 'JNE3805-KR-XL', 'SET228-KR-PP-A-XL', 'JNE3634-KR-XXXL', 'JNE3822-KR-M', 'SET383-KR-NP-M', 'SET273-KR-NP-M', 'SET244-KR-NP-M', 'JNE3789-KR-XS', 'JNE3669-TU-S', 'SET279-LC-XS', 'SET295-KR-NP-XL', 'JNE3422-KR-XL', 'JNE3481-KR-XS', 'JNE3794-KR-XS', 'SET145-KR-NP-XXL', 'SET393-KR-NP-L', 'JNE3702-KR-XXL', 'JNE3629-KR-M', 'JNE3645-TP-N-S', 'SET348-KR-NP-M', 'J0377-SKD-XL', 'SET075-KR-DH-L', 'J0097-KR-M', 'J0153-DR-XXXL', 'JNE3721-KR-M', 'JNE3640-TP-N-XXL', 'SET302-KR-PP-XXXL', 'JNE3645-TP-N-XL', 'JNE3763-KR-L', 'JNE3630-KR-XXXL', 'JNE3461-KR-XS', 'JNE3368-KR-XL', 'JNE3751-KR-XXXL', 'JNE3749-KR-XXXL', 'MEN5008-KR-M', 'SET386-KR-NP-M', 'J0122-TP-XXXL', 'JNE3633-KR-S', 'J0398-DR-M', 'J0231-SKD-XL', 'SET278-KR-NP-L', 'JNE3654-TP-M', 'J0339-DR-XS', 'SET279-LC-L', 'SET385-KR-NP-XL', 'J0353-KR-XL', 'J0280-SKD-XS', 'SET388-KR-NP-XL', 'J0006-SET-XS', 'JNE3546-KR-S', 'SET311-KR-NP-L', 'J0283-SET-L', 'SET413-KR-NP-S', 'JNE3546-KR-XL', 'JNE3491-KR-XL', 'J0093-DR-XXL', 'JNE3446-KR-S', 'JNE3720-KR-M', 'MEN5022-KR-XXL', 'SET278-KR-NP-XXXL', 'J0349-SET-XXXL', 'SET270-KR-PP-XXL', 'JNE3523-KR-S', 'J0351-SET-XXXL', 'JNE3869-DR-XXL', 'J0204-TP-L', 'SET209-KR-PP-XS', 'SET282-KR-PP-XL', 'JNE3691-TU-S', 'JNE09210-PINK-SR-JP8101RNV', 'SET348-KR-NP-XS', 'JNE3822-KR-XXL', 'JNE3515-KR-XXL', 'SET171-KR-NP-XS', 'JNE3522-KR-L', 'J0006-SET-S', 'JNE3675-TU-S', 'J0005-DR-S', 'JNE3399-KR-XXXL', 'SET285-KR-SHA-L', 'J0198-TP-L', 'J0419-TP-XL', 'SET405-KR-NP-M', 'J0162-SKD-L', 'NW016-ST-SR-XXXL', 'JNE3801-KR-L', 'NW030-TP-PJ-M', 'JNE3463-KR-M', 'J0012-SKD-L', 'SET230-KR-PP-S', 'SET145-KR-NP-XXXL', 'JNE3391-KR-XXXL', 'JNE3787-KR-XXXL', 'SET342-KR-NP-N-XL', 'SET349-KR-NP-XL', 'J0130-SET-XXL', 'SET353-KR-NP-XXL', 'SET303-KR-NP-XS', 'SET224-KR-NP-S', 'J0401-DR-S', 'J0097-KR-S', 'JNE2014-KR-178-M', 'JNE3742-KR-XS', 'JNE3515-KR-XXXL', 'JNE3680-TU-XXXL', 'J0217-BL-M', 'JNE3716-KR-XXXL', 'JNE3366-KR-1053-XXXL', 'J0119-TP-L', 'JNE3470-KR-XXL', 'JNE2199-KR-411-A-M', 'J0148-SET-S', 'MEN5024-KR-XXXL', 'JNE3288-KR-L', 'J0113-TP-XXL', 'SET171-KR-NP-S', 'NW007-ST-CP-XXXL', 'JNE3795-KR-XL', 'JNE3603-KR-XXL', 'JNE2199-KR-411-A-L', 'SET267-KR-NP-XL', 'J0007-SKD-XL', 'J0209-DR-XXL', 'SET288-KR-NP-XS', 'SET232-KR-PP-S', 'JNE3546-KR-M', 'J0095-SET-M', 'JNE3762-KR-S', 'JNE3635-KR-S', 'JNE3739-KR-XXL', 'J0166-DR-XS', 'JNE3703-KR-M', 'SET320-KR-NP-XXXL', 'JNE3614-KR-XL', 'JNE3437-KR-XL', 'JNE3710-DR-XXL', 'JNE3724-KR-XXL', 'SET348-KR-NP-XXL', 'J0111-TP-XXXL', 'JNE3713-TP-N-XXL', 'J0385-KR-L', 'JNE3368-KR-M', 'J0395-DR-XXXL', 'JNE3817-KR-XXL', 'SET331-KR-NP-XL', 'J0385-KR-XXXL', 'JNE3376-KR-M', 'JNE3487-KR-M', 'JNE3401-KR-S', 'SET322-KR-SHA-L', 'MEN5008-KR-L', 'JNE3880-DR-XS', 'J0248-KR-DPT-XXXL', 'MEN5019-KR-L', 'SET377-KR-NP-L', 'JNE3479-KR-XXL', 'SET273-KR-NP-S', 'SET328-KR-NP-XL', 'J0243-DR-XL', 'NW024-TP-PJ-S', 'JNE3784-KR-XXL', 'JNE3902-KR-XL', 'MEN5006-KR-XXXL', 'SET267-KR-NP-XXL', 'JNE3861-DR-XS', 'JNE3708-TU-S', 'JNE3579-KR-XXXL', 'J0401-DR-XL', 'JNE3784-KR-S', 'J0355-KR-M', 'JNE3782-KR-XL', 'J0230-SKD-XS', 'J0005-DR-XL', 'SET383-KR-NP-XL', 'SET394-KR-NP-M', 'BL109-M', 'JNE3703-KR-S', 'JNE2199-KR-411-A-XL', 'J0254-SKD-M', 'J0083-KR-L', 'SET356-KR-NP-XS', 'JNE3611-KR-S', 'CH204-PURPLE-M', 'JNE3473-KR-XL', 'JNE2171-KR-437-M', 'JNE3554-KR-XXL', 'JNE3795-KR-L', 'SET366-KR-NP-M', 'SET356-KR-NP-M', 'SET366-KR-NP-XS', 'JNE3522-KR-M', 'JNE3863-TU-XXXL', 'NW029-ST-SR-XXXL', 'NW020-ST-SR-XXXL', 'JNE3560-KR-XXXL', 'SET405-KR-NP-XXXL', 'JNE3554-KR-M', 'J0126-SKD-XXL', 'JNE3645-TP-N-M', 'JNE3640-TP-N-M', 'SET385-KR-NP-M', 'JNE3784-KR-XS', 'BTM044-PP-M', 'SET269-KR-NP-XXL', 'JNE3399-KR-S', 'JNE3399-KR-XXL', 'SET358-KR-NP-S', 'JNE3697-KR-XL', 'J0244-SKD-M', 'MEN5022-KR-L', 'JNE3769-KR-XS', 'SET139-KR-PP-XS', 'SET014-KR-PP-A-M', 'J0373-KR-L', 'NW029-ST-SR-XXL', 'J0338-DR-XXXL', 'J0399-DR-XXXL', 'JNE3658-TP-S', 'J0292-TP-XS', 'JNE3643-TP-N-XS', 'JNE3660-TP-N-XS', 'JNE3865-TP-L', 'J0346-SET-XS', 'SET285-KR-SHA-XXL', 'BL057-65BLACK-A', 'SET293-KR-NP-XS', 'NW002-TP-PJ-XXXL', 'NW003-TP-PJ-XXXL', 'SET246-KR-PP-M', 'JNE3160-KR-G-M', 'J0118-TP-L', 'J0080-TP-XS', 'JNE3566-KR-S', 'JNE1408-GREY-KR-UDF19-L', 'JNE3793-KR-M', 'JNE2009-KR-310-XS', 'JNE3713-TP-N-XL', 'SET269-KR-NP-XS', 'J0211-DR-M', 'SET393-KR-NP-XXXL', 'JNE3740-KR-XXXL', 'J0329-KR-L', 'JNE3605-KR-S', 'JNE3798-KR-XL', 'SET288-KR-NP-XL', 'SET348-KR-NP-XL', 'SET365-KR-NP-XXL', 'JNE3776-KR-XS', 'JNE3761-KR-XS', 'JNE3400-KR-XL', 'SET228-KR-PP-A-M', 'JNE3609-KR-XL', 'JNE3634-KR-XXL', 'JNE3865-TP-S', 'SET319-KR-NP-L', 'SET269-KR-NP-L', 'MEN5022-KR-XL', 'SET209-KR-PP-XXXL', 'JNE3662-TP-S', 'JNE3715-KR-XXL', 'JNE3653-TP-N-XXL', 'JNE3712-TP-N-XXL', 'JNE3799-KR-L', 'MEN5024-KR-L', 'JNE3620-KR-S', 'J0041-SET-XL', 'JNE3695-KR-S', 'SET070-KR-NP-XS', 'JNE3413-KR-S', 'SET287-KR-NP-XXXL', 'JNE3736-KR-XL', 'JNE3652-TP-N-XXL', 'JNE3863-TU-S', 'SET229-KR-PP-XL', 'JNE2307-KR-572-M', 'JNE3613-KR-L', 'SET236-KR-PP-XXXL', 'SET223-KR-NP-XXXL', 'SET380-KR-NP-M', 'JNE3716-KR-M', 'SET291-KR-PP-S', 'JNE3294-KR-XXXL', 'J0382-SKD-L', 'JNE3709-DR-L', 'J0104-KR-M', 'JNE3423-KR-XXL', 'MEN5025-KR-XXXL', 'JNE3752-KR-L', 'SET334-KR-NP-XL', 'JNE3783-KR-L', 'J0414-DR-M', 'BTM026-NP-XL', 'JNE3659-TP-N-XXL', 'JNE3822-KR-L', 'SET343-KR-NP-S', 'SET276-KR-PP-XS', 'JNE3716-KR-L', 'JNE3637-KR-M', 'JNE3795-KR-XXL', 'SET172-KR-PP-B-L', 'SET325-KR-NP-L', 'JNE3422-KR-XXL', 'SET217-KR-PP-L', 'SET184-KR-PP-M', 'JNE3311-KR-S', 'J0203-TP-XXXL', 'JNE3785-KR-S', 'JNE3518-KR-XXL', 'J0382-SKD-S', 'MEN5021-KR-L', 'SET322-KR-SHA-XXL', 'SET278-KR-NP-M', 'J0237-SKD-L', 'J0181-TP-XS', 'J0242-SKD-XXL', 'SET220-KR-PP-M', 'SET400-KR-NP-XL', 'JNE3468-KR-XS', 'SET349-KR-NP-S', 'JNE3661-TP-XL', 'SET374-KR-NP-S', 'PJNE2171-KR-N-6XL', 'SET393-KR-NP-S', 'J0402-DR-XS', 'SET216-KR-PP-XL', 'SET236-KR-PP-XL', 'JNE3617-KR-XL', 'JNE2032-KR-205-XXL', 'J0219-BL-M', 'JNE3437-KR-XXXL', 'SET219-KR-PP-XXL', 'J0087-TP-M', 'JNE3068-KR-A-XXL', 'SET308-KR-PP-XXXL', 'JNE3575-KR-M', 'JNE3575-KR-L', 'JNE3802-KR-XL', 'J0136-KR-S', 'J0283-SET-XXL', 'J0213-TP-M', 'JNE3708-TU-XS', 'J0339-DR-S', 'SET204-KR-DPT-XXXL', 'JNE3294-KR-L', 'J0097-KR-XL', 'J0143-SET-A-XXL', 'J0136-KR-XXL', 'BTM031-NP-XL', 'JNE3652-TP-N-M', 'JNE3786-KR-XXXL', 'JNE3785-KR-XXL', 'JNE3785-KR-XXXL', 'JNE3446-KR-XXL', 'J0299-KR-XXXL', 'JNE3751-KR-XXL', 'JNE3786-KR-XXL', 'JNE3459-KR-XXXL', 'BTM026-NP-M', 'SET333-KR-DPT-M', 'BL103-XXL', 'JNE3522-KR-XXXL', 'JNE3641-TP-N-XS', 'J0382-SKD-XXXL', 'J0198-TP-M', 'JNE3870-DR-S', 'J0203-TP-M', 'SET203-KR-DPT-XXXL', 'JNE3733-KR-XXXL', 'SET014-KR-PP-XL', 'SET145-KR-NP-M', 'SET339-KR-NP-S', 'SET289-KR-NP-XL', 'JNE3611-KR-XXL', 'J0006-SET-XL', 'JNE3639-TP-N-L', 'JNE3366-KR-1053-M', 'JNE3802-KR-XS', 'JNE3291-KR-L', 'SET405-KR-NP-L', 'JNE3800-KR-XXXL', 'J0297-TP-S', 'J0342-TP-S', 'J0337-TP-S', 'SET359-KR-NP-XS', 'JNE3616-KR-XS', 'J0118-TP-S', 'JNE3781-KR-S', 'SET329-KR-NP-M', 'J0094-KR-L', 'JNE3633-KR-XXL', 'JNE3633-KR-L', 'JNE3633-KR-M', 'J0205-TP-XXL', 'SET380-KR-NP-S', 'JNE3609-KR-XXXL', 'SET328-KR-NP-M', 'SET249-KR-NP-L', 'JNE3423-KR-M', 'JNE3804-KR-M', 'SET350-KR-NP-L', 'BL113-S', 'SET342-KR-NP-N-XS', 'JNE2199-KR-411-A-XXXL', 'JNE09186-BLUE-SR-JP7104RMV-N', 'JNE3160-KR-XXL', 'SET098-KR-PP-L', 'SET243-KR-PP-L', 'JNE3468-KR-S', 'JNE3559-KR-L', 'J0002-SKD-S', 'J0012-SKD-XL', 'MEN5004-KR-L', 'JNE3837-KR-M', 'J0350-SET-XXXL', 'JNE3781-KR-M', 'J0416-DR-XL', 'JNE3722-KR-XXL', 'JNE3668-TP-N-M', 'SET239-KR-NP-L', 'JNE3716-KR-XL', 'JNE3574-KR-L', 'SET261-KR-PP-S', 'BTM036-PP-XXXL', 'JNE3620-KR-XXL', 'SET290-KR-DPT-XL', 'SET303-KR-NP-XXL', 'JNE1998-KR-311-M', 'SET366-KR-NP-XXXL', 'SET375-KR-NP-XS', 'JNE3837-KR-XS', 'JNE3423-KR-L', 'MEN5025-KR-M', 'SET209-KR-PP-L', 'J0096-KR-XXL', 'JNE3476-KR-S', 'JNE3690-TU-M', 'J0013-SKD-XS', 'SET227-KR-PP-A-L', 'SET272-KR-PP-S', 'J0349-SET-XS', 'J0212-DR-XXXL', 'SET290-KR-DPT-XS', 'J0350-SET-XL', 'J0002-SKD-M', 'J0283-SET-M', 'J0094-KR-XXL', 'MEN5009-KR-XXL', 'J0335-DR-XXXL', 'J0088-TP-XL', 'SET203-KR-DPT-L', 'J0012-SKD-S', 'J0013-SKD-L', 'J0014-LCD-M', 'JNE3311-KR-XXXL', 'JNE3738-KR-XL', 'J0240-SKD-S', 'JNE3773-KR-M', 'JNE3776-KR-L', 'SET210-KR-PP-L', 'SET299-KR-PP-XXXL', 'SET344-KR-NP-M', 'JNE3870-DR-L', 'J0277-SKD-XL', 'SET307-KR-DPT-XXXL', 'J0236-SKD-XXXL', 'SET329-KR-NP-L', 'J0346-SET-XL', 'SET302-KR-PP-M', 'J0124-TP-XXL', 'MEN5015-KR-XL', 'J0179-KR-L', 'SET320-KR-NP-XXL', 'J0106-KR-M', 'JNE3482-KR-XL', 'JNE3793-KR-S', 'SET171-KR-NP-XL', 'JNE3785-KR-M', 'JNE3518-KR-L', 'SET331-KR-NP-XXL', 'J0251-SKD-XS', 'BL110-XXL', 'J0252-SKD-S', 'MEN5018-KR-L', 'SET386-KR-NP-XL', 'SET384-KR-NP-XL', 'J0009-SKD-XXL', 'MEN5032-KR-L', 'J0142-KR-XL', 'JNE3879-DR-XXXL', 'SET183-KR-DH-XL', 'SET342-KR-NP-N-S', 'SET363-KR-NP-XXXL', 'J0244-SKD-L', 'J0216-BL-L', 'SET365-KR-NP-M', 'J0094-KR-XL', 'SET329-KR-NP-S', 'SET246-KR-PP-XXXL', 'JNE3836-KR-L', 'SAR068', 'SET328-KR-NP-S', 'SET348-KR-NP-XXXL', 'J0123-TP-XXL', 'JNE3757-KR-S', 'JNE3658-TP-M', 'JNE3799-KR-XXL', 'JNE3607-KR-M', 'SET359-KR-NP-XL', 'J0338-DR-M', 'J0192-TP-XL', 'J0002-SKD-XXL', 'JNE2014-KR-178-S', 'JNE2205-KR-467-A-S', 'SET248-KR-NP-M', 'JNE3689-TU-XXL', 'SET291-KR-PP-XS', 'J0084-TP-M', 'J0204-TP-M', 'JNE3836-KR-M', 'SET350-KR-NP-XXXL', 'SET408-KR-NP-XXXL', 'SET295-KR-NP-S', 'SAR066', 'SET194-KR-NP-L', 'JNE3781-KR-L', 'SET374-KR-NP-XXL', 'JNE3396-KR-XXL', 'SET408-KR-NP-M', 'SET194-KR-NP-M', 'SET058-KR-NP-L', 'J0369-SKD-XS', 'JNE3675-TU-XXXL', 'SET219-KR-PP-XL', 'J0337-TP-M', 'JNE3864-TU-XL', 'JNE3546-KR-XXL', 'NW002-TP-PJ-M', 'JNE3764-KR-L', 'J0328-KR-L', 'SET264-KR-NP-S', 'J0122-TP-M', 'JNE3706-DR-XXXL', 'J0208-DR-XXL', 'JNE3807-KR-S', 'JNE3463-KR-XXL', 'J0092-SET-S', 'JNE3439-KR-L', 'SET144-KR-NP-XXXL', 'J0354-KR-L', 'JNE3822-KR-XL', 'JNE3608-KR-L', 'JNE3645-TP-N-XXL', 'J0396-DR-XXXL', 'SET328-KR-NP-XS', 'JNE3707-DR-XXL', 'SET320-KR-NP-XS', 'SET239-KR-NP-M', 'J0310-TP-XL', 'JNE3421-KR-XXL', 'JNE3798-KR-L', 'JNE3759-KR-L', 'JNE3724-KR-S', 'JNE2307-KR-572-L', 'J0033-KR-S', 'SET325-KR-NP-XXXL', 'JNE2170-KR-436-L', 'J0332-DR-M', 'JNE3811-KR-XS', 'JNE3819-KR-S', 'J0216-BL-XL', 'SET359-KR-NP-XXXL', 'SET413-KR-NP-L', 'JNE3793-KR-XS', 'JNE3797-KR-XXL', 'SET355-KR-PP-L', 'JNE3794-KR-XL', 'JNE3531-KR-S', 'JNE3690-TU-XXXL', 'JNE3602-KR-L', 'JNE3728-KR-L', 'J0344-TP-XXL', 'J0336-TP-XXL', 'SET187-KR-DH-XXL', 'JNE3833-KR-XS', 'J0006-SET-XXL', 'JNE3804-KR-XL', 'JNE3443-KR-XXL', 'JNE3698-KR-M', 'JNE3864-TU-M', 'J0118-TP-M', 'J0414-DR-XXL', 'JNE3721-KR-S', 'SET393-KR-NP-XXL', 'J0074-TP-L', 'JNE3878-KR-L', 'JNE3366-KR-1053-XXL', 'JNE3439-KR-XXXL', 'JNE3621-KR-XL', 'JNE3549-KR-XXL', 'JNE3435-KR-XXXL', 'JNE3636-KR-M', 'J0282-SET-XS', 'SET389-KR-NP-XS', 'JNE3881-DR-M', 'JNE3810-KR-XL', 'SET073-KR-SHA-S', 'SET269-KR-NP-M', 'SET363-KR-NP-XS', 'J0250-SKD-XXXL', 'J0295-DR-XS', 'JNE3364-KR-1051-A-XXL', 'JNE3365-KR-1052-A-L', 'JNE3778-KR-XXL', 'NW016-ST-SR-M', 'JNE3404-KR-XL', 'JNE3605-KR-XL', 'JNE3658-TP-L', 'JNE3813-KR-XXL', 'JNE3762-KR-L', 'JNE3741-KR-L', 'JNE3620-KR-M', 'J0338-DR-XXL', 'BL053-153GOLD-A', 'J0234-SKD-XXXL', 'J0216-BL-M', 'JNE3398-KR-XS', 'SET386-KR-NP-XXL', 'MEN5009-KR-XXXL', 'MEN5002-KR-XL', 'SET220-KR-PP-S', 'SET219-KR-PP-XS', 'JNE3672-TU-XXL', 'JNE3781-KR-XXL', 'MEN5015-KR-XXL', 'J0104-KR-XS', 'J0395-DR-M', 'MEN5027-KR-L', 'J0119-TP-M', 'MEN5022-KR-XXXL', 'SET401-KR-NP-M', 'SET323-KR-NP-M', 'SET288-KR-NP-M', 'SET395-KR-NP-M', 'JNE1000-NAVY-SR-JB6102RMV-K', 'JNE3773-KR-XS', 'JNE3818-KR-XXXL', 'JNE3833-KR-XXXL', 'JNE3709-DR-XXXL', 'SET377-KR-NP-XXXL', 'JNE3545-KR-S', 'JNE3408-KR-XL', 'J0308-DR-S', 'JNE3399-KR-XS', 'J0232-SKD-XL', 'J0338-DR-XS', 'JNE3790-KR-XL', 'JNE3775-KR-XL', 'JNE3606-KR-XXL', 'SET287-KR-NP-XXL', 'SET243-KR-PP-XXL', 'JNE3030-KR-XXXL', 'SET201-KR-NP-A-XXXL', 'J0041-SET-S', 'SET281-KR-PP-XXL', 'SET295-KR-NP-L', 'SET286-KR-NP-XS', 'J0098-TP-S', 'BL109-L', 'JNE3740-KR-XXL', 'J0339-DR-XXL', 'JNE3679-TU-L', 'J0209-DR-M', 'JNE3614-KR-L', 'BL013-62BLACK', 'JNE2305-KR-533-L', 'JNE2058-KR-339-L', 'JNE3311-KR-A-XS', 'JNE2305-KR-533-XXL', 'BL020-71RED', 'SET402-KR-NP-M', 'J0185-DR-S', 'JNE3068-KR-A-M', 'SET394-KR-NP-S', 'SET307-KR-DPT-S', 'SET316-KR-DPT-S', 'JNE3782-KR-S', 'J0210-DR-S', 'JNE3396-KR-L', 'JNE3615-KR-L', 'JNE3712-TP-N-L', 'JNE3270-KR-L', 'JNE3042-KR-M', 'NW031-TP-PJ-M', 'SET143-KR-PP-XXL', 'SET275-KR-NP-S', 'JNE3368-KR-L', 'JNE3769-KR-XXL', 'SET327-KR-DPT-L', 'J0217-BL-S', 'JNE3694-KR-L', 'JNE3726-KR-L', 'JNE3566-KR-XL', 'JNE3777-KR-L', 'JNE3522-KR-XL', 'SET383-KR-NP-S', 'SET359-KR-NP-S', 'SET323-KR-NP-XXXL', 'J0382-SKD-M', 'SET217-KR-PP-S', 'JNE3288-KR-XXXL', 'JNE3785-KR-L', 'SET219-KR-PP-M', 'JNE3749-KR-S', 'J0013-SKD-XXXL', 'J0372-SKD-S', 'J0198-TP-XL', 'JNE3364-KR-1051-A-XXXL', 'JNE3634-KR-L', 'MEN5013-KR-M', 'JNE3796-KR-XL', 'JNE3704-KR-M', 'SET343-KR-NP-XL', 'CH206-GREEN-XXL', 'CH205-YELLOW-XXL', 'SET377-KR-NP-XL', 'SAR173', 'JNE3704-KR-S', 'JNE2100-KR-144-S', 'JNE3801-KR-S', 'SET361-KR-NP-XS', 'JNE3476-KR-M', 'JNE3775-KR-XXXL', 'JNE3523-KR-XXL', 'JNE3795-KR-M', 'SET266-KR-NP-M', 'SET396-KR-PP-XS', 'JNE3336-KR-M', 'J0337-TP-XL', 'JNE3391-KR-S', 'JNE3620-KR-XS', 'J0224-SKD-XL', 'J0055-SET-XS', 'SET286-KR-NP-L', 'J0034-SET-L', 'J0233-SKD-L', 'SET396-KR-PP-L', 'SET258-KR-PP-L', 'SET344-KR-NP-XXL', 'NW037-TP-SR-XXL', 'JNE3648-TP-N-L', 'JNE3431-KR-XXL', 'J0011-LCD-S', 'J0236-SKD-XL', 'J0373-KR-XL', 'JNE3401-KR-XS', 'JNE3560-KR-XS', 'JNE1525-KR-UDF19-A-L', 'J0244-SKD-S', 'NW039-TP-SR-S', 'NW039-TP-SR-L', 'SET251-KR-PP-S', 'BL021-71BLACK', 'SET366-KR-NP-S', 'JNE3837-KR-S', 'J0233-SKD-M', 'SET219-KR-PP-L', 'SET277-KR-NP-L', 'SET359-KR-NP-M', 'J0167-KR-L', 'J0280-SKD-M', 'SET402-KR-NP-XXXL', 'J0135-SET-XS', 'BL103-S', 'JNE2205-KR-467-A-XXL', 'SET353-KR-NP-L', 'JNE3670-TU-XS', 'JNE3463-KR-S', 'J0207-DR-XL', 'JNE3802-KR-S', 'SET385-KR-NP-XXXL', 'SET390-KR-NP-XL', 'BTM002-S', 'SET252-KR-PP-XXL', 'NW024-TP-PJ-XL', 'MEN5008-KR-XL', 'JNE3863-TU-XL', 'SET305-KR-DPT-M', 'JNE3348-KR-L', 'J0239-SKD-XXXL', 'JNE3713-TP-N-XS', 'J0181-TP-XXXL', 'SET392-KR-NP-XXXL', 'SET209-KR-PP-XXL', 'J0164-DR-XL', 'J0250-SKD-XS', 'J0252-SKD-XS', 'NW031-TP-PJ-XXL', 'JNE3291-KR-XXXL', 'JNE3384-KR-L', 'JNE3384-KR-XXL', 'JNE3407-KR-L', 'JNE3722-KR-S', 'JNE3818-KR-S', 'JNE3560-KR-S', 'J0184-KR-A-S', 'MEN5004-KR-S', 'J0167-KR-XL', 'JNE3702-KR-XL', 'MEN5017-KR-M', 'J0236-SKD-M', 'J0004-SKD-M', 'J0196-TP-XXXL', 'SET275-KR-NP-XXXL', 'JNE3459-KR-M', 'JNE3225-KR-M', 'JNE3707-DR-XXXL', 'SET243-KR-PP-XS', 'J0197-TP-XXXL', 'BTM027-NP-L', 'SET273-KR-NP-XS', 'JNE1998-KR-311-L', 'MEN5027-KR-M', 'J0007-SKD-S', 'J0346-SET-XXXL', 'JNE1977-KR-237-S', 'BL104-L', 'J0335-DR-XS', 'NW034-TP-PJ-L', 'SET188-KR-NP-XXL', 'SET155-KR-PP-XS', 'JNE3688-TU-XL', 'SET300-KR-NP-XXL', 'SET351-KR-NP-XXL', 'JNE3470-KR-XXXL', 'J0245-SKD-L', 'J0186-SET-XXL', 'JNE3749-KR-XS', 'JNE3805-KR-XS', 'SET349-KR-NP-XXXL', 'SET201-KR-NP-A-S', 'SAR152', 'JNE3640-TP-N-L', 'SET182-KR-DH-M', 'SAR135', 'SAR137', 'JNE2100-KR-144-XXL', 'SET319-KR-NP-M', 'BTM030-NP-M', 'JNE3556-KR-XL', 'J0284-SKD-XXXL', 'SET353-KR-NP-M', 'SET276-KR-PP-XXXL', 'SET246-KR-PP-XL', 'JNE3691-TU-XS', 'JNE3506-KR-XS', 'MEN5024-KR-XXL', 'J0139-KR-S', 'SET376-KR-NP-XS', 'J0080-TP-S', 'JNE3810-KR-M', 'SET229-KR-PP-M', 'JNE3708-TU-XXL', 'J0176-TP-XXXL', 'MEN5011-KR-XXXL', 'J0132-KR-XL', 'JNE3710-DR-M', 'SET317-KR-PP-M', 'JNE3789-KR-S', 'JNE3869-DR-XL', 'SET159-KR-NP-XS', 'NW027-TP-PJ-S', 'SET385-KR-NP-XS', 'JNE3363-KR-1032-XXL', 'JNE3722-KR-XL', 'J0396-DR-XL', 'JNE3698-KR-XXL', 'MEN5008-KR-XXXL', 'JNE3042-KR-S', 'J0295-DR-L', 'JNE3817-KR-XS', 'JNE3835-KR-S', 'JNE3030-KR-XXL', 'JNE3806-KR-XXL', 'SET393-KR-NP-M', 'SET145-KR-NP-XS', 'JNE3710-DR-XXXL', 'MEN5003-KR-L', 'J0189-TP-XXXL', 'J0281-SKD-XL', 'J0400-DR-XS', 'JNE3704-KR-XS', 'JNE3744-TU-XL', 'J0197-TP-L', 'NW020-ST-SR-XXL', 'JNE3637-KR-XL', 'JNE3782-KR-XXXL', 'MEN5007-KR-XL', 'J0130-SET-S', 'J0280-SKD-XL', 'JNE3804-KR-XXL', 'NW016-ST-SR-S', 'J0295-DR-S', 'J0117-TP-M', 'JNE3800-KR-XS', 'JNE3797-KR-A-XXXL', 'J0247-SKD-XS', 'JNE3471-KR-L', 'JNE3479-KR-L', 'J0284-SKD-S', 'SET223-KR-NP-S', 'JNE3863-TU-XXL', 'JNE3892-TP-XXL', 'J0251-SKD-XXL', 'J0213-TP-XXL', 'SET229-KR-PP-XXL', 'JNE2305-KR-533-XL', 'J0342-TP-XXXL', 'J0301-TP-S', 'J0197-TP-S', 'J0245-SKD-XXL', 'J0158-DR-S', 'J0237-SKD-XXXL', 'SET348-KR-NP-S', 'J0108-SKD-S', 'JNE3619-KR-L', 'J0220-BL-XL', 'SET038-KR-PP-M', 'J0148-SET-M', 'J0340-TP-S', 'MEN5017-KR-S', 'JNE3634-KR-S', 'J0090-TP-S', 'J0108-SKD-XXXL', 'MEN5025-KR-S', 'JNE3722-KR-M', 'JNE3869-DR-XS', 'MEN5023-KR-XXXL', 'SET378-KR-NP-XL', 'J0005-DR-L', 'J0291-JS-S', 'J0285-SKD-XXXL', 'JNE3783-KR-XXXL', 'J0215-BL-S', 'JNE3678-TU-XXXL', 'JNE3363-KR-1032-XXXL', 'JNE3575-KR-S', 'JNE3801-KR-XS', 'MEN5026-KR-XL', 'J0157-DR-XXXL', 'J0328-KR-XXL', 'JNE3835-KR-L', 'JNE3553-KR-L', 'SET128-KR-DH-L', 'J0100-DR-XXL', 'JNE3764-KR-XXL', 'JNE3291-KR-M', 'J0179-KR-XXL', 'JNE1525-KR-UDF19BLACK-XXL', 'NW013-ST-SR-S', 'JNE3384-KR-XS', 'JNE3384-KR-XXXL', 'JNE3697-KR-M', 'SET405-KR-NP-S', 'J0007-SKD-L', 'J0108-SKD-XXL', 'J0158-DR-XXL', 'SET355-KR-PP-XL', 'JNE3635-KR-XL', 'SET201-KR-NP-A-L', 'J0215-BL-M', 'NW029-ST-SR-XS', 'JNE3579-KR-S', 'J0041-SET-XXL', 'J0201-TP-XXXL', 'SET217-KR-PP-XS', 'JNE3880-DR-M', 'J0012-SKD-XXXL', 'SET341-KR-NP-XXXL', 'J0097-KR-XXL', 'SET384-KR-NP-XXXL', 'SET389-KR-NP-L', 'JNE3794-KR-S', 'JNE3716-KR-XS', 'JNE3758-KR-S', 'J0109-SKD-L', 'J0219-BL-L', 'MEN5009-KR-L', 'MEN5028-KR-L', 'MEN5015-KR-L', 'J0339-DR-XXXL', 'JNE2113-KR-381-XXL', 'JNE3733-KR-XS', 'SET377-KR-NP-XS', 'NW032-ST-CP-XL', 'JNE3488-KR-S', 'JNE3866-KR-XXL', 'J0344-TP-XS', 'JNE3364-KR-1051-A-XL', 'SET269-KR-NP-XL', 'SET384-KR-NP-XXL', 'J0281-SKD-XXXL', 'SET058-KR-NP-XXXL', 'SET380-KR-NP-XS', 'JNE3413-KR-XL', 'JNE1951-KR-155-S', 'SET287-KR-NP-XS', 'JNE3065-KR-M', 'BTM029-NP-M', 'BTM031-NP-M', 'J0401-DR-XXL', 'JNE3373-KR-S', 'SET405-KR-NP-XL', 'MEN5007-KR-XXL', 'JNE3603-KR-L', 'J0024-KR-XL', 'JNE3694-KR-M', 'JNE1234-MULTI-KR-032-L', 'J0081-DR-XL', 'J0212-DR-XL', 'JNE3698-KR-XL', 'J0158-DR-L', 'SET377-KR-NP-S', 'J0295-DR-XL', 'SET004-KR-SP-S', 'JNE1525-KR-UDF19BLACK-S', 'SET279-LC-XXL', 'J0307-TP-XXXL', 'SET384-KR-NP-S', 'JNE3706-DR-XL', 'JNE3609-KR-M', 'SET290-KR-DPT-XXXL', 'JNE3484-KR-S', 'JNE3255-KR-S', 'J0240-SKD-XL', 'J0106-KR-L', 'JNE3761-KR-L', 'JNE3659-TP-N-M', 'JNE3869-DR-L', 'NW001-TP-PJ-L', 'SET365-KR-NP-XS', 'SET290-KR-DPT-S', 'J0332-DR-S', 'SET043-KR-NP-S', 'SET048-KR-NP-S', 'JNE3437-KR-XS', 'J0301-TP-XS', 'BTM032-NP-S', 'SET351-KR-NP-XXXL', 'SET374-KR-NP-XL', 'SET341-KR-NP-XXL', 'JNE3728-KR-XL', 'J0148-SET-L', 'JNE3452-KR-L', 'BTM030-NP-XXL', 'JNE3504-KR-L', 'J0396-DR-L', 'J0105-KR-M', 'J0105-KR-L', 'JNE3376-KR-XXL', 'JNE3648-TP-N-XXL', 'BTM036-PP-L', 'NW009-ST-CP-XXL', 'MEN5013-KR-XL', 'J0333-DR-L', 'JNE3273-KR-XXXL', 'SET058-KR-NP-XL', 'JNE3777-KR-XXXL', 'SET218-KR-NP-XXL', 'SET232-KR-PP-XL', 'JNE3407-KR-XL', 'JNE3384-KR-XL', 'JNE3694-KR-XL', 'JNE3042-KR-L', 'J0277-SKD-S', 'J0150-KR-XXL', 'BTM037-PP-XXXL', 'SET233-KR-PP-XS', 'JNE3751-KR-XL', 'JNE3659-TP-N-XL', 'JNE3712-TP-N-XL', 'JNE3563-KR-L', 'J0124-TP-M', 'J0220-BL-M', 'J0135-SET-S', 'J0347-SET-XXXL', 'SET389-KR-NP-XXL', 'JNE3270-KR-M', 'SET053-KR-NP-XXL', 'MEN5023-KR-L', 'MEN5019-KR-XXL', 'J0395-DR-L', 'SET038-KR-PP-S', 'J0338-DR-S', 'J0250-SKD-XL', 'J0307-TP-M', 'BL101-M', 'JNE3546-KR-XS', 'JNE3751-KR-XS', 'JNE3482-KR-S', 'JNE3861-DR-XXXL', 'SET228-KR-PP-A-XXL', 'JNE3730-KR-XXL', 'SET341-KR-NP-S', 'BTM002-XL', 'J0004-SKD-XXL', 'SET224-KR-NP-XL', 'SET400-KR-NP-L', 'SET341-KR-NP-XS', 'J0127-SKD-XS', 'JNE3702-KR-L', 'J0086-DR-XS', 'J0148-SET-XL', 'J0278-SET-M', 'J0088-TP-XXXL', 'SET358-KR-NP-M', 'J0082-TP-XXL', 'J0292-TP-XXL', 'NW039-TP-SR-XS', 'SET305-KR-DPT-XS', 'JNE3885-KR-S', 'JNE3637-KR-S', 'JNE3387-KR-M', 'JNE3643-TP-N-S', 'J0073-KR-M', 'J0072-KR-M', 'J0026-KR-S', 'J0127-SKD-S', 'SET103-KR-SP-S', 'SET260-KR-PP-S', 'JNE3804-KR-L', 'JNE3720-KR-XXL', 'SET244-KR-NP-S', 'JNE3708-TU-XL', 'J0212-DR-M', 'JNE3862-TU-M', 'JNE3543-KR-XXXL', 'SET227-KR-PP-A-XXXL', 'SET227-KR-PP-A-XS', 'MEN5023-KR-XXL', 'JNE3365-KR-1052-XL', 'SET405-KR-NP-XXL', 'J0217-BL-XXL', 'JNE3695-KR-M', 'JNE3865-TP-XXL', 'J0179-KR-M', 'MEN5017-KR-XL', 'JNE3439-KR-S', 'SET037-KR-NP-XL', 'J0139-KR-L', 'JNE3474-KR-E-XS', 'J0224-SKD-M', 'JNE3668-TP-N-S', 'JNE3655-TP-S', 'SET360-KR-NP-XS', 'J0350-SET-XXL', 'J0041-SET-XXXL', 'J0081-DR-M', 'SET323-KR-NP-S', 'J0369-SKD-L', 'SET282-KR-PP-L', 'J0306-DR-M', 'JNE3800-KR-L', 'JNE3602-KR-XXXL', 'JNE3457-KR-XXL', 'J0095-SET-XS', 'J0190-TP-L', 'J0284-SKD-L', 'JNE3818-KR-XL', 'SET386-KR-NP-XS', 'J0336-TP-XL', 'SET401-KR-NP-XL', 'J0351-SET-XL', 'JNE3781-KR-XL', 'JNE3805-KR-XXXL', 'JNE3369-KR-M', 'JNE3439-KR-XXL', 'J0399-DR-XS', 'J0010-LCD-M', 'JNE3576-KR-XS', 'NW020-ST-SR-L', 'J0402-DR-XL', 'JNE3639-TP-N-S', 'JNE3724-KR-L', 'JNE3609-KR-L', 'JNE3804-KR-XXXL', 'SET319-KR-NP-XXL', 'J0277-SKD-L', 'SAR069', 'JNE3838-KR-L', 'J0122-TP-XXL', 'JNE3674-TU-XXL', 'JNE3775-KR-XS', 'JNE3296-KR-L', 'SET138-KR-PP-XXL', 'JNE2305-KR-533-M', 'J0252-SKD-L', 'JNE3294-KR-M', 'JNE3806-KR-S', 'SET165-KR-PP-M', 'JNE3461-KR-S', 'JNE3578-KR-M', 'JNE3615-KR-S', 'JNE3515-KR-M', 'J0344-TP-S', 'SET349-KR-NP-M', 'JNE3753-KR-XXL', 'MEN5010-KR-L', 'JNE2153-KR-278-A-XXL', 'JNE3797-KR-XL', 'JNE3707-DR-S', 'SET408-KR-NP-XL', 'SET094-KR-NP-XL', 'JNE3860-DR-L', 'SET385-KR-NP-L', 'SET375-KR-NP-M', 'J0401-DR-M', 'SET073-KR-SHA-L', 'JNE3773-KR-XXL', 'J0113-TP-M', 'SET247-KR-SHA-XL', 'JNE3621-KR-XXL', 'JNE3761-KR-M', 'JNE3408-KR-XXXL', 'JNE3716-KR-XXL', 'SET135-KR-PP-XL', 'J0062-DR-S', 'JNE3554-KR-XL', 'SET334-KR-NP-L', 'JNE3706-DR-M', 'JNE3568-KR-XS', 'J0389-TP-M', 'J0108-SKD-M', 'J0203-TP-XS', 'JNE3365-KR-1052-L', 'SET333-KR-DPT-S', 'J0355-KR-S', 'BL009-61BLACK-B', 'JNE1951-KR-155-XXL', 'JNE3443-KR-XL', 'SET281-KR-PP-XL', 'JNE3486-KR-XL', 'SET396-KR-PP-XL', 'JNE3758-KR-XXL', 'SET247-KR-SHA-M', 'BTM008-XL', 'BTM029-NP-XL', 'SET327-KR-DPT-M', 'J0351-SET-XXL', 'J0346-SET-XXL', 'J0280-SKD-L', 'SET323-KR-NP-L', 'J0353-KR-L', 'JNE3610-KR-M', 'SET337-KR-NP-XS', 'SET317-KR-PP-L', 'NW014-ST-SR-S', 'SET044-KR-NP-XS', 'JNE3479-KR-M', 'JNE3724-KR-M', 'JNE3605-KR-XXXL', 'JNE3648-TP-N-XL', 'JNE3762-KR-XL', 'JNE3603-KR-XL', 'JNE3068-KR-A-S', 'JNE3660-TP-N-L', 'J0382-SKD-XS', 'JNE3768-KR-S', 'J0163-SKD-S', 'J0399-DR-L', 'SET165-KR-PP-XXL', 'SET328-KR-NP-XXXL', 'SET358-KR-NP-L', 'J0111-TP-L', 'SET083-KR-PP-XL', 'J0415-DR-S', 'JNE3415-KR-XS', 'JNE3376-KR-L', 'JNE3644-TP-N-XL', 'JNE3383-KR-A-XXL', 'JNE3454-KR-XXL', 'J0277-SKD-XXXL', 'SET254-KR-NP-M', 'SET186-KR-DH-M', 'J0377-SKD-M', 'SET233-KR-PP-XL', 'J0254-SKD-XXXL', 'J0090-TP-M', 'SET245-KR-NP-S', 'J0161-DR-S', 'JNE3042-KR-XXXL', 'JNE3892-TP-XXXL', 'JNE3451-KR-L', 'JNE3612-KR-L', 'JNE3790-KR-L', 'JNE3368-KR-S', 'J0277-SKD-XXL', 'JNE3471-KR-XL', 'SET194-KR-NP-XL', 'JNE3714-KR-XXXL', 'JNE3816-KR-XS', 'J0234-SKD-XS', 'JNE3579-KR-XS', 'JNE2205-KR-467-A-M', 'SET236-KR-PP-M', 'SET286-KR-NP-M', 'SET184-KR-PP-L', 'JNE3728-KR-S', 'J0239-SKD-XXL', 'JNE3423-KR-S', 'SET325-KR-NP-M', 'SET360-KR-NP-L', 'NW022-TP-PJ-XL', 'J0167-KR-XS', 'J0381-SKD-XL', 'JNE3655-TP-M', 'J0025-DR-M', 'JNE3363-KR-1032-XL', 'JNE3466-KR-M', 'JNE3427-KR-S', 'JNE1906-KR-031-L', 'JNE3793-KR-XXL', 'JNE3549-KR-L', 'JNE3638-KR-M', 'J0379-SKD-S', 'SET251-KR-PP-M', 'JNE3786-KR-M', 'JNE3225-KR-S', 'SET317-KR-PP-XL', 'JNE2170-KR-436-S', 'J0305-DR-XS', 'MEN5029-KR-XXL', 'MEN5014-KR-XXL', 'SET254-KR-NP-XXL', 'JNE3434-KR-XS', 'JNE3160-KR-G-L', 'J0189-TP-M', 'SET224-KR-NP-XS', 'J0207-DR-S', 'JNE3504-KR-XS', 'JNE3651-TP-N-XL', 'JNE3735-KR-XS', 'JNE3605-KR-M', 'J0376-SKD-XS', 'JNE3718-KR-XS', 'JNE3484-KR-M', 'JNE3408-KR-XXL', 'J0098-TP-XXXL', 'NW002-TP-PJ-L', 'J0124-TP-XL', 'JNE3480-KR-XL', 'JNE3432-KR-XL', 'JNE3516-KR-E-XL', 'J0243-DR-M', 'JNE3835-KR-XXL', 'JNE3288-KR-S', 'JNE3716-KR-S', 'SET044-KR-NP-M', 'JNE3870-DR-M', 'J0150-KR-XXXL', 'SET144-KR-NP-XS', 'J0416-DR-XXL', 'JNE3627-KR-XL', 'JNE1408-GREY-KR-UDF19-XXXL', 'JNE3288-KR-XS', 'J0009-SKD-XXXL', 'JNE3741-KR-S', 'JNE3804-KR-S', 'JNE3435-KR-XS', 'SET116-KR-NP-XS', 'J0397-DR-XL', 'JNE3606-KR-L', 'J0039-SET-S', 'SET240-KR-PP-XS', 'JNE3422-KR-S', 'SET276-KR-PP-XXL', 'JNE3715-KR-XL', 'JNE3487-KR-XL', 'J0187-KR-XS', 'J0002-SKD-L', 'JNE3776-KR-XL', 'SET243-KR-PP-XL', 'SET290-KR-DPT-XXL', 'J0013-SKD-S', 'NW008-ST-CP-XS', 'J0081-DR-XXL', 'SET364-KR-NP-M', 'SET375-KR-NP-XXXL', 'J0370-SKD-XXXL', 'J0110-SKD-M', 'JNE3504-KR-XXL', 'MEN5025-KR-XL', 'JNE3619-KR-XL', 'JNE3344-KR-L', 'JNE3689-TU-XXXL', 'J0354-KR-M', 'JNE3689-TU-S', 'SET249-KR-NP-M', 'JNE3671-TU-XS', 'NW012-TP-PJ-S', 'SET240-KR-PP-XL', 'JNE3863-TU-M', 'JNE3459-KR-XS', 'MEN5004-KR-M', 'J0092-SET-M', 'JNE3628-KR-XXXL', 'JNE3575-KR-XXXL', 'MEN5005-KR-XXL', 'JNE3736-KR-L', 'SET186-KR-DH-XS', 'JNE3291-KR-S', 'JNE3666-TP-XL', 'JNE3717-KR-XL', 'BTM029-NP-XXL', 'BTM021-B-XXL', 'MEN5015-KR-M', 'J0351-SET-S', 'SET253-KR-NP-XXL', 'J0134-SET-XL', 'SET433-KR-NP-L', 'J0124-TP-S', 'SET310-KR-NP-L', 'JNE3727-KR-L', 'J0415-DR-XXL', 'J0396-DR-XXL', 'JNE1977-KR-237-XXL', 'J0034-SET-XXXL', 'JNE3400-KR-S', 'SET265-KR-NP-XXXL', 'JNE2049-KR-351-S', 'BTM040-PP-S', 'J0402-DR-XXL', 'SET356-KR-NP-S', 'SET197-KR-NP-XXXL', 'JNE3710-DR-XS', 'J0209-DR-XXXL', 'BTM002-B-M', 'JNE3714-KR-S', 'SET289-KR-NP-XXXL', 'SET349-KR-NP-XXL', 'JNE3805-KR-XXL', 'SET377-KR-NP-XXL', 'J0106-KR-XXXL', 'SET287-KR-NP-S', 'JNE3573-KR-XS', 'J0148-SET-XXL', 'JNE2009-KR-310-M', 'JNE3702-KR-M', 'NW014-ST-SR-L', 'JNE3881-DR-L', 'SET240-KR-PP-XXL', 'JNE3683-TU-XS', 'JNE3488-KR-XXL', 'SET343-KR-NP-XS', 'JNE3480-KR-XXL', 'JNE3638-KR-XXXL', 'JNE3739-KR-XXXL', 'SET280-KR-PP-M', 'JNE3759-KR-M', 'JNE3763-KR-XL', 'JNE3836-KR-XXL', 'JNE3688-TU-XS', 'SET228-KR-PP-A-XS', 'JNE3735-KR-XXXL', 'SET198-KR-NP-A-M', 'BTM036-PP-XXL', 'SET197-KR-NP-M', 'J0079-SKD-XXXL', 'JNE3633-KR-XS', 'JNE3638-KR-XS', 'SET131-KR-NP-XL', 'JNE2266-KR-490-A-XL', 'JNE3404-KR-M', 'BTM002-B-XXL', 'J0176-TP-M', 'JNE3756-KR-XL', 'J0178-TP-XXXL', 'J0245-SKD-S', 'JNE3837-KR-XL', 'SET194-KR-NP-XXXL', 'JNE3701-KR-XXXL', 'SET325-KR-NP-XS', 'J0233-SKD-XXXL', 'JNE3543-KR-XXL', 'SET358-KR-NP-XS', 'J0345-SET-L', 'MEN5001-KR-XXL', 'JNE3556-KR-XXL', 'JNE3368-KR-XS', 'JNE3804-KR-XS', 'J0079-SKD-S', 'JNE3720-KR-XL', 'SET252-KR-PP-M', 'J0179-KR-XL', 'J0083-KR-M', 'SET037-KR-NP-XXL', 'JNE3489-KR-XXL', 'J0157-DR-XXL', 'J0217-BL-XL', 'J0217-BL-L', 'JNE3625-DR-S', 'J0081-DR-XS', 'JNE3807-KR-XXL', 'J0015-DR-XS', 'J0328-KR-S', 'J0102-SKD-XL', 'J0211-DR-S', 'SET383-KR-NP-XXXL', 'JNE3687-TU-XL', 'SET392-KR-NP-XS', 'JNE3689-TU-XS', 'MEN5010-KR-XL', 'J0101-DR-A-XXXL', 'SET075-KR-DH-S', 'J0179-KR-S', 'JNE3616-KR-XL', 'J0236-SKD-XS', 'SET320-KR-NP-M', 'SET342-KR-NP-N-XXXL', 'J0397-DR-M', 'JNE3806-KR-M', 'JNE3391-KR-M', 'SET352-KR-NP-XL', 'SET393-KR-NP-XL', 'JNE3421-KR-N-S', 'JNE3673-TU-XL', 'SET158-KR-PP-XXXL', 'SET229-KR-PP-XXXL', 'NW031-TP-PJ-XXXL', 'SET402-KR-NP-L', 'JNE3675-TU-M', 'JNE3648-TP-N-XS', 'J0155-KR-XS', 'J0337-TP-XXL', 'JNE3656-TP-N-L', 'NW039-TP-SR-XXL', 'J0034-SET-XXL', 'J0024-KR-XXXL', 'J0240-SKD-XXL', 'JNE3432-KR-XXXL', 'NW034-TP-PJ-M', 'JNE3672-TU-L', 'J0041-SET-L', 'J0235-SKD-XS', 'MEN5007-KR-S', 'JNE3671-TU-XXL', 'SET310-KR-NP-XL', 'J0157-DR-XS', 'JNE3256-KR-XXL', 'MEN5011-KR-L', 'JNE3730-KR-XS', 'SET392-KR-NP-XXL', 'J0130-SET-XXXL', 'JNE3506-KR-L', 'J0233-SKD-S', 'J0139-KR-XS', 'JNE3365-KR-1052-A-XS', 'SET375-KR-NP-S', 'JNE3464-KR-L', 'JNE3576-KR-XXL', 'JNE3638-KR-XXL', 'JNE3474-KR-E-XXL', 'JNE3568-KR-XXXL', 'SET239-KR-NP-XL', 'JNE1951-KR-155-XS', 'BL102-M', 'JNE3690-TU-XXL', 'SET378-KR-NP-S', 'J0135-SET-L', 'JNE3429-KR-S', 'J0204-TP-XXXL', 'JNE3720-KR-XXXL', 'SET253-KR-NP-L', 'SET278-KR-NP-XS', 'SET366-KR-NP-L', 'JNE3869-DR-M', 'JNE2205-KR-467-A-XS', 'JNE3688-TU-XXL', 'J0131-KR-XXXL', 'J0137-SET-L', 'J0108-SKD-L', 'JNE3534-KR-L', 'BTM031-NP-L', 'JNE3449-KR-L', 'J0242-SKD-XS', 'BTM003-B-XXXL', 'SET247-KR-SHA-L', 'J0241-SKD-XL', 'SET278-KR-NP-XL', 'JNE3549-KR-XL', 'JNE3482-KR-L', 'JNE3642-TP-S', 'J0174-TP-XL', 'J0173-DR-XS', 'JNE3068-KR-A-L', 'SET249-KR-NP-XXL', 'BL100-XL', 'JNE3790-KR-XXXL', 'JNE3471-KR-XXXL', 'SET332-KR-PP-XS', 'JNE3835-KR-XL', 'SET184-KR-PP-XS', 'JNE3564-KR-L', 'JNE3459-KR-L', 'SET330-KR-PP-M', 'JNE3553-KR-XL', 'NW001-TP-PJ-XL', 'J0302-DR-XXL', 'SET267-KR-NP-XXXL', 'J0295-DR-XXXL', 'J0161-DR-XXXL', 'SET397-KR-NP-L', 'SET316-KR-DPT-XS', 'JNE3642-TP-XS', 'JNE3779-KR-XL', 'JNE3834-KR-M', 'SET154-KR-NP-XXL', 'SET400-KR-NP-XXL', 'SET286-KR-NP-XXL', 'MEN5031-KR-L', 'SET388-KR-NP-M', 'JNE3635-KR-M', 'JNE3652-TP-N-XS', 'J0173-DR-S', 'JNE3608-KR-XS', 'J0219-BL-S', 'JNE3629-KR-XXL', 'JNE3530-KR-XXL', 'SAR138', 'J0113-TP-XXXL', 'JNE3787-KR-XS', 'JNE3686-TU-XL', 'SET288-KR-NP-S', 'JNE3554-KR-S', 'JNE3789-KR-XXXL', 'JNE3607-KR-XXL', 'JNE3738-KR-XS', 'SET383-KR-NP-XXL', 'JNE3479-KR-XS', 'JNE3706-DR-XXL', 'J0342-TP-XL', 'JNE3774-KR-S', 'NW014-ST-SR-M', 'JNE3775-KR-L', 'JNE3612-KR-XXL', 'JNE3623-KR-S', 'JNE3777-KR-XL', 'JNE3725-KR-XXL', 'J0164-DR-XXL', 'J0347-SET-XL', 'J0201-TP-XS', 'JNE3703-KR-XS', 'SET329-KR-NP-XXL', 'J0231-SKD-XXXL', 'J0037-KR-XXXL', 'SET182-KR-DH-S', 'J0249-SKD-L', 'JNE3542-KR-L', 'JNE3757-KR-XS', 'SET319-KR-NP-XS', 'JNE3670-TU-M', 'SET186-KR-DH-S', 'JNE3773-KR-S', 'J0231-SKD-M', 'MEN5004-KR-XXL', 'J0234-SKD-XXL', 'JNE3776-KR-S', 'JNE3428-KR-XS', 'JNE3745-KR-L', 'J0299-KR-M', 'JNE3577-KR-XL', 'JNE3638-KR-L', 'SET246-KR-PP-XXL', 'MEN5016-KR-XXXL', 'JNE3796-KR-L', 'J0201-TP-XXL', 'JNE3636-KR-XXXL', 'J0028-KR-L', 'JNE3291-KR-XS', 'J0337-TP-L', 'JNE3733-KR-L', 'JNE3773-KR-XXXL', 'SET347-KR-NP-XXL', 'SET392-KR-NP-M', 'J0396-DR-XS', 'JNE2251-KR-537-M', 'JNE3729-KR-XL', 'SET397-KR-NP-XS', 'J0020-SET-XS', 'SET249-KR-NP-S', 'JNE3427-KR-L', 'SET433-KR-NP-S', 'MEN5002-KR-S', 'JNE3880-DR-XXXL', 'J0415-DR-XXXL', 'JNE2132-KR-398-S', 'SET339-KR-NP-L', 'J0376-SKD-M', 'JNE2132-KR-398-M', 'SET049-KR-NP-S', 'SET325-KR-NP-S', 'SET375-KR-NP-L', 'JNE3644-TP-N-S', 'SET226-KR-PP-XL', 'JNE3735-KR-S', 'J0008-SKD-XXXL', 'MEN5010-KR-M', 'J0117-TP-XS', 'JNE3443-KR-XS', 'J0048-TP-S', 'JNE3894-TP-XXL', 'J0333-DR-XXL', 'JNE3565-KR-M', 'JNE3651-TP-N-XXL', 'MEN5024-KR-S', 'SET241-KR-PP-S', 'J0033-KR-XXXL', 'SET262-KR-NP-L', 'SET241-KR-PP-M', 'NW039-TP-SR-M', 'JNE3633-KR-XL', 'JNE3790-KR-XXL', 'JNE3571-KR-XS', 'J0162-SKD-XL', 'SET304-KR-DPT-M', 'JNE3717-KR-L', 'J0414-DR-L', 'JNE3449-KR-XL', 'J0414-DR-XL', 'JNE3559-KR-XXL', 'JNE3348-KR-XS', 'J0089-TP-XL', 'J0189-TP-XXL', 'JNE3451-KR-XXL', 'MEN5017-KR-L', 'BL102-S', 'JNE2101-KR-210-S', 'J0402-DR-M', 'JNE3429-KR-M', 'J0184-KR-XXL', 'JNE3660-TP-N-XXL', 'SET270-KR-PP-S', 'JNE3457-KR-S', 'JNE3606-KR-XS', 'SET128-KR-DH-XL', 'SET305-KR-DPT-XXL', 'J0092-SET-XL', 'SET378-KR-NP-XXXL', 'NW014-ST-SR-XXL', 'JNE3800-KR-S', 'J0299-KR-XS', 'J0348-SET-XS', 'JNE3715-KR-XS', 'JNE3440-KR-N-XXL', 'SET313-KR-NP-XL', 'JNE3794-KR-L', 'JNE1998-KR-311-XL', 'NW029-ST-SR-XL', 'JNE3800-KR-A-S', 'JNE3701-KR-XL', 'JNE3334-KR-XL', 'JNE3810-KR-XS', 'JNE3617-KR-S', 'MEN5019-KR-M', 'BTM038-PP-L', 'JNE3703-KR-L', 'JNE3773-KR-L', 'JNE3476-KR-L', 'JNE3818-KR-L', 'JNE3404-KR-L', 'JNE3856-KR-XXXL', 'SET257-KR-PP-XS', 'SET413-KR-NP-XXL', 'SET100-KR-PP-XS', 'J0215-BL-XXL', 'JNE3748-KR-XXXL', 'J0080-TP-L', 'J0328-KR-XS', 'SET131-KR-NP-A-XL', 'JNE3780-KR-XXL', 'JNE3764-KR-S', 'JNE3636-KR-S', 'SET098-KR-PP-XXXL', 'NW008-ST-CP-S', 'SET094-KR-NP-XXXL', 'J0336-TP-S', 'SET313-KR-NP-M', 'SET258-KR-PP-XL', 'J0132-KR-XS', 'JNE3735-KR-L', 'SET278-KR-NP-XXL', 'JNE3255-KR-XL', 'JNE3796-KR-S', 'JNE3261-KR-XS', 'BL099-S', 'BL100-S', 'J0382-SKD-XXL', 'SET330-KR-PP-XXXL', 'JNE3607-KR-XS', 'JNE3798-KR-A-L', 'JNE3431-KR-XS', 'SET413-KR-NP-M', 'SET226-KR-PP-M', 'JNE3336-KR-XS', 'J0077-SKD-M', 'MEN5003-KR-XXL', 'JNE3482-KR-M', 'J0139-KR-XL', 'JNE1906-KR-031-XXL', 'SET195-KR-NP-A-L', 'JNE3454-KR-XS', 'J0153-DR-S', 'JNE3797-KR-S', 'JNE3609-KR-S', 'J0213-TP-XL', 'JNE3435-KR-XL', 'JNE2291-KR-602-XXXL', 'JNE3749-KR-XXL', 'SET384-KR-NP-M', 'SET272-KR-PP-XL', 'SET339-KR-NP-XS', 'JNE3615-KR-M', 'JNE3427-KR-M', 'SET400-KR-NP-S', 'JNE3775-KR-XXL', 'JNE3861-DR-S', 'JNE3709-DR-S', 'SET280-KR-PP-XL', 'J0081-DR-S', 'SET238-KR-PP-XL', 'BTM045-PP-XXL', 'SET230-KR-PP-XL', 'J0232-SKD-XXL', 'SET132-KR-NP-XS', 'J0376-SKD-XXL', 'J0157-DR-XL', 'J0296-DR-S', 'CH213-BROWN-M', 'J0377-SKD-L', 'JNE3708-TU-M', 'BTM042-PP-L', 'SET205-KR-DPT-A-XXXL', 'JNE3484-KR-XXL', 'BTM027-NP-XXXL', 'J0113-TP-S', 'JNE3820-KR-XS', 'JNE1525-KR-UDF19-A-XS', 'JNE3611-KR-L', 'NW005-ST-PJ-M', 'SET295-KR-NP-XXL', 'JNE3559-KR-XL', 'NW012-TP-PJ-XXXL', 'J0175-KR-XXL', 'SET193-KR-NP-A-M', 'J0162-SKD-XXL', 'JNE3546-KR-XXXL', 'SET205-KR-DPT-A-S', 'J0090-TP-XXXL', 'JNE3714-KR-M', 'SET341-KR-NP-XL', 'JNE3726-KR-XL', 'JNE3743-TP-XS', 'J0310-TP-XXL', 'SET209-KR-PP-S', 'SET395-KR-NP-XXL', 'J0228-SKD-XL', 'J0025-DR-S', 'J0111-TP-XL', 'SET273-KR-NP-XL', 'J0209-DR-L', 'JNE3641-TP-N-S', 'J0250-SKD-XXL', 'SET220-KR-PP-L', 'JNE3835-KR-XXXL', 'JNE3836-KR-XXXL', 'SET307-KR-DPT-M', 'JNE3313-KR-A-XS', 'SET396-KR-PP-M', 'JNE2113-KR-381-S', 'JNE3638-KR-S', 'JNE3294-KR-XL', 'SET385-KR-NP-XXL', 'JNE3807-KR-XXXL', 'SET220-KR-PP-XXL', 'SET227-KR-PP-A-XXL', 'J0231-SKD-S', 'J0012-SKD-XS', 'J0148-SET-XS', 'J0345-SET-XXXL', 'JNE3458-KR-XL', 'SET258-KR-PP-XS', 'JNE3455-KR-XXXL', 'SET295-KR-NP-XS', 'SET282-KR-PP-XS', 'JNE2291-KR-602-XL', 'J0090-TP-XL', 'SET185-KR-NP-XXXL', 'J0212-DR-L', 'J0108-SKD-XS', 'JNE2032-KR-205-XL', 'SET364-KR-NP-S', 'JNE3548-KR-XXL', 'NW029-ST-SR-M', 'SET156-KR-NP-XXL', 'SET116-KR-NP-XXL', 'SET227-KR-PP-A-M', 'JNE3880-DR-S', 'JNE3458-KR-L', 'JNE2100-KR-144-M', 'SET385-KR-NP-S', 'JNE3445-KR-XXL', 'JNE3764-KR-XXXL', 'J0047-TP-XL', 'J0329-KR-XS', 'JNE3288-KR-XL', 'SET316-KR-DPT-XL', 'SET337-KR-NP-M', 'SET281-KR-PP-L', 'MEN5019-KR-XL', 'JNE3369-KR-XXL', 'SET316-KR-DPT-L', 'J0165-TP-L', 'J0244-SKD-XXXL', 'SET048-KR-NP-XXXL', 'JNE3425-KR-L', 'J0161-DR-XS', 'JNE3553-KR-XXXL', 'J0085-TP-S', 'SET355-KR-PP-XS', 'JNE3610-KR-XXL', 'JNE3833-KR-L', 'SET360-KR-NP-XXXL', 'JNE3793-KR-XL', 'SET188-KR-NP-XXXL', 'SET413-KR-NP-XL', 'NW015-TP-PJ-XS', 'BL024-74RED', 'J0155-KR-XXXL', 'SET322-KR-SHA-XXXL', 'J0133-KR-XS', 'J0010-LCD-XXXL', 'JNE3741-KR-M', 'SET329-KR-NP-XS', 'SET246-KR-PP-XS', 'SET369-KR-NP-XXXL', 'JNE3767-KR-XS', 'SET197-KR-NP-XS', 'MEN5027-KR-XXL', 'JNE3619-KR-S', 'J0009-SKD-M', 'JNE3745-KR-XXXL', 'SET282-KR-PP-S', 'BTM029-NP-S', 'J0157-DR-M', 'SET320-KR-NP-L', 'JNE3425-KR-XL', 'J0204-TP-S', 'J0204-TP-XXL', 'SET395-KR-NP-L', 'JNE3686-TU-L', 'SET273-KR-NP-XXL', 'JNE3834-KR-XXL', 'JNE3729-KR-XXXL', 'J0194-DR-XXXL', 'SET339-KR-NP-XXXL', 'JNE3523-KR-XS', 'J0029-KR-XS', 'J0051-KR-S', 'J0210-DR-XXXL', 'J0088-TP-L', 'JNE3688-TU-L', 'JNE3635-KR-XXL', 'JNE3608-KR-S', 'JNE3752-KR-XL', 'JNE3671-TU-M', 'NW004-TP-PJ-XL', 'SET156-KR-NP-XXXL', 'SET217-KR-PP-M', 'J0210-DR-L', 'BL101-S', 'BTM047-PP-S', 'J0124-TP-XXXL', 'NW007-ST-CP-L', 'BL035-161GOLD', 'JNE1906-KR-031-XXXL', 'J0371-SKD-XS', 'NW022-TP-PJ-XS', 'JNE3575-KR-XL', 'JNE3421-KR-N-XL', 'SET287-KR-NP-XL', 'SET355-KR-PP-S', 'J0049-TP-XS', 'J0088-TP-XS', 'JNE3763-KR-XS', 'SET220-KR-PP-XXXL', 'SET326-KR-PP-XXL', 'JNE3807-KR-M', 'BL110-XS', 'J0372-SKD-XXXL', 'J0299-KR-S', 'J0088-TP-M', 'J0153-DR-L', 'J0399-DR-XXL', 'JNE3732-KR-L', 'SET179-KR-PP-XXXL', 'SET210-KR-PP-XL', 'J0009-SKD-XL', 'JNE3430-KR-XXL', 'BL019-71PINK-B', 'SAR070', 'JNE3738-KR-M', 'JNE3473-KR-M', 'JNE3757-KR-M', 'JNE3689-TU-L', 'BL089-XXL', 'J0167-KR-M', 'JNE2291-KR-602-XXL', 'JNE2131-KR-A-L', 'JNE3735-KR-M', 'SET303-KR-NP-M', 'JNE3776-KR-XXL', 'JNE3740-KR-S', 'JNE3548-KR-XL', 'JNE3421-KR-L', 'JNE2291-KR-602-M', 'JNE3565-KR-XS', 'SET058-KR-NP-S', 'JNE3467-KR-XS', 'JNE1234-MULTI-KR-032-XL', 'SET272-KR-PP-XXL', 'JNE3670-TU-XXL', 'SET265-KR-NP-XXL', 'J0380-SKD-XXL', 'JNE3606-KR-XL', 'NW001-TP-PJ-XXXL', 'SET396-KR-PP-XXL', 'J0196-TP-L', 'JNE3742-KR-XXXL', 'SET186-KR-DH-L', 'NW004-TP-PJ-M', 'NW020-ST-SR-XL', 'SET378-KR-NP-XXL', 'SET165-KR-PP-S', 'SET342-KR-NP-N-M', 'J0202-TP-S', 'J0078-SET-L', 'JNE3742-KR-XL', 'JNE3510-KR-XS', 'MEN5010-KR-XXXL', 'JNE3609-KR-XS', 'SET276-KR-PP-M', 'J0234-SKD-S', 'J0021-TP-L', 'NW034-TP-PJ-XS', 'JNE3488-KR-XS', 'JNE3516-KR-E-S', 'J0348-SET-M', 'JNE3835-KR-XS', 'JNE3401-KR-L', 'SET073-KR-SHA-XL', 'JNE3807-KR-L', 'JNE3676-TU-L', 'JNE3672-TU-M', 'SET053-KR-NP-S', 'SET290-KR-DPT-L', 'BL104-XXL', 'J0034-SET-M', 'JNE3412-KR-XS', 'JNE3680-TU-XXL', 'J0151-KR-XXL', 'SET094-KR-NP-S', 'MEN5027-KR-S', 'J0243-DR-S', 'J0285-SKD-L', 'SET085-KR-PT-XS', 'SET365-KR-NP-S', 'JNE3766-KR-L', 'SET217-KR-PP-XXL', 'J0372-SKD-XXL', 'J0148-SET-XXXL', 'JNE3394-KR-A-XS', 'J0043-SET-XS', 'J0369-SKD-M', 'J0306-DR-XXL', 'JNE3651-TP-N-L', 'J0240-SKD-XXXL', 'J0158-DR-M', 'BTM021-B-XS', 'SET310-KR-NP-M', 'SET380-KR-NP-XL', 'JNE3761-KR-S', 'JNE3614-KR-XS', 'SET344-KR-NP-L', 'JNE3674-TU-L', 'JNE3782-KR-XXL', 'SET143-KR-PP-XS', 'JNE3798-KR-XXXL', 'JNE3798-KR-XS', 'NW031-TP-PJ-L', 'JNE3440-KR-N-S', 'SET224-KR-NP-XXL', 'JNE3421-KR-M', 'SET300-KR-NP-M', 'JNE2032-KR-205-S', 'J0245-SKD-M', 'J0369-SKD-S', 'JNE3803-KR-M', 'JNE2014-KR-178-XS', 'BL109-XS', 'JNE3698-KR-L', 'J0092-SET-L', 'AN208-MUSTARD-XXL', 'JNE3817-KR-S', 'JNE1233-BLUE-KR-031-L', 'JNE2100-KR-144-XL', 'J0210-DR-XS', 'J0144-SET-S', 'J0235-SKD-S', 'JNE3800-KR-A-XS', 'J0250-SKD-L', 'JNE3614-KR-XXXL', 'SET094-KR-NP-M', 'JNE3719-KR-XXL', 'SET044-KR-NP-XL', 'NW016-ST-SR-XL', 'JNE3866-KR-M', 'JNE3622-KR-XL', 'JNE3675-TU-XXL', 'MEN5025-KR-L', 'J0203-TP-XXL', 'JNE3635-KR-XS', 'J0147-SET-XXL', 'J0135-SET-M', 'SET395-KR-NP-XS', 'JNE3798-KR-S', 'JNE3579-KR-XXL', 'JNE3606-KR-XXXL', 'SET131-KR-NP-A-XXXL', 'SET195-KR-NP-A-S', 'J0249-SKD-XL', 'SET267-KR-NP-L', 'J0381-SKD-L', 'J0086-DR-XXXL', 'SET044-KR-NP-L', 'J0281-SKD-XXL', 'JNE3466-KR-XL', 'SET158-KR-PP-L', 'JNE3360-KR-S', 'JNE3603-KR-S', 'J0307-TP-S', 'J0165-TP-XXL', 'JNE3261-KR-XXXL', 'NW013-ST-SR-M', 'SET279-LC-M', 'SET288-KR-NP-L', 'SET192-KR-NP-XS', 'SET302-KR-PP-L', 'JNE3621-KR-M', 'NW015-TP-PJ-S', 'J0234-SKD-M', 'SET344-KR-NP-XS', 'J0181-TP-L', 'JNE3459-KR-XXL', 'SET326-KR-PP-M', 'SET257-KR-PP-S', 'SET285-KR-SHA-S', 'SET267-KR-NP-M', 'JNE3787-KR-M', 'NW024-TP-PJ-XXL', 'J0282-SET-XXXL', 'JNE3432-KR-L', 'SAR042', 'J0106-KR-XL', 'SET197-KR-NP-S', 'JNE3730-KR-L', 'JNE3578-KR-S', 'BTM041-PP-XXXL', 'SAR140', 'JNE1975-KR-309-XS', 'JNE3742-KR-L', 'J0334-TP-XXL', 'J0013-SKD-M', 'JNE3556-KR-M', 'JNE3557-KR-M', 'JNE3607-KR-XXXL', 'SET188-KR-NP-L', 'BL006-54BLACK-B', 'J0114-TP-M', 'SET185-KR-NP-XL', 'MEN5014-KR-M', 'JNE1408-GREY-KR-UDF19-S', 'JNE3408-KR-M', 'SET192-KR-NP-XXL', 'SET192-KR-NP-L', 'JNE3557-KR-XL', 'SET250-KR-SHA-L', 'SET277-KR-NP-XL', 'SET271-KR-NP-S', 'JNE3506-KR-M', 'JNE1233-BLUE-KR-031-XL', 'NW030-TP-PJ-XXXL', 'SET380-KR-NP-XXL', 'SET131-KR-NP-L', 'JNE3856-KR-XXL', 'SET323-KR-NP-XL', 'SET196-KR-NP-L', 'JNE3714-KR-XL', 'J0165-TP-XL', 'SET014-KR-PP-A-XXXL', 'JNE3732-KR-XXXL', 'J0215-BL-XL', 'J0207-DR-XXL', 'JNE3391-KR-XL', 'MEN5024-KR-XL', 'SET318-KR-SHA-XXXL', 'SET317-KR-PP-XXXL', 'SET254-KR-NP-S', 'MEN5008-KR-S', 'J0094-KR-S', 'J0414-DR-S', 'NW035-ST-CP-XS', 'JNE3742-KR-S', 'J0122-TP-S', 'JNE3732-KR-S', 'JNE3443-KR-S', 'JNE1234-MULTI-KR-032-S', 'J0307-TP-XXL', 'JNE3666-TP-L', 'JNE3412-KR-XXXL', 'BTM038-PP-S', 'SET280-KR-PP-XXL', 'J0105-KR-XL', 'SET400-KR-NP-M', 'SET075-KR-DH-XS', 'SET277-KR-NP-S', 'SET142-KR-PP-L', 'JNE3421-KR-XL', 'JNE3366-KR-1053-S', 'JNE3669-TU-XXL', 'J0413-DR-XXL', 'JNE3474-KR-E-XL', 'J0208-DR-XXXL', 'J0081-DR-XXXL', 'JNE3775-KR-M', 'BTM039-PP-M', 'J0336-TP-L', 'J0090-TP-L', 'BTM032-NP-XS', 'J0211-DR-L', 'JNE1977-KR-237-XL', 'J0172-TP-XXXL', 'BTM035-NP-XS', 'NW002-TP-PJ-XL', 'JNE1951-KR-155-M', 'SET218-KR-NP-XL', 'SET360-KR-NP-S', 'JNE3788-KR-XXXL', 'SET279-LC-XL', 'JNE3762-KR-XXXL', 'J0023-TP-S', 'JNE3400-KR-L', 'BL104-S', 'J0109-SKD-XXL', 'J0332-DR-XS', 'NW005-ST-PJ-S', 'JNE3501-KR-M', 'SET262-KR-NP-XL', 'JNE3687-TU-L', 'J0324-CD-L', 'BTM039-PP-S', 'JNE3364-KR-1051-A-M', 'JNE3666-TP-XXL', 'JNE3740-KR-M', 'BTM039-PP-XXXL', 'JNE3671-TU-L', 'JNE3531-KR-L', 'NW008-ST-CP-XL', 'JNE3359-KR-L', 'NW001-TP-PJ-S', 'SET087-KR-PP-XL', 'JNE3638-KR-XL', 'SET402-KR-NP-S', 'SET223-KR-NP-XXL', 'J0164-DR-M', 'JNE3783-KR-XL', 'J0285-SKD-XXL', 'JNE3383-KR-A-XXXL', 'JNE1998-KR-311-XS', 'SET158-KR-PP-M', 'NW008-ST-CP-XXL', 'NW005-ST-PJ-XXL', 'JNE3518-KR-XXXL', 'JNE2305-KR-533-XS', 'NW003-TP-PJ-XL', 'BL093-S', 'J0203-TP-XL', 'BL110-S', 'JNE3489-KR-M', 'JNE3622-KR-M', 'SET053-KR-NP-L', 'J0195-TP-XL', 'JNE3294-KR-XS', 'SET315-KR-PP-XXXL', 'JNE3810-KR-XXL', 'JNE3623-KR-L', 'JNE3684-TU-L', 'J0113-TP-L', 'JNE2032-KR-205-M', 'JNE3680-TU-S', 'JNE3476-KR-XS', 'JNE3637-KR-L', 'JNE3732-KR-XXL', 'SET350-KR-NP-S', 'JNE3443-KR-XXXL', 'SET196-KR-NP-XXL', 'BL111-L', 'BL110-L', 'JNE3454-KR-XL', 'J0306-DR-S', 'J0109-SKD-XXXL', 'SET252-KR-PP-XXXL', 'JNE3671-TU-S', 'CH203-MAROON-L', 'SET408-KR-NP-L', 'JNE3466-KR-XXXL', 'J0197-TP-XXL', 'JNE3744-TU-XXL', 'SET198-KR-NP-A-XS', 'MEN5019-KR-S', 'J0396-DR-M', 'JNE3613-KR-XS', 'BL111-S', 'J0134-SET-XXL', 'SET055-KR-NP-L', 'NW039-TP-SR-XL', 'J0196-TP-XL', 'J0070-KR-XXL', 'SET302-KR-PP-XS', 'JNE3785-KR-XL', 'JNE3793-KR-L', 'J0332-DR-XL', 'JNE3655-TP-L', 'JNE3639-TP-N-XS', 'JNE3702-KR-S', 'JNE3792-KR-S', 'SET251-KR-PP-XS', 'JNE3834-KR-XS', 'SET248-KR-NP-L', 'JNE3715-KR-L', 'JNE2265-KR-501-L', 'JNE3470-KR-L', 'JNE3680-TU-M', 'SET155-KR-PP-S', 'JNE3460-KR-M', 'JNE3501-KR-L', 'JNE3412-KR-L', 'JNE3483-KR-L', 'SET340-KR-NP-XXL', 'J0373-KR-XXL', 'SET131-KR-NP-M', 'J0210-DR-M', 'JNE3622-KR-L', 'J0211-DR-XXXL', 'J0176-TP-XXL', 'BTM026-NP-XS', 'J0189-TP-XL', 'MEN5011-KR-S', 'SAR048', 'J0130-SET-XS', 'SET182-KR-DH-XL', 'JNE3756-KR-L', 'NW037-TP-SR-S', 'JNE2170-KR-436-M', 'BTM045-PP-XL', 'J0371-SKD-XXL', 'J0243-DR-L', 'J0254-SKD-L', 'JNE2170-KR-436-XXXL', 'JNE3822-KR-XS', 'JNE3759-KR-S', 'J0240-SKD-L', 'JNE3771-KR-XXXL', 'JNE3782-KR-XS', 'SET199-KR-NP-XXL', 'J0331-KR-XL', 'JNE3400-KR-M', 'J0239-SKD-L', 'JNE3726-KR-M', 'JNE3438-KR-S', 'SET308-KR-PP-M', 'JNE3622-KR-XXL', 'BL026-74BEIGE', 'J0249-SKD-XXL', 'SET253-KR-NP-XS', 'J0075-KR-S', 'SET179-KR-PP-S', 'SET310-KR-NP-XS', 'JNE3270-KR-XS', 'SET209-KR-PP-M', 'J0158-DR-XS', 'J0306-DR-XXXL', 'SET062-KR-SP-XXXL', 'MEN5021-KR-S', 'SET204-KR-DPT-XS', 'JNE3522-KR-S', 'BL113-L', 'J0195-TP-XXL', 'MEN5026-KR-L', 'SET233-KR-PP-S', 'JNE3642-TP-XXL', 'JNE3607-KR-S', 'J0345-SET-XL', 'J0416-DR-M', 'J0023-TP-L', 'J0416-DR-L', 'JNE3428-KR-S', 'SET277-KR-NP-M', 'JNE3740-KR-L', 'J0109-SKD-XL', 'JNE2100-KR-144-L', 'J0134-SET-S', 'SET390-KR-NP-L', 'MEN5002-KR-XXXL', 'J0009-SKD-L', 'JNE3549-KR-M', 'JNE3383-KR-A-M', 'SET384-KR-NP-L', 'J0251-SKD-M', 'JNE3447-KR-S', 'J0088-TP-S', 'J0283-SET-XS', 'J0343-DR-XS', 'J0340-TP-XXL', 'JNE3675-TU-XS', 'JNE3607-KR-XL', 'SET369-KR-NP-XS', 'JNE3630-KR-M', 'JNE3452-KR-XL', 'J0014-LCD-XS', 'JNE3412-KR-M', 'JNE3793-KR-XXXL', 'J0306-DR-XL', 'NW012-TP-PJ-L', 'J0101-DR-L', 'J0213-TP-XS', 'SET285-KR-SHA-M', 'J0144-SET-XXL', 'J0143-SET-A-XS', 'J0208-DR-XL', 'SET075-KR-DH-XXXL', 'JNE3791-DR-XXXL', 'J0214-TP-XL', 'SET342-KR-NP-N-L', 'SET307-KR-DPT-L', 'JNE3542-KR-M', 'J0306-DR-L', 'SET350-KR-NP-M', 'J0189-TP-L', 'JNE3573-KR-S', 'JNE3742-KR-XXL', 'SET183-KR-DH-L', 'SET396-KR-PP-S', 'JNE1977-KR-237-XS', 'JNE3811-KR-M', 'J0197-TP-M', 'J0176-TP-XL', 'JNE3471-KR-M', 'JNE3617-KR-L', 'BL022-71BEIGE', 'SET043-KR-NP-XL', 'JNE3383-KR-A-XS', 'JNE3613-KR-XXXL', 'SET218-KR-NP-XXXL', 'BL099-XS', 'J0220-BL-XXL', 'NW004-TP-PJ-XXL', 'SET351-KR-NP-M', 'J0380-SKD-M', 'JNE3817-KR-L', 'JNE3878-KR-XL', 'JNE3820-KR-S', 'J0119-TP-S', 'JNE3471-KR-S', 'JNE3454-KR-L', 'BL113-XXL', 'J0337-TP-XS', 'J0297-TP-XS', 'JNE3435-KR-S', 'JNE3348-KR-XXL', 'JNE3225-KR-XS', 'J0214-TP-XXXL', 'JNE3577-KR-M', 'JNE3447-KR-XS', 'SET055-KR-NP-M', 'JNE3776-KR-M', 'SET329-KR-NP-XL', 'JNE3704-KR-XXXL', 'JNE3617-KR-XXL', 'JNE3619-KR-XXL', 'JNE3757-KR-L', 'J0370-SKD-S', 'JNE3709-DR-XXL', 'JNE3799-KR-XXXL', 'JNE3566-KR-M', 'J0168-DR-S', 'JNE3503-KR-XXXL', 'SET346-KR-PP-XL', 'JNE3564-KR-M', 'J0082-TP-XL', 'J0348-SET-L', 'J0048-TP-XL', 'JNE1975-KR-309-XXL', 'JNE1234-MULTI-KR-032-XS', 'JNE1975-KR-309-S', 'BL090-S', 'J0252-SKD-XL', 'J0091-TP-XXXL', 'JNE3256-KR-M', 'JNE2266-KR-490-A-XS', 'J0104-KR-XXL', 'JNE3691-TU-XXL', 'MEN5007-KR-XXXL', 'J0152-DR-L', 'SET258-KR-PP-S', 'J0242-SKD-L', 'JNE3765-KR-XS', 'SET250-KR-SHA-XXL', 'JNE3810-KR-L', 'JNE3707-DR-XL', 'BL103-L', 'JNE3482-KR-XXL', 'MEN5018-KR-M', 'J0164-DR-S', 'JNE3559-KR-XXXL', 'JNE3822-KR-S', 'JNE3427-KR-XXL', 'JNE3879-DR-M', 'BTM033-NP-XS', 'JNE3686-TU-M', 'SET271-KR-NP-XXL', 'JNE3429-KR-L', 'SET253-KR-NP-S', 'J0196-TP-M', 'BTM008-XXL', 'JNE2209-KR-498-A-XL', 'JNE3774-KR-XS', 'JNE3571-KR-M', 'J0041-SET-XS', 'J0093-DR-L', 'BTM030-NP-S', 'JNE3311-KR-M', 'SET246-KR-PP-S', 'NW031-TP-PJ-S', 'SET302-KR-PP-XXL', 'J0231-SKD-XXL', 'JNE3816-KR-XL', 'SET401-KR-NP-L', 'JNE3256-KR-S', 'BL004-50CHIKU-B', 'BL101-XS', 'BL102-XS', 'JNE3030-KR-L', 'JNE3629-KR-XL', 'J0247-SKD-XXXL', 'JNE3640-TP-N-XL', 'JNE3252-KR-XL', 'JNE3484-KR-L', 'JNE3712-TP-N-S', 'J0204-TP-XL', 'JNE3369-KR-L', 'JNE1233-BLUE-KR-031-XXXL', 'BL006-54BLACK', 'J0147-SET-XS', 'J0130-SET-M', 'BTM030-NP-XS', 'SET130-KR-NP-XXXL', 'JNE3823-KR-M', 'JNE3758-KR-L', 'JNE3435-KR-M', 'SET014-KR-PP-L', 'J0048-TP-XXL', 'JNE3506-KR-S', 'J0081-DR-L', 'JNE3720-KR-XS', 'JNE3383-KR-A-XL', 'JNE3807-KR-XS', 'JNE3778-KR-L', 'SET083-KR-PP-XXXL', 'JNE3678-TU-M', 'SET252-KR-PP-S', 'JNE3558-KR-S', 'J0005-DR-XXXL', 'JNE1525-KR-UDF19BLACK-XXXL', 'JNE3575-KR-XXL', 'JNE3760-KR-XL', 'J0096-KR-M', 'JNE3428-KR-M', 'JNE3760-KR-L', 'JNE3673-TU-S', 'JNE3633-KR-XXXL', 'JNE3459-KR-XL', 'J0033-KR-XXL', 'SET043-KR-NP-L', 'JNE2171-KR-437-XXL', 'JNE3432-KR-XXL', 'J0304-TP-XS', 'BTM037-PP-XS', 'BTM048-PP-XS', 'J0375-SKD-XXL', 'JNE2032-KR-205-L', 'JNE3431-KR-XXXL', 'JNE3878-KR-XXXL', 'JNE3376-KR-XXXL', 'JNE3425-KR-XXXL', 'J0087-TP-XL', 'JNE3065-KR-XL', 'BTM026-NP-S', 'JNE3270-KR-S', 'SET386-KR-NP-XXXL', 'JNE3673-TU-M', 'JNE3313-KR-A-XXXL', 'SET044-KR-NP-XXL', 'JNE3451-KR-XXXL', 'SET357-KR-NP-XL', 'J0091-TP-XL', 'JNE3403-KR-L', 'JNE2251-KR-537-XS', 'JNE2305-KR-533-S', 'BTM041-PP-S', 'JNE3160-KR-S', 'SET201-KR-NP-A-XS', 'JNE1906-KR-031-M', 'JNE3816-KR-M', 'JNE3539-KR-M', 'JNE3363-KR-1032-M', 'JNE3144-KR-S', 'J0334-TP-XS', 'JNE3466-KR-XS', 'JNE3404-KR-XXXL', 'NW027-TP-PJ-XXL', 'NW015-TP-PJ-XXL', 'JNE3806-KR-XXXL', 'J0369-SKD-XXL', 'JNE3611-KR-XS', 'SET051-KR-NP-XXXL', 'J0072-KR-XL', 'JNE3501-KR-XXXL', 'SET062-KR-SP-M', 'J0001-DR-XXL', 'SET200-KR-NP-A-XXL', 'SET343-KR-NP-L', 'J0185-DR-XS', 'JNE3458-KR-M', 'NW003-TP-PJ-XXL', 'SET277-KR-NP-XS', 'J0070-KR-M', 'JNE3803-KR-XS', 'J0096-KR-L', 'JNE3530-KR-XS', 'MEN5011-KR-XXL', 'J0328-KR-XXXL', 'J0007-SKD-XXL', 'J0310-TP-XS', 'SAR041', 'JNE3562-KR-L', 'JNE3516-KR-E-L', 'JNE3636-KR-L', 'JNE3788-KR-M', 'JNE3413-KR-L', 'JNE3439-KR-XS', 'JNE3371-KR-XS', 'JNE3459-KR-S', 'SET326-KR-PP-XXXL', 'JNE3504-KR-M', 'SET320-KR-NP-S', 'J0331-KR-M', 'J0369-SKD-XL', 'SET221-KR-NP-L', 'JNE3707-DR-M', 'SET247-KR-SHA-XS', 'JNE3528-KR-M', 'JNE3660-TP-N-M', 'JNE3719-KR-L', 'JNE3480-KR-L', 'SET289-KR-NP-XS', 'MEN5007-KR-L', 'SET038-KR-PP-XS', 'JNE3745-KR-M', 'J0134-SET-XS', 'JNE3675-TU-XL', 'JNE3442-KR-XXL', 'JNE3530-KR-S', 'JNE3565-KR-S', 'JNE3270-KR-XXL', 'J0239-SKD-XL', 'JNE3486-KR-XS', 'JNE3640-TP-N-XS', 'SET230-KR-PP-XS', 'SET400-KR-NP-XS', 'SET209-KR-PP-XL', 'SET378-KR-NP-L', 'SET435-KR-NP-M', 'NW035-ST-CP-M', 'JNE3365-KR-1052-A-XXL', 'JNE3760-KR-M', 'J0205-TP-XS', 'CH204-PURPLE-L', 'CH213-BROWN-L', 'MEN5028-KR-M', 'JNE3366-KR-1053-XL', 'SET156-KR-NP-XL', 'JNE3376-KR-XL', 'JNE3471-KR-XS', 'J0213-TP-S', 'SET326-KR-PP-S', 'J0160-TP-XXL', 'JNE3612-KR-M', 'NW012-TP-PJ-M', 'SET048-KR-NP-M', 'JNE2171-KR-437-XXXL', 'J0143-SET-A-XXXL', 'SET087-KR-PP-S', 'JNE3412-KR-XL', 'JNE3655-TP-XL', 'SET276-KR-PP-S', 'JNE3700-KR-XXXL', 'J0011-LCD-XXL', 'JNE2307-KR-572-XXL', 'JNE3454-KR-S', 'BL103-XS', 'J0354-KR-XXL', 'JNE1977-KR-237-L', 'NW008-ST-CP-M', 'J0147-SET-M', 'JNE3160-KR-XXXL', 'JNE2291-KR-602-L', 'NW020-ST-SR-S', 'J0342-TP-XS', 'SET154-KR-NP-XXXL', 'JNE3778-KR-XL', 'JNE3030-KR-XS', 'SET062-KR-SP-S', 'SET321-KR-DPT-S', 'JNE3813-KR-XS', 'JNE3617-KR-XS', 'JNE3819-KR-M', 'J0092-SET-XXXL', 'J0239-SKD-S', 'JNE3452-KR-XS', 'SET306-KR-PP-XXL', 'J0201-TP-XL', 'NW029-ST-SR-S', 'CH202-ORANGE-L', 'J0180-DR-XXL', 'SET293-KR-NP-L', 'SET300-KR-NP-XXXL', 'JNE3522-KR-XS', 'SET230-KR-PP-L', 'JNE3756-KR-XXL', 'JNE3643-TP-N-XL', 'BTM021-B-L', 'BTM002-B-L', 'JNE3562-KR-M', 'JNE3323-KR-A-XS', 'BL101-XXL', 'MEN5006-KR-S', 'JNE3441-KR-S', 'SET058-KR-NP-XXL', 'JNE2132-KR-398-XS', 'JNE3500-KR-M', 'JNE3749-KR-XL', 'NW007-ST-CP-XXL', 'SET403-KR-NP-XL', 'JNE3400-KR-XS', 'JNE3610-KR-XXXL', 'JNE3714-KR-XS', 'JNE3778-KR-XS', 'JNE3581-KR-L', 'JNE3364-KR-1051-A-XS', 'JNE3864-TU-L', 'JNE3726-KR-XXL', 'SET156-KR-NP-L', 'J0106-KR-S', 'JNE3656-TP-N-M', 'JNE3763-KR-XXXL', 'JNE3714-KR-XXL', 'J0025-DR-XXL', 'J0195-TP-XXXL', 'SET132-KR-NP-M', 'J0117-TP-XXXL', 'JNE3614-KR-XXL', 'JNE3549-KR-XXXL', 'JNE2291-KR-602-S', 'J0062-DR-XS', 'J0072-KR-XXXL', 'JNE3348-KR-M', 'JNE3615-KR-XL', 'SET194-KR-NP-XXL', 'J0120-TP-XL', 'JNE3523-KR-XL', 'J0248-KR-DPT-XS', 'SET196-KR-NP-XL', 'J0184-KR-A-L', 'SET004-KR-SP-A-XXXL', 'JNE3255-KR-XS', 'NW005-ST-PJ-XS', 'JNE3554-KR-L', 'SET232-KR-PP-L', 'JNE3395-KR-S', 'NW013-ST-SR-XXL', 'MEN5020-KR-S', 'SET131-KR-NP-A-L', 'SET351-KR-NP-XL', 'JNE3668-TP-N-XL', 'J0298-DR-XS', 'NW022-TP-PJ-XXL', 'SET145-KR-NP-XL', 'J0333-DR-M', 'J0205-TP-S', 'BTM047-PP-XXL', 'J0095-SET-S', 'J0172-TP-XL', 'J0214-TP-M', 'J0143-SET-A-S', 'JNE3416-KR-XXL', 'JNE3833-KR-M', 'JNE3712-TP-N-XS', 'SET401-KR-NP-XXXL', 'SET138-KR-PP-XS', 'J0277-SKD-XS', 'JNE2321-KR-576-L', 'JNE3771-KR-M', 'JNE3273-KR-XL', 'SET219-KR-PP-S', 'J0131-KR-XS', 'JNE3438-KR-XL', 'J0202-TP-XL', 'J0340-TP-XL', 'SET250-KR-SHA-XS', 'JNE3528-KR-XXXL', 'J0238-LCD-XXXL', 'J0087-TP-S', 'J0110-SKD-S', 'JNE1234-MULTI-KR-032-XXL', 'JNE3420-KR-L', 'JNE3474-KR-E-S', 'JNE09186-BLUE-SR-JP7104RMV-K', 'SAR092', 'SAR110', 'JNE3507-KR-XXL', 'NW032-ST-CP-M', 'J0233-SKD-XS', 'JNE3501-KR-XS', 'SET196-KR-NP-XXXL', 'JNE3270-KR-XL', 'JNE1525-KR-UDF19BLACK-M', 'JNE3735-KR-XL', 'JNE2265-KR-501-XXL', 'J0214-TP-L', 'JNE3457-KR-XL', 'NW038-ST-SR-XXL', 'J0376-SKD-XXXL', 'BL036-176GOLD', 'JNE3515-KR-XS', 'SET335-KR-NP-M', 'JNE3881-DR-XL', 'JNE3602-KR-XXL', 'SET230-KR-PP-XXXL', 'JNE3454-KR-XXXL', 'JNE3825-KR-S', 'JNE3887-KR-XXXL', 'SET138-KR-PP-XXXL', 'JNE3816-KR-L', 'J0178-TP-XS', 'SET395-KR-NP-XXXL', 'NW035-ST-CP-S', 'JNE3655-TP-XXL', 'MEN5029-KR-L', 'J0092-SET-XS', 'JNE3524-KR-M', 'SET187-KR-DH-L', 'SET069-KR-NP-XS', 'SET200-KR-NP-A-XL', 'SET350-KR-NP-XXL', 'J0184-KR-XS', 'JNE1525-KR-UDF19-A-M', 'JNE2265-KR-501-M', 'JNE3431-KR-S', 'J0077-SKD-S', 'SET332-KR-PP-M', 'JNE3480-KR-S', 'J0348-SET-XL', 'AN202-ORANGE-XXL', 'J0011-LCD-XS', 'NW012-TP-PJ-XXL', 'J0375-SKD-S', 'J0131-KR-XXL', 'JNE3800-KR-A-L', 'SET193-KR-NP-A-XL', 'MEN5030-KR-XL', 'JNE3436-KR-XS', 'J0112-TP-L', 'J0186-SET-L', 'JNE3451-KR-XL', 'SET147-KR-NP-S', 'JNE3613-KR-M', 'JNE3836-KR-XL', 'JNE3400-KR-XXL', 'JNE3880-DR-L', 'JNE3617-KR-XXXL', 'JNE3767-KR-L', 'SET318-KR-SHA-L', 'BTM002-B-XXXL', 'J0135-SET-XXXL', 'SAR071', 'SET038-KR-PP-L', 'SET403-KR-NP-S', 'NW005-ST-PJ-L', 'SET245-KR-NP-XL', 'JNE3256-KR-L', 'JNE3408-KR-L', 'SET392-KR-NP-S', 'BL073-85BLACK', 'MEN5003-KR-XL', 'JNE3563-KR-S', 'SET062-KR-SP-L', 'SET037-KR-NP-XXXL', 'SET243-KR-PP-S', 'J0201-TP-M', 'SET364-KR-NP-XS', 'JNE3756-KR-M', 'JNE3743-TP-L', 'PJNE2171-KR-N-4XL', 'BTM031-NP-XS', 'J0211-DR-XL', 'JNE3759-KR-XXL', 'NW008-ST-CP-XXXL', 'J0214-TP-XXL', 'JNE3670-TU-S', 'JNE3557-KR-S', 'J0310-TP-M', 'SET240-KR-PP-L', 'SET236-KR-PP-XS', 'JNE1525-KR-UDF19-A-XXL', 'J0093-DR-XS', 'J0129-SET-XS', 'J0205-TP-M', 'J0116-TP-S', 'JNE2170-KR-436-XS', 'SET153-KR-NP-XS', 'JNE3549-KR-S', 'JNE3366-KR-1053-A-L', 'SET014-KR-PP-XXXL', 'J0151-KR-S', 'J0291-JS-XS', 'JNE3674-TU-XL', 'SET286-KR-NP-S', 'SET334-KR-NP-M', 'JNE3758-KR-M', 'JNE3351-KR-XL', 'JNE3719-KR-M', 'J0150-KR-S', 'JNE3659-TP-N-XS', 'SET242-KR-PP-S', 'SET014-KR-PP-XS', 'JNE3574-KR-XXL', 'J0001-DR-XXXL', 'MEN5003-KR-M', 'JNE3489-KR-L', 'BTM003-M', 'JNE3524-KR-L', 'SET044-KR-NP-XXXL', 'JNE3719-KR-S', 'J0090-TP-XXL', 'BTM002-B-XL', 'SET396-KR-PP-XXXL', 'J0164-DR-L', 'J0381-SKD-M', 'JNE3516-KR-E-M', 'SET340-KR-NP-XXXL', 'NW009-ST-CP-L', 'SET243-KR-PP-M', 'J0096-KR-XXXL', 'JNE3896-KR-XXXL', 'JNE3825-KR-XS', 'SET239-KR-NP-XS', 'JNE3760-KR-XXXL', 'J0297-TP-L', 'JNE3431-KR-L', 'JNE3700-KR-L', 'J0370-SKD-XS', 'NW036-ST-SR-M', 'SET321-KR-DPT-XL', 'J0381-SKD-XS', 'JNE3806-KR-XS', 'J0351-SET-XS', 'SET249-KR-NP-XL', 'JNE3065-KR-S', 'SET221-KR-NP-XXXL', 'SET357-KR-NP-S', 'JNE3708-TU-XXXL', 'SET073-KR-SHA-XXXL', 'JNE3730-KR-M', 'J0210-DR-XXL', 'SET267-KR-NP-S', 'NW002-TP-PJ-S', 'NW012-TP-PJ-XS', 'MEN5029-KR-S', 'J0334-TP-XXXL', 'SET322-KR-SHA-XS', 'JNE3473-KR-XS', 'SET072-KR-SHA-S', 'JNE3253-KR-M', 'JNE3365-KR-1052-A-XL', 'JNE3531-KR-XXXL', 'J0181-TP-S', 'SET038-KR-PP-XXL', 'JNE3225-KR-XXXL', 'JNE2009-KR-310-XL', 'SET240-KR-PP-XXXL', 'J0212-DR-XXL', 'BL098-XS', 'J0019-SET-S', 'J0205-TP-XL', 'SET228-KR-PP-A-S', 'MEN5018-KR-S', 'JNE0722-K', 'J0087-TP-XXL', 'SET156-KR-NP-M', 'MEN5026-KR-S', 'SET204-KR-DPT-XXL', 'SET111-KR-SP-XXL', 'JNE3766-KR-XXXL', 'J0015-DR-S', 'NW006-ST-SR-S', 'J0053-KR-XS', 'JNE3407-KR-XXL', 'JNE3751-KR-M', 'JNE3544-KR-M', 'J0376-SKD-XL', 'JNE3879-DR-XL', 'JNE3404-KR-S', 'SET297-KR-NP-XXL', 'JNE3782-KR-L', 'SET339-KR-NP-M', 'JNE3866-KR-L', 'JNE3866-KR-XL', 'J0228-SKD-XXL', 'JNE3394-KR-XXL', 'SET229-KR-PP-XS', 'JNE3489-KR-XL', 'J0297-TP-M', 'SET339-KR-NP-XL', 'J0049-TP-XXL', 'JNE3452-KR-XXL', 'J0131-KR-L', 'JNE3612-KR-XXXL', 'J0378-SKD-XL', 'SET378-KR-NP-M', 'J0347-SET-XXL', 'BL025-74BLACK-B', 'SET143-KR-PP-M', 'JNE3810-KR-XXXL', 'SET271-KR-NP-XS', 'JNE3313-KR-S', 'JNE2291-KR-602-XS', 'J0187-KR-S', 'SET404-KR-NP-XS', 'JNE3894-TP-XL', 'JNE3806-KR-XL', 'SET305-KR-DPT-S', 'JNE3501-KR-S', 'J0251-SKD-S', 'J0247-SKD-M', 'JNE3531-KR-XS', 'JNE3818-KR-XS', 'JNE3783-KR-XXL', 'JNE3438-KR-XXL', 'JNE3674-TU-M', 'JNE3673-TU-XXXL', 'BTM031-NP-XXL', 'SET132-KR-NP-XL', 'J0297-TP-XL', 'BTM029-NP-XXXL', 'J0248-KR-DPT-XXL', 'JNE3776-KR-XXXL', 'NW037-TP-SR-XL', 'J0291-JS-XL', 'SET193-KR-NP-A-S', 'JNE3838-KR-XS', 'SET221-KR-NP-S', 'SET196-KR-NP-S', 'JNE3576-KR-XL', 'SET193-KR-NP-A-XXL', 'J0079-SKD-L', 'J0083-KR-XXL', 'SET205-KR-DPT-A-XS', 'J0377-SKD-S', 'JNE3565-KR-XXL', 'J0002-SKD-XS', 'BL090-M', 'JNE3658-TP-XXL', 'BL021-71BLACK-B', 'SET172-KR-PP-B-S', 'MEN5016-KR-M', 'JNE3717-KR-XXL', 'JNE3265-KR-S', 'JNE3334-KR-S', 'NW003-TP-PJ-S', 'SET353-KR-NP-S', 'J0283-SET-S', 'NW003-TP-PJ-XS', 'JNE3601-KR-XL', 'JNE3800-KR-A-M', 'JNE3425-KR-XXL', 'JNE3756-KR-XXXL', 'JNE3323-KR-A-L', 'J0179-KR-XS', 'JNE3376-KR-XS', 'JNE3726-KR-XS', 'JNE3369-KR-XS', 'JNE3434-KR-S', 'J0297-TP-XXL', 'SAR166', 'J0132-KR-L', 'CH205-YELLOW-S', 'JNE3740-KR-XS', 'JNE3487-KR-S', 'JNE3786-KR-XS', 'SET244-KR-NP-XXL', 'SET303-KR-NP-L', 'JNE3879-DR-XS', 'SET388-KR-NP-XXL', 'JNE3760-KR-XXL', 'SET326-KR-PP-L', 'MEN5031-KR-XL', 'MEN5021-KR-XXXL', 'JNE3743-TP-XL', 'JNE3670-TU-L', 'JNE3606-KR-M', 'SET131-KR-NP-A-M', 'JNE3383-KR-A-S', 'JNE3691-TU-XXXL', 'JNE3473-KR-L', 'JNE3457-KR-M', 'JNE3837-KR-XXL', 'JNE3687-TU-XXL', 'JNE3802-KR-XXL', 'BTM044-PP-XS', 'BTM040-PP-XS', 'BTM043-PP-XS', 'SET289-KR-NP-L', 'JNE3422-KR-M', 'J0089-TP-XS', 'J0087-TP-XS', 'JNE3707-DR-L', 'JNE3649-TP-N-XS', 'SET281-KR-PP-S', 'J0230-SKD-XXXL', 'MEN5006-KR-M', 'J0110-SKD-XL', 'J0332-DR-L', 'SET318-KR-SHA-XL', 'JNE3565-KR-L', 'JNE3225-KR-XL', 'JNE3441-KR-L', 'JNE3467-KR-XXXL', 'JNE3458-KR-XXXL', 'JNE3400-KR-XXXL', 'JNE3402-KR-L', 'SET308-KR-PP-S', 'BL090-XXL', 'J0249-SKD-XXXL', 'J0400-DR-XXL', 'JNE1525-KR-UDF19BLACK-XS', 'JNE3431-KR-M', 'JNE3467-KR-M', 'SET053-KR-NP-XXXL', 'JNE3753-KR-L', 'NW006-ST-SR-L', 'SET357-KR-NP-XS', 'NW038-TP-SR-L', 'SET171-KR-NP-XXL', 'JNE3613-KR-S', 'JNE3491-KR-XS', 'J0284-SKD-M', 'SET218-KR-NP-S', 'JNE3571-KR-XXL', 'JNE3838-KR-S', 'J0083-KR-S', 'J0247-SKD-XXL', 'SET158-KR-PP-XXL', 'SET281-KR-PP-M', 'SET289-KR-NP-M', 'JNE3270-KR-XXXL', 'JNE3655-TP-XS', 'JNE3396-KR-M', 'J0249-SKD-S', 'J0306-DR-XS', 'JNE3894-TP-XXXL', 'BL003-50BLACK-B', 'JNE3528-KR-XS', 'SET318-KR-SHA-S', 'JNE3738-KR-L', 'J0140-SET-XL', 'J0305-DR-S', 'BL074-85RED', 'J0184-KR-S', 'JNE3733-KR-M', 'BL029-78BLACK-B', 'J0397-DR-L', 'J0243-DR-XXL', 'J0188-KR-XS', 'SAR062', 'NW022-TP-PJ-L', 'J0413-DR-M', 'BTM042-PP-XXXL', 'J0135-SET-XL', 'J0153-DR-XL', 'J0232-SKD-L', 'SET273-KR-NP-L', 'SET144-KR-NP-L', 'CH208-MUSTARD-L', 'JNE3042-KR-XXL', 'JNE3694-KR-S', 'SET226-KR-PP-XXL', 'J0036-TP-XS', 'J0397-DR-XXXL', 'SET172-KR-PP-B-XL', 'SET333-KR-DPT-XXXL', 'SET094-KR-NP-L', 'J0175-KR-XXXL', 'SET276-KR-PP-XL', 'J0251-SKD-XL', 'MEN5013-KR-XXL', 'SET316-KR-DPT-XXL', 'J0400-DR-L', 'SET350-KR-NP-XS', 'SET369-KR-NP-S', 'J0083-KR-XXXL', 'JNE3566-KR-L', 'NW039-TP-SR-XXXL', 'NW035-ST-CP-XXL', 'JNE3398-KR-S', 'SET144-KR-NP-XL', 'JNE3751-KR-L', 'NW027-TP-PJ-M', 'JNE3501-KR-XL', 'SET238-KR-PP-M', 'JNE3535-KR-XXXL', 'JNE3452-KR-M', 'JNE3555-KR-XL', 'JNE1525-KR-UDF19-A-XXXL', 'SET073-KR-SHA-XS', 'J0020-SET-XXXL', 'JNE3864-TU-XXXL', 'JNE3602-KR-XL', 'JNE3819-KR-XXL', 'J0120-TP-XXXL', 'J0111-TP-XXL', 'JNE3727-KR-XL', 'J0352-KR-M', 'JNE3506-KR-XL', 'J0220-BL-S', 'JNE3436-KR-S', 'BL029-78BLACK', 'MEN5026-KR-XXL', 'JNE3614-KR-S', 'J0340-TP-XXXL', 'JNE3833-KR-XXL', 'SET409-KR-NP-M', 'MEN5005-KR-L', 'J0126-SKD-XS', 'JNE3619-KR-M', 'JNE3256-KR-XS', 'JNE3623-KR-XS', 'JNE3366-KR-1053-XS', 'SET244-KR-NP-L', 'JNE3766-KR-XL', 'J0291-JS-M', 'SET364-KR-NP-XL', 'JNE3422-KR-L', 'SET144-KR-NP-S', 'SET306-KR-PP-L', 'JNE3562-KR-S', 'J0094-KR-XS', 'JNE3323-KR-A-XL', 'J0140-SET-S', 'SET116-KR-NP-S', 'JNE3445-KR-S', 'J0172-TP-M', 'J0102-SKD-XXL', 'JNE3700-KR-S', 'SET044-KR-NP-S', 'JNE2251-KR-537-XL', 'SET392-KR-NP-XL', 'JNE1408-GREY-KR-UDF19-XL', 'J0149-KR-S', 'J0300-TP-XXL', 'JNE3778-KR-M', 'JNE3573-KR-XXL', 'J0244-SKD-XS', 'J0118-TP-XS', 'JNE3863-TU-XS', 'J0159-DR-XXXL', 'SET239-KR-NP-S', 'SET346-KR-PP-XS', 'SET263-KR-NP-XS', 'SET402-KR-NP-XS', 'J0380-SKD-S', 'JNE3813-KR-XXXL', 'SET285-KR-SHA-XL', 'SET055-KR-NP-XXL', 'JNE3774-KR-M', 'BTM002-L', 'JNE3556-KR-S', 'J0224-SKD-XXL', 'J0204-TP-XS', 'JNE3427-KR-XL', 'BTM030-NP-XXXL', 'J0248-KR-DPT-S', 'CH209-BIEGE-XL', 'JNE3834-KR-S', 'J0209-DR-XL', 'SET034-KR-NP-XL', 'JNE3860-DR-XXL', 'JNE3407-KR-XS', 'SET323-KR-NP-XS', 'BL060-75RED', 'JNE3782-KR-M', 'JNE3608-KR-XL', 'J0077-SKD-XXL', 'JNE1977-KR-237-XXXL', 'J0103-SKD-XXXL', 'J0400-DR-S', 'J0112-TP-XXXL', 'JNE3550-KR-S', 'JNE3725-KR-S', 'SET338-KR-NP-L', 'J0307-TP-XL', 'MEN5028-KR-S', 'SET274-KR-PP-M', 'SET205-KR-DPT-A-M', 'SET144-KR-NP-M', 'SET228-KR-PP-A-L', 'JNE3447-KR-L', 'J0163-SKD-XS', 'BTM045-PP-XXXL', 'JNE3789-KR-M', 'J0290-CD-XXL', 'NW033-ST-CP-XXL', 'JNE3787-KR-XL', 'JNE3637-KR-XXL', 'JNE3574-KR-XS', 'JNE3622-KR-S', 'NW028-TP-PJ-XL', 'JNE3466-KR-L', 'SET250-KR-SHA-S', 'JNE3630-KR-L', 'JNE3704-KR-XXL', 'JNE3311-KR-L', 'JNE3339-KR-XS', 'JNE3451-KR-M', 'JNE3555-KR-M', 'SET062-KR-SP-XL', 'NW002-TP-PJ-XS', 'SET332-KR-PP-XXL', 'JNE3394-KR-L', 'SET340-KR-NP-XL', 'JNE3407-KR-M', 'JNE3654-TP-XXL', 'JNE3524-KR-S', 'SET158-KR-PP-S', 'J0070-KR-XS', 'NW004-TP-PJ-L', 'SET220-KR-PP-XS', 'JNE3730-KR-S', 'SET227-KR-PP-A-S', 'SET116-KR-NP-M', 'JNE3803-KR-XL', 'JNE0850-N', 'JNE09209-MULTI-SR-JP8101RMV', 'SAR163', 'SAR165', 'SAR181', 'SAR136', 'SAR112', 'JNE09186-BLUE-SR-JP7104RMV', 'SAR091', 'SAR098', 'SAR100', 'JNE3713-TP-N-S', 'SET014-KR-PP-A-L', 'NW022-TP-PJ-M', 'SET225-KR-NP-XXXL', 'SET135-KR-PP-XS', 'JNE3662-TP-XXL', 'BL087-M', 'SET135-KR-PP-XXXL', 'J0049-TP-S', 'SET340-KR-NP-L', 'JNE3487-KR-XS', 'JNE3348-KR-S', 'SET131-KR-NP-XXXL', 'JNE3608-KR-XXL', 'JNE3741-KR-XL', 'SET306-KR-PP-M', 'J0305-DR-M', 'BTM005-L', 'JNE3803-KR-L', 'JNE3665-TP-XL', 'JNE3707-DR-XS', 'JNE3728-KR-XXL', 'SET361-KR-NP-M', 'J0181-TP-XXL', 'JNE3769-KR-M', 'J0380-SKD-L', 'JNE3477-KR-S', 'J0231-SKD-L', 'J0207-DR-XXXL', 'BTM042-PP-XS', 'BTM047-PP-XS', 'JNE3534-KR-S', 'J0299-KR-L', 'JNE3542-KR-XS', 'JNE3524-KR-XXL', 'JNE2266-KR-490-A-M', 'JNE3491-KR-XXL', 'JNE3787-KR-L', 'SET266-KR-NP-XL', 'JNE3408-KR-S', 'J0131-KR-S', 'SET325-KR-NP-XL', 'J0132-KR-XXXL', 'J0043-SET-XL', 'JNE1951-KR-155-XXXL', 'JNE3543-KR-L', 'JNE3756-KR-S', 'SET038-KR-PP-XL', 'JNE3394-KR-A-M', 'SET270-KR-PP-XL', 'SET404-KR-NP-M', 'JNE2132-KR-398-XXL', 'JNE3576-KR-M', 'JNE1408-KR-UDF19-A-S', 'JNE1408-KR-UDF19-A-M', 'JNE3701-KR-XS', 'SET130-KR-NP-L', 'JNE3364-KR-1051-XXL', 'NW001-TP-PJ-M', 'SET267-KR-NP-XS', 'JNE1906-KR-031-S', 'J0213-TP-XXXL', 'J0395-DR-XL', 'JNE3491-KR-L', 'JNE3668-TP-N-L', 'JNE3454-KR-M', 'AN208-MUSTARD-S', 'J0027-SET-XXL', 'JNE3796-KR-XXL', 'J0243-DR-XS', 'NW037-TP-SR-M', 'SET401-KR-NP-S', 'SET038-KR-PP-XXXL', 'JNE3623-KR-M', 'JNE3491-KR-M', 'J0352-KR-L', 'BL007-61PINK-B', 'JNE3412-KR-S', 'J0190-TP-S', 'SET100-KR-PP-XXL', 'JNE3813-KR-XL', 'JNE3434-KR-M', 'SET390-KR-NP-M', 'J0185-DR-XXL', 'JNE3603-KR-M', 'J0007-SKD-XS', 'JNE2049-KR-351-XXL', 'J0159-DR-XXL', 'JNE3647-TP-N-XS', 'JNE3770-KR-L', 'JNE2199-KR-411-A-S', 'JNE3160-KR-XS', 'SET154-KR-NP-XS', 'SET187-KR-DH-S', 'SET330-KR-PP-XS', 'JNE2251-KR-537-XXL', 'JNE3458-KR-XXL', 'J0077-SKD-L', 'SET266-KR-NP-XXL', 'SET204-KR-DPT-XL', 'JNE3611-KR-M', 'JNE3643-TP-N-L', 'MEN5030-KR-XXXL', 'J0292-TP-XL', 'JNE3636-KR-XXL', 'J0117-TP-XL', 'JNE3778-KR-S', 'JNE3904-DR-XXL', 'SET303-KR-NP-S', 'SET185-KR-NP-M', 'SET249-KR-NP-XXXL', 'JNE3481-KR-S', 'J0379-SKD-XXL', 'J0381-SKD-S', 'J0243-DR-XXXL', 'J0219-BL-XXL', 'J0170-TP-A-XL', 'SET388-KR-NP-XS', 'BL055-164GOLD-A', 'BL041-65RED-A', 'NW003-TP-PJ-M', 'SET252-KR-PP-L', 'SET318-KR-SHA-M', 'JNE3518-KR-S', 'NW008-ST-CP-L', 'JNE3610-KR-S', 'SET158-KR-PP-XS', 'J0165-TP-M', 'SET130-KR-NP-XXL', 'J0171-DR-M', 'JNE3693-KR-M', 'SET048-KR-NP-XS', 'JNE3366-KR-1053-A-XXL', 'JNE3446-KR-XS', 'JNE3160-KR-L', 'SET257-KR-PP-XXXL', 'JNE3225-KR-L', 'JNE3665-TP-XS', 'SET252-KR-PP-XS', 'SET248-KR-NP-XXXL', 'J0329-KR-M', 'SET253-KR-NP-M', 'SET053-KR-NP-M', 'SET390-KR-NP-XXL', 'SET433-KR-NP-XS', 'SET128-KR-DH-XXXL', 'JNE3621-KR-L', 'JNE3605-KR-L', 'SET187-KR-DH-XXXL', 'JNE3744-TU-XS', 'JNE1525-KR-UDF19BLACK-XL', 'SET313-KR-NP-XXL', 'J0379-SKD-L', 'JNE3672-TU-XXXL', 'JNE3404-KR-XS', 'JNE3621-KR-S', 'JNE3364-KR-1051-A-S', 'SET154-KR-NP-M', 'JNE3758-KR-XL', 'JNE3476-KR-XXL', 'SET193-KR-NP-A-XS', 'J0154-DR-S', 'JNE3693-KR-S', 'JNE2266-KR-490-A-L', 'JNE2049-KR-351-XS', 'SET383-KR-NP-XS', 'NW033-ST-CP-M', 'J0078-SET-S', 'J0161-DR-XL', 'BL017-63BLACK-B', 'JNE1408-KR-UDF19-A-XXXL', 'J0083-KR-XL', 'SET349-KR-NP-L', 'JNE3391-KR-XS', 'JNE1525-KR-UDF19BLACK-L', 'JNE3657-TP-XS', 'JNE3386-KR-XS', 'SAR108', 'NW016-ST-SR-L', 'J0228-SKD-XXXL', 'JNE2101-KR-210-XL', 'MEN5012-KR-XL', 'JNE1233-BLUE-KR-031-S', 'J0378-SKD-S', 'JNE3643-TP-N-XXL', 'JNE3856-KR-XS', 'J0089-TP-XXXL', 'JNE3819-KR-XXXL', 'JNE3160-KR-G-XS', 'JNE3607-KR-L', 'J0152-DR-S', 'SET179-KR-PP-XS', 'NW036-ST-SR-XXXL', 'J0090-TP-XS', 'JNE1906-KR-031-XS', 'J0345-SET-XXL', 'JNE3610-KR-XS', 'SET188-KR-NP-M', 'JNE2100-KR-144-XS', 'BL056-185GOLD', 'JNE1233-BLUE-KR-031-M', 'SET250-KR-SHA-M', 'SET165-KR-PP-XXXL', 'JNE3796-KR-XXXL', 'JNE3822-KR-XXXL', 'JNE3470-KR-M', 'JNE3653-TP-N-XL', 'JNE2270-KR-487-A-XS', 'JNE2199-KR-411-A-XS', 'SET043-KR-NP-M', 'SET264-KR-NP-XS', 'JNE3623-KR-XXXL', 'SET355-KR-PP-XXXL', 'JNE3684-TU-XS', 'JNE3624-KR-L', 'J0176-TP-L', 'JNE3313-KR-XL', 'J0278-SET-XXL', 'J0178-TP-XL', 'JNE3566-KR-XXL', 'NW014-ST-SR-XXXL', 'JNE3758-KR-XXXL', 'JNE2170-KR-436-XXL', 'J0154-DR-XXXL', 'J0310-TP-S', 'JNE3768-KR-XXL', 'JNE3709-DR-XS', 'JNE3610-KR-XL', 'SET252-KR-PP-XL', 'SET277-KR-NP-XXXL', 'JNE3438-KR-L', 'SET413-KR-NP-XS', 'SET073-KR-SHA-XXL', 'J0224-SKD-XS', 'SET258-KR-PP-M', 'SET248-KR-NP-XL', 'JNE3887-KR-L', 'JNE2302-KR-595-G-M', 'JNE3628-KR-L', 'JNE3700-KR-XS', 'J0134-SET-M', 'JNE3797-KR-A-XXL', 'JNE3797-KR-A-XL', 'JNE3834-KR-L', 'JNE3482-KR-XS', 'J0330-KR-XS', 'J0282-SET-S', 'JNE3605-KR-XS', 'BTM048-PP-M', 'J0011-LCD-XXXL', 'JNE3763-KR-XXL', 'JNE3256-KR-XL', 'J0330-KR-XXL', 'JNE1906-KR-031-XL', 'NW033-ST-CP-S', 'JNE3881-DR-XXL', 'J0310-TP-L', 'SET318-KR-SHA-XS', 'SET369-KR-NP-L', 'J0291-JS-XXXL', 'BL087-XXL', 'JNE3255-KR-L', 'JNE3563-KR-XL', 'J0399-DR-S', 'JNE3365-KR-1052-M', 'JNE3627-KR-M', 'J0022-KR-XS', 'JNE3732-KR-XS', 'JNE3732-KR-M', 'JNE3253-KR-XL', 'JNE3451-KR-S', 'SET394-KR-NP-L', 'J0137-SET-S', 'JNE3608-KR-M', 'JNE3375-KR-S', 'SET198-KR-NP-A-XXL', 'J0127-SKD-XXXL', 'NW020-ST-SR-XS', 'JNE3435-KR-L', 'JNE3642-TP-XL', 'SET195-KR-NP-A-XS', 'SET087-KR-PP-XXXL', 'J0228-SKD-XS', 'JNE3421-KR-S', 'J0009-SKD-XS', 'SET246-KR-PP-L', 'J0252-SKD-XXXL', 'JNE1233-BLUE-KR-031-XS', 'JNE3401-KR-XL', 'SET172-KR-PP-B-XS', 'J0001-DR-S', 'J0103-SKD-S', 'J0089-TP-S', 'J0212-DR-S', 'JNE2153-KR-278-A-XXXL', 'JNE3736-KR-XXXL', 'SET116-KR-NP-XXXL', 'JNE3753-KR-XXXL', 'JNE3726-KR-XXXL', 'SET055-KR-NP-XL', 'JNE3709-DR-XL', 'JNE3751-KR-S', 'JNE3879-DR-XXL', 'JNE2205-KR-467-A-XL', 'JNE3548-KR-XXXL', 'JNE3676-TU-XXXL', 'SET244-KR-NP-XXXL', 'JNE3865-TP-M', 'J0377-SKD-XXL', 'J0088-TP-XXL', 'J0300-TP-XL', 'J0379-SKD-M', 'SET392-KR-NP-L', 'J0004-SKD-S', 'JNE3389-KR-A-XXXL', 'SET130-KR-NP-S', 'JNE3483-KR-XXXL', 'SET210-KR-PP-XXXL', 'BL100-M', 'SET394-KR-NP-XS', 'J0237-SKD-XXL', 'JNE3364-KR-1051-XL', 'JNE3567-KR-XXXL', 'BL020-71RED-B', 'J0142-KR-M', 'JNE3750-KR-L', 'JNE3431-KR-XL', 'SET131-KR-NP-XS', 'J0010-LCD-XXL', 'SET245-KR-NP-M', 'BL008-61RED-B', 'SET188-KR-NP-S', 'J0145-SET-XXL', 'SET302-KR-PP-S', 'JNE2270-KR-487-A-S', 'BTM040-PP-XXL', 'J0203-TP-L', 'J0396-DR-S', 'J0166-DR-XL', 'JNE3817-KR-M', 'JNE2170-KR-436-XL', 'JNE2265-KR-501-XS', 'SET138-KR-PP-L', 'JNE3408-KR-XS', 'PJ0096-KR-N-4XL', 'SET249-KR-NP-XS', 'J0105-KR-XS', 'JNE3770-KR-S', 'SET225-KR-NP-M', 'J0290-CD-L', 'JNE3790-KR-M', 'SET321-KR-DPT-XXXL', 'J0308-DR-XS', 'SET203-KR-DPT-XXL', 'J0237-SKD-M', 'JNE3678-TU-XL', 'MEN5001-KR-XXXL', 'JNE3860-DR-XXXL', 'J0328-KR-XL', 'JNE3610-KR-L', 'J0232-SKD-XS', 'JNE3762-KR-XXL', 'J0184-KR-XXXL', 'J0400-DR-XXXL', 'JNE3687-TU-XS', 'SET055-KR-NP-XS', 'JNE3890-TP-XXL', 'JNE3602-KR-M', 'JNE3813-KR-M', 'BTM036-PP-M', 'SET247-KR-SHA-S', 'JNE3797-KR-A-M', 'J0209-DR-S', 'JNE3838-KR-M', 'J0133-KR-A-XL', 'JNE3311-KR-XXL', 'JNE3528-KR-L', 'JNE1234-MULTI-KR-032-XXXL', 'J0333-DR-S', 'JNE3743-TP-XXL', 'JNE3501-KR-XXL', 'JNE3620-KR-XXXL', 'SET241-KR-PP-XS', 'JNE3535-KR-L', 'J0134-SET-L', 'SET330-KR-PP-XL', 'J0398-DR-S', 'J0140-SET-XXL', 'JNE3658-TP-XS', 'JNE3733-KR-XL', 'SET250-KR-SHA-XL', 'JNE3555-KR-S', 'J0379-SKD-XXXL', 'MEN5012-KR-M', 'JNE3744-TU-L', 'JNE3894-TP-S', 'J0042-DR-L', 'JNE3779-KR-M', 'J0159-DR-S', 'JNE3273-KR-L', 'JNE3252-KR-M', 'J0195-TP-L', 'J0399-DR-XL', 'JNE3821-KR-S', 'SET346-KR-PP-L', 'JNE3578-KR-XL', 'J0175-KR-XL', 'JNE3672-TU-XL', 'SET308-KR-PP-XXL', 'JNE3880-DR-XL', 'SET338-KR-NP-M', 'SET330-KR-PP-L', 'J0094-KR-XXXL', 'J0159-DR-L', 'JNE3445-KR-M', 'J0252-SKD-M', 'J0249-SKD-XS', 'JNE3348-KR-XXXL', 'J0126-SKD-S', 'JNE3676-TU-S', 'JNE3279-KR-A-S', 'SET353-KR-NP-XXXL', 'MEN5026-KR-XXXL', 'J0038-DR-XS', 'JNE3571-KR-S', 'SET156-KR-NP-XS', 'J0078-SET-XXL', 'J0078-SET-M', 'JNE3708-TU-L', 'SET257-KR-PP-XXL', 'J0123-TP-XS', 'J0085-TP-M', 'NW035-ST-CP-L', 'SET248-KR-NP-XS', 'SET165-KR-PP-XL', 'NW028-TP-PJ-M', 'SET043-KR-NP-XXL', 'SET048-KR-NP-XXL', 'JNE3760-KR-S', 'JNE3396-KR-XS', 'JNE3472-KR-XS', 'SET376-KR-NP-XXL', 'SET221-KR-NP-XXL', 'JNE3311-KR-XL', 'JNE3689-TU-XL', 'SET300-KR-NP-XL', 'J0208-DR-M', 'MEN5016-KR-S', 'J0093-DR-S', 'MEN5031-KR-M', 'JNE3736-KR-M', 'J0087-TP-XXXL', 'SET147-KR-NP-XXXL', 'JNE3658-TP-XL', 'J0105-KR-XXL', 'SET165-KR-PP-L', 'J0395-DR-S', 'JNE3704-KR-XL', 'J0042-DR-S', 'J0337-TP-XXXL', 'J0205-TP-L', 'SET004-KR-SP-XXXL', 'J0076-SET-S', 'J0020-SET-XXL', 'BTM040-PP-XXXL', 'J0186-SET-XL', 'JNE3581-KR-XXL', 'J0281-SKD-L', 'JNE3823-KR-XXL', 'JNE3563-KR-M', 'SET409-KR-NP-L', 'J0087-TP-L', 'J0007-SKD-XXXL', 'SET144-KR-NP-XXL', 'JNE3473-KR-XXL', 'MEN5030-KR-XXL', 'J0010-LCD-XL', 'J0194-DR-XXL', 'JNE3783-KR-S', 'SET365-KR-NP-XXXL', 'BL113-M', 'J0207-DR-XS', 'J0292-TP-S', 'NW009-ST-CP-S', 'BTM043-PP-S', 'JNE3458-KR-S', 'JNE3506-KR-XXXL', 'J0251-SKD-L', 'JNE3819-KR-XL', 'JNE3542-KR-XL', 'BL107-S', 'JNE3579-KR-XL', 'SET320-KR-NP-XL', 'J0130-SET-L', 'JNE3700-KR-XXL', 'SET361-KR-NP-L', 'JNE3792-KR-XXXL', 'SET433-KR-NP-XXXL', 'JNE3715-KR-XXXL', 'JNE3435-KR-XXL', 'J0298-DR-S', 'J0220-BL-L', 'JNE3426-KR-XS', 'JNE2009-KR-310-XXL', 'SET369-KR-NP-M', 'SET305-KR-DPT-L', 'SET121-KR-NP-XXXL', 'BTM033-NP-XXXL', 'SET004-KR-SP-XL', 'NW032-ST-CP-XXXL', 'SET330-KR-PP-XXL', 'J0027-SET-XS', 'JNE3811-KR-XXXL', 'SET132-KR-NP-XXXL', 'J0153-DR-XXL', 'SET186-KR-DH-XXXL', 'J0140-SET-M', 'NW014-ST-SR-XL', 'JNE3452-KR-XXXL', 'JNE3780-KR-XXXL', 'JNE3656-TP-N-XXL', 'JNE3559-KR-XS', 'J0199-SET-XXL', 'SET327-KR-DPT-XXL', 'J0126-SKD-M', 'J0040-SET-XXXL', 'JNE3701-KR-L', 'JNE3816-KR-S', 'SET266-KR-NP-XS', 'JNE3778-KR-XXXL', 'JNE3616-KR-L', 'JNE3803-KR-XXL', 'JNE3834-KR-XL', 'J0239-SKD-M', 'J0375-SKD-XXXL', 'J0130-SET-XL', 'JNE3528-KR-XL', 'J0025-DR-XL', 'JNE3770-KR-XXXL', 'J0121-TP-L', 'PJ0096-KR-N-6XL', 'J0203-TP-S', 'SET365-KR-NP-XL', 'J0100-DR-XXXL', 'SET321-KR-DPT-M', 'JNE3225-KR-XXL', 'J0380-SKD-XL', 'BL086-XXL', 'J0139-KR-M', 'JNE3821-KR-XL', 'BL086-XL', 'J0379-SKD-XL', 'J0149-KR-XS', 'SET075-KR-DH-XXL', 'SET139-KR-PP-S', 'MEN5018-KR-XXL', 'JNE3475-KR-K-XS', 'J0329-KR-XL', 'J0237-SKD-XL', 'SET085-KR-PT-S', 'SET192-KR-NP-S', 'SET203-KR-DPT-XS', 'JNE3480-KR-XS', 'J0171-DR-L', 'J0145-SET-XS', 'J0101-DR-XXL', 'SET308-KR-PP-L', 'JNE3472-KR-S', 'JNE3817-KR-XL', 'JNE3680-TU-XS', 'JNE3792-KR-XXL', 'BTM043-PP-XXL', 'JNE3656-TP-N-S', 'J0150-KR-L', 'J0033-KR-L', 'JNE3797-KR-A-L', 'SET078-KR-NP-XS', 'JNE3717-KR-M', 'JNE3860-DR-M', 'JNE3688-TU-M', 'NW029-ST-SR-L', 'J0001-DR-M', 'JNE2266-KR-490-A-XXL', 'BL096-S', 'J0281-SKD-M', 'JNE3667-TP-XL', 'JNE3774-KR-XL', 'BTM039-PP-XXL', 'SET205-KR-DPT-A-XXL', 'JNE3389-KR-A-M', 'JNE3786-KR-L', 'SET332-KR-PP-XXXL', 'SAR024', 'J0370-SKD-XL', 'BL109-XXL', 'JNE3768-KR-M', 'JNE3425-KR-S', 'J0120-TP-S', 'JNE3389-KR-A-L', 'JNE3667-TP-XXL', 'JNE3578-KR-XXL', 'JNE3470-KR-XL', 'JNE3895-TP-XXL', 'JNE3443-KR-L', 'J0211-DR-XS', 'JNE3733-KR-XXL', 'SET024-KR-SP-A-M', 'JNE2113-KR-381-M', 'J0073-KR-XXXL', 'JNE3676-TU-XL', 'JNE3578-KR-L', 'J0195-TP-M', 'MEN5003-KR-S', 'JNE3821-KR-M', 'J0305-DR-XXL', 'J0395-DR-XXL', 'J0369-SKD-XXXL', 'SET141-KR-NP-S', 'JNE3648-TP-N-S', 'AN213-BROWN-S', 'JNE3753-KR-M', 'JNE3797-KR-A-XS', 'J0164-DR-XXXL', 'J0300-TP-L', 'SET206-KR-PP-S', 'JNE3684-TU-S', 'J0332-DR-XXXL', 'J0353-KR-S', 'JNE3667-TP-L', 'BTM036-PP-S', 'SET257-KR-PP-M', 'J0114-TP-S', 'NW033-ST-CP-XS', 'JNE3835-KR-M', 'JNE3777-KR-M', 'SET243-KR-PP-XXXL', 'JNE3628-KR-XL', 'J0238-LCD-XL', 'J0216-BL-XXL', 'J0152-DR-XS', 'JNE3376-KR-S', 'JNE2251-KR-537-C-XXL', 'J0304-TP-XXXL', 'SET132-KR-NP-XXL', 'JNE3745-KR-XL', 'J0371-SKD-S', 'J0297-TP-XXXL', 'AN202-ORANGE-S', 'JNE3836-KR-S', 'SET100-KR-PP-XXXL', 'J0086-DR-XL', 'J0072-KR-XXL', 'J0102-SKD-L', 'SET253-KR-NP-XL', 'J0074-TP-S', 'J0242-SKD-S', 'J0005-DR-M', 'JNE2049-KR-351-XXXL1', 'J0005-DR-XS', 'JNE3616-KR-XXXL', 'J0077-SKD-XXXL', 'J0195-TP-S', 'SET254-KR-NP-XL', 'JNE3856-KR-S', 'J0034-SET-XL', 'J0084-TP-S', 'NW027-TP-PJ-XS', 'J0282-SET-XXL', 'J0157-DR-L', 'J0085-TP-XXXL', 'JNE3602-KR-S', 'J0023-TP-XL', 'SAR096', 'SET266-KR-NP-XXXL', 'JNE3518-KR-XS', 'JNE3503-KR-XXL', 'SET218-KR-NP-M', 'J0304-TP-XL', 'J0029-KR-S', 'J0038-DR-XXXL', 'J0105-KR-XXXL', 'NW035-ST-CP-XXXL', 'SET346-KR-PP-XXL', 'J0138-KR-XS', 'J0129-SET-S', 'J0167-KR-XXL', 'J0329-KR-S', 'SET257-KR-PP-XL', 'J0123-TP-XL', 'J0398-DR-XXL', 'SET334-KR-NP-XS', 'J0011-LCD-XL', 'J0175-KR-M', 'J0038-DR-S', 'J0016-DR-XS', 'JNE3856-KR-M', 'AN208-MUSTARD-M', 'JNE3449-KR-XS', 'BTM046-PP-XL', 'J0226-SKD-XXXL', 'SET116-KR-NP-L', 'MEN5014-KR-S', 'J0197-TP-XL', 'JNE3689-TU-M', 'SET326-KR-PP-XS', 'JNE3396-KR-S', 'JNE3729-KR-S', 'J0111-TP-XS', 'SET297-KR-NP-XXXL', 'BTM041-PP-XS', 'J0245-SKD-XL', 'SET244-KR-NP-XL', 'J0026-KR-XS', 'NW022-TP-PJ-XXXL', 'JNE3750-KR-S', 'JNE3030-KR-XL', 'JNE3766-KR-S', 'NW027-TP-PJ-XL', 'JNE3702-KR-XS', 'JNE3670-TU-XXXL', 'SET048-KR-NP-XL', 'SET186-KR-DH-XL', 'JNE3564-KR-XL', 'JNE3856-KR-L', 'J0155-KR-XL', 'JNE3666-TP-S', 'J0134-SET-XXXL', 'JNE3669-TU-XL', 'JNE3796-KR-M', 'BTM041-PP-XXL', 'J0091-TP-M', 'SET242-KR-PP-M', 'NW013-ST-SR-XS', 'JNE3838-KR-XXL', 'J0140-SET-L', 'JNE3816-KR-XXL', 'NW027-TP-PJ-XXXL', 'JNE3666-TP-XS', 'J0159-DR-M', 'NW024-TP-PJ-XXXL', 'SET307-KR-DPT-XS', 'JNE3856-KR-XL', 'JNE3616-KR-XXL', 'J0280-SKD-XXXL', 'JNE2262-KR-569-S', 'J0189-TP-S', 'SET274-KR-PP-XXXL', 'JNE3836-KR-XS', 'NW038-ST-SR-XL', 'JNE3838-KR-XXXL', 'SET192-KR-NP-M', 'J0057-DR-XS', 'J0300-TP-S', 'SET408-KR-NP-XS', 'JNE3539-KR-XS', 'SET351-KR-NP-XS', 'SET251-KR-PP-XL', 'JNE3420-KR-XXL', 'JNE3676-TU-XXL', 'JNE3833-KR-XL', 'JNE3550-KR-XS', 'SET401-KR-NP-XXL', 'NW028-TP-PJ-L', 'MEN5030-KR-S', 'J0133-KR-XXL', 'SET307-KR-DPT-XL', 'J0240-SKD-M', 'JNE3676-TU-M', 'JNE3683-TU-S', 'BTM026-NP-L', 'SET353-KR-NP-XS', 'J0229-SKD-XXL', 'J0378-SKD-XXXL', 'J0284-SKD-XS', 'SET138-KR-PP-S', 'SET336-KR-NP-XS', 'JNE3807-KR-XL', 'SET402-KR-NP-XL', 'JNE3763-KR-S', 'SAR051', 'J0100-DR-XS', 'JNE2032-KR-205-XS', 'SAR023', 'SET340-KR-NP-XS', 'BTM042-PP-XL', 'J0375-SKD-M', 'NW024-TP-PJ-M', 'SET055-KR-NP-XXXL', 'BL113-XL', 'SET210-KR-PP-M', 'JNE3683-TU-XL', 'J0304-TP-XXL', 'JNE3783-KR-M', 'JNE3470-KR-S', 'JNE3445-KR-L', 'J0240-SKD-XS', 'JNE3798-KR-A-XL', 'MEN5010-KR-XXL', 'JNE3276-KR-XXL', 'JNE3644-TP-N-XXL', 'J0233-SKD-XXL', 'SET128-KR-DH-XS', 'JNE3790-KR-S', 'JNE3870-DR-XS', 'J0110-SKD-XXL', 'JNE3446-KR-XXXL', 'J0080-TP-XXL', 'JNE3698-KR-S', 'JNE3640-TP-N-S', 'SET128-KR-DH-S', 'J0350-SET-L', 'J0091-TP-L', 'JNE2049-KR-351-XL', 'JNE3581-KR-XL', 'J0348-SET-XXL', 'J0153-DR-XS', 'JNE3538-KR-XS', 'JNE3622-KR-XS', 'JNE2266-KR-490-A-S', 'JNE3458-KR-XS', 'JNE3769-KR-XL', 'J0001-DR-XS', 'J0336-TP-XS', 'JNE3661-TP-XS', 'JNE3445-KR-XL', 'J0085-TP-XS', 'JNE3748-KR-XS', 'AN201-RED-M', 'SET195-KR-NP-A-XL', 'J0014-LCD-XXXL', 'J0375-SKD-L', 'J0163-SKD-L', 'JNE3725-KR-XL', 'SET179-KR-PP-XXL', 'NW016-ST-SR-XXL', 'AN208-MUSTARD-XL', 'SAR034', 'JNE3763-KR-M', 'SET004-KR-SP-A-XL', 'SET317-KR-PP-S', 'JNE3446-KR-XL', 'J0294-TP-XXL', 'SET097-KR-PP-XL', 'JNE3688-TU-XXXL', 'JNE3661-TP-XXL', 'JNE3774-KR-XXL', 'J0319-KR-L', 'SET004-KR-SP-M', 'JNE3471-KR-XXL', 'JNE3717-KR-S', 'SET325-KR-NP-XXL', 'BL102-L', 'JNE3758-KR-XS', 'J0120-TP-XXL', 'SET390-KR-NP-XS', 'SET300-KR-NP-S', 'AN206-GREEN-M', 'JNE3724-KR-XS', 'J0198-TP-XXL', 'J0112-TP-XS', 'JNE2009-KR-310-L', 'J0122-TP-L', 'JNE3323-KR-A-XXXL', 'SET303-KR-NP-XXXL', 'JNE3539-KR-XXL', 'JNE3757-KR-XXXL', 'J0199-SET-XL', 'J0278-SET-XL', 'SET186-KR-DH-XXL', 'JNE3766-KR-XXL', 'SET306-KR-PP-XXXL', 'SET254-KR-NP-XXXL', 'BL113-XS', 'J0176-TP-S', 'BL104-XL', 'J0187-KR-XL', 'SET185-KR-NP-XXL', 'JNE3574-KR-S', 'MEN5001-KR-S', 'JNE3885-KR-L', 'JNE3615-KR-XS', 'J0112-TP-M', 'J0085-TP-XL', 'JNE3452-KR-S', 'JNE3797-KR-A-S', 'BL015-63PINK', 'SET343-KR-NP-XXXL', 'JNE3743-TP-S', 'JNE3615-KR-XXXL', 'SAR107', 'BTM044-PP-XXXL', 'BTM047-PP-XXXL', 'JNE3800-KR-A-XXXL', 'NW032-ST-CP-L', 'SET275-KR-NP-L', 'BL079-87RED', 'CH204-PURPLE-S', 'JNE3663-TP-M', 'BTM040-PP-XL', 'SET204-KR-DPT-L', 'JNE3541-KR-S', 'NW013-ST-SR-XL', 'NW009-ST-CP-XL', 'J0147-SET-L', 'JNE3548-KR-M', 'JNE3403-KR-M', 'JNE3276-KR-XXXL', 'J0371-SKD-XXXL', 'JNE3515-KR-S', 'JNE3434-KR-L', 'J0232-SKD-S', 'J0245-SKD-XXXL', 'JNE3820-KR-M', 'JNE3544-KR-S', 'JNE3726-KR-S', 'J0238-LCD-L', 'J0151-KR-XS', 'JNE3530-KR-XXXL', 'JNE3606-KR-S', 'SET394-KR-NP-XXL', 'SET147-KR-NP-XXL', 'JNE3752-KR-S', 'JNE3820-KR-XL', 'SET097-KR-PP-L', 'JNE3434-KR-XXL', 'JNE3531-KR-XL', 'JNE3744-TU-M', 'J0103-SKD-XXL', 'J0027-SET-S', 'JNE3516-KR-E-XXL', 'J0033-KR-XS', 'SET188-KR-NP-XL', 'JNE3618-KR-XXXL', 'SET165-KR-PP-XS', 'JNE3680-TU-XL', 'JNE3789-KR-XL', 'JNE3719-KR-XS', 'JNE3693-KR-XXL', 'JNE3273-KR-M', 'SET097-KR-PP-XXL', 'SET097-KR-PP-XXXL', 'J0122-TP-XS', 'JNE3679-TU-S', 'PJNE3404-KR-N-4XL', 'JNE3752-KR-XXL', 'PJNE3440-KR-N-6XL', 'JNE3635-KR-XXXL', 'PJNE2014-KR-N-6XL', 'PJNE3568-KR-N-4XL', 'JNE3475-KR-K-L', 'J0199-SET-XS', 'BL107-XL', 'JNE3539-KR-XXXL', 'JNE3738-KR-XXL', 'BTM039-PP-XS', 'PJNE3364-KR-5XL', 'PJNE3364-KR-6XL', 'PJNE3568-KR-N-5XL', 'AN202-ORANGE-M', 'JNE3722-KR-XS', 'PJNE3423-KR-N-4XL', 'JNE3466-KR-S', 'MEN5012-KR-S', 'PJNE2199-KR-N-5XL', 'SET153-KR-NP-XXL', 'JNE3800-KR-A-XXL', 'JNE3823-KR-XL', 'PJNE2014-KR-N-4XL', 'AN209-BIEGE-XL', 'J0162-SKD-XS', 'SET376-KR-NP-L', 'J0178-TP-XXL', 'SET004-KR-SP-A-M', 'PSET268-KR-NP-6XL', 'JNE3629-KR-S', 'JNE3415-KR-XL', 'MEN5027-KR-XXXL', 'PJNE2100-KR-N-4XL', 'J0183-TP-XS', 'JNE3727-KR-M', 'SET327-KR-DPT-XS', 'SET053-KR-NP-XL', 'PJNE1906-KR-N-5XL', 'PJNE3440-KR-N-4XL', 'PJNE2014-KR-N-5XL', 'SET232-KR-PP-M', 'SET004-KR-SP-A-XXL', 'PJNE3373-KR-N-5XL', 'PSET264-KR-NP-4XL', 'PJNE3368-KR-4XL', 'JNE3769-KR-XXXL', 'SET034-KR-NP-XXXL', 'SET210-KR-PP-S', 'JNE3833-KR-S', 'SET138-KR-PP-XL', 'J0226-SKD-XS', 'JNE3630-KR-XL', 'JNE3686-TU-XXL', 'JNE3732-KR-XL', 'JNE3789-KR-XXL', 'JNE3657-TP-XXL', 'SET297-KR-NP-L', 'SET091-KR-NP-S', 'J0028-KR-S', 'J0103-SKD-XS', 'JNE3531-KR-M', 'MEN5028-KR-XXXL', 'SET346-KR-PP-S', 'JNE3878-KR-XXL', 'PSET264-KR-NP-6XL', 'MEN5012-KR-XXXL', 'J0141-KR-XXL', 'JNE3813-KR-S', 'PJNE3404-KR-N-6XL', 'PJNE3607-KR-4XL', 'SET034-KR-NP-XXL', 'JNE3466-KR-XXL', 'PSET043-KR-NP-6XL', 'SET037-KR-NP-S', 'J0001-DR-XL', 'J0001-DR-L', 'JNE3706-DR-XS', 'PJNE3399-KR-N-5XL', 'MEN5013-KR-XXXL', 'BTM042-PP-M', 'J0355-KR-XXL', 'SET242-KR-PP-XS', 'JNE3676-TU-XS', 'JNE3563-KR-XXL', 'JNE3401-KR-XXL', 'JNE3457-KR-L', 'PJNE3423-KR-N-5XL', 'J0131-KR-XL', 'J0033-KR-M', 'SET321-KR-DPT-L', 'J0077-SKD-XL', 'BTM043-PP-XL', 'JNE3364-KR-1051-XXXL', 'J0299-KR-XL', 'J0044-TP-XS', 'SET305-KR-DPT-XXXL', 'JNE3545-KR-M', 'JNE3654-TP-S', 'JNE3766-KR-XS', 'J0184-KR-M', 'BTM033-NP-XXL', 'SET334-KR-NP-XXXL', 'SET153-KR-NP-XXXL', 'JNE3504-KR-S', 'JNE3885-KR-XXL', 'JNE3625-DR-XXXL', 'PJNE3405-KR-N-6XL', 'JNE3279-KR-A-XXL', 'JNE3515-KR-L', 'J0058-DR-XS', 'J0214-TP-S', 'PJNE3568-KR-N-6XL', 'JNE3313-KR-A-M', 'PJNE3423-KR-N-6XL', 'SET245-KR-NP-XS', 'JNE3767-KR-M', 'J0074-TP-XL', 'PJNE2270-KR-N-4XL', 'PJNE3405-KR-N-4XL', 'JNE3574-KR-XL', 'J0202-TP-XXXL', 'J0370-SKD-XXL', 'J0329-KR-XXL', 'J0161-DR-XXL', 'AN205-YELLOW-S', 'SET204-KR-DPT-S', 'JNE3686-TU-XS', 'PSET043-KR-NP-4XL', 'JNE3428-KR-XL', 'J0351-SET-M', 'JNE3539-KR-XL', 'J0133-KR-A-M', 'PJNE3363-KR-N-5XL', 'J0355-KR-XL', 'JNE3323-KR-S', 'JNE3474-KR-E-L', 'J0347-SET-XS', 'SET194-KR-NP-S', 'JNE3823-KR-XS', 'SET131-KR-NP-A-S', 'J0375-SKD-XL', 'PJNE3363-KR-N-4XL', 'J0181-TP-XL', 'BL110-M', 'J0034-SET-XS', 'J0136-KR-XS', 'JNE3680-TU-A-L', 'J0044-TP-S', 'SET172-KR-PP-B-XXXL', 'JNE2101-KR-210-L', 'PSET058-KR-NP-4XL', 'J0229-SKD-S', 'JNE3741-KR-XS', 'JNE3769-KR-S', 'JNE3798-KR-A-M', 'SET130-KR-NP-XL', 'JNE3323-KR-L', 'JNE3668-TP-N-XXL', 'J0346-SET-S', 'J0228-SKD-L', 'J0033-KR-XL', 'J0166-DR-M', 'JNE3252-KR-XXXL', 'BL104-XS', 'J0242-SKD-M', 'J0062-DR-XXL', 'JNE2086-KR-389-S', 'SET112-KR-SP-XS', 'SET306-KR-PP-XL', 'JNE3669-TU-XXXL', 'JNE3608-KR-XXXL', 'J0178-TP-L', 'JNE3389-KR-A-XXL', 'SET270-KR-PP-L', 'J0138-KR-M', 'J0077-SKD-XS', 'JNE3785-KR-XS', 'JNE3429-KR-XXL', 'SET193-KR-NP-A-XXXL', 'J0093-DR-M', 'SET136-KR-PP-L', 'J0147-SET-XXXL', 'JNE3441-KR-E-M', 'J0112-TP-XL', 'JNE3571-KR-XL', 'J0171-DR-XL', 'J0075-KR-M', 'NW004-TP-PJ-S', 'PSET268-KR-NP-5XL', 'JNE3783-KR-XS', 'PJNE1906-KR-N-4XL', 'JNE3817-KR-XXXL', 'JNE3895-TP-L', 'SET413-KR-NP-XXXL', 'BL050-83RED-A', 'JNE3491-KR-XXXL', 'J0073-KR-XL', 'J0180-DR-XXXL', 'J0104-KR-XL', 'BTM037-PP-XL', 'SET147-KR-NP-M', 'JNE3821-KR-XXL', 'SET037-KR-NP-L', 'J0254-SKD-S', 'J0172-TP-XS', 'JNE3547-KR-L', 'JNE3791-DR-M', 'JNE3823-KR-S', 'PSET268-KR-NP-4XL', 'MEN5015-KR-S', 'JNE3820-KR-L', 'J0154-DR-M', 'PJNE3364-KR-4XL', 'SET395-KR-NP-S', 'SAR109', 'J0161-DR-L', 'JNE3547-KR-XXL', 'JNE3577-KR-XXL', 'JNE3323-KR-M', 'SAR026', 'JNE3391-KR-L', 'JNE3438-KR-XXXL', 'JNE3651-TP-N-XS', 'J0205-TP-XXXL', 'JNE3531-KR-XXL', 'JNE3622-KR-XXXL', 'SET336-KR-NP-L', 'JNE09187-PINK-SR-JP7104RNV', 'JNE3323-KR-XXXL', 'JNE3042-KR-XL', 'JNE3624-KR-XL', 'J0235-SKD-M', 'PJNE1906-KR-N-6XL', 'JNE3436-KR-XL', 'PSET043-KR-NP-5XL', 'JNE2132-KR-398-XL', 'SET258-KR-PP-XXXL', 'SET195-KR-NP-A-XXL', 'J0161-DR-M', 'SET179-KR-PP-L', 'J0294-TP-XL', 'PJNE2270-KR-N-5XL', 'PSET264-KR-NP-5XL', 'J0248-KR-DPT-M', 'SET097-KR-PP-XS', 'MEN5014-KR-L', 'J0137-SET-XS', 'SET043-KR-NP-XS', 'SET245-KR-NP-XXL', 'JNE3323-KR-A-S', 'SAR132', 'BL099-L', 'J0140-SET-XXXL', 'J0133-KR-XXXL', 'SET055-KR-NP-S', 'JNE3323-KR-XS', 'JNE3570-KR-XS', 'SET321-KR-DPT-XXL', 'SAR049', 'J0179-KR-XXXL', 'SET300-KR-NP-XS', 'SET326-KR-PP-XL', 'JNE3684-TU-XL', 'PJNE3404-KR-N-5XL', 'SET100-KR-PP-M', 'SET336-KR-NP-S', 'J0142-KR-L', 'J0160-TP-L', 'PJNE3291-KR-5XL', 'SET236-KR-PP-XXL', 'J0143-SET-A-L', 'J0091-TP-XXL', 'JNE3816-KR-XXXL', 'SET327-KR-DPT-XL', 'JNE3729-KR-XXL', 'JNE3666-TP-M', 'NW023-ST-SR-XL', 'JNE3728-KR-M', 'SET037-KR-NP-M', 'J0347-SET-L', 'JNE3265-KR-M', 'JNE2251-KR-537-C-L', 'SET236-KR-PP-S', 'SET327-KR-DPT-S', 'MEN5018-KR-XXXL', 'J0112-TP-S', 'SET132-KR-NP-L', 'JNE3887-KR-XS', 'SET179-KR-PP-XL', 'PJNE3373-KR-N-4XL', 'J0183-TP-M', 'SET390-KR-NP-XXXL', 'J0154-DR-L', 'JNE3577-KR-S', 'PJNE3252-KR-N-4XL', 'JNE2086-KR-389-XXXL', 'SET402-KR-NP-XXL', 'JNE3539-KR-S', 'J0165-TP-S', 'J0151-KR-L', 'JNE3738-KR-S', 'JNE3438-KR-XS', 'JNE3429-KR-XS', 'J0192-TP-XXL', 'SET062-KR-SP-XS', 'J0305-DR-L', 'SET313-KR-NP-XXXL', 'JNE3644-TP-N-XS', 'SAR029', 'SET271-KR-NP-M', 'JNE3348-KR-XL', 'J0232-SKD-XXXL', 'JNE3524-KR-XXXL', 'SET250-KR-SHA-XXXL', 'JNE3779-KR-S', 'JNE3415-KR-M', 'SET274-KR-PP-L', 'JNE3481-KR-XL', 'JNE3674-TU-XS', 'J0155-KR-L', 'JNE3813-KR-L', 'J0023-TP-XS', 'J0160-TP-S', 'JNE3684-TU-XXXL', 'J0120-TP-L', 'SET043-KR-NP-XXXL', 'PSET058-KR-NP-5XL', 'J0354-KR-XL', 'JNE3879-DR-L', 'SET376-KR-NP-S', 'JNE3729-KR-XS', 'NW022-TP-PJ-S', 'JNE3764-KR-XS', 'J0302-DR-XXXL', 'J0299-KR-XXL', 'SET336-KR-NP-M', 'BTM029-NP-L', 'JNE3686-TU-XXXL', 'JNE3684-TU-M', 'JNE3532-KR-XXL', 'J0155-KR-S', 'JNE3647-TP-N-XXL', 'J0345-SET-M', 'BL023-74PINK-B', 'JNE3564-KR-S', 'SET364-KR-NP-XXXL', 'SET240-KR-PP-S', 'SET251-KR-PP-L', 'JNE1408-KR-UDF19-A-XL', 'SET321-KR-DPT-XS', 'SET130-KR-NP-XS', 'JNE3528-KR-XXL', 'JNE3721-KR-XXXL', 'SET271-KR-NP-XXXL', 'J0137-SET-XXL', 'J0328-KR-M', 'JNE3447-KR-M', 'BTM047-PP-L', 'SET351-KR-NP-S', 'SET376-KR-NP-M', 'JNE3065-KR-L', 'BL009-61BLACK', 'SET245-KR-NP-L', 'SET182-KR-DH-K-M', 'JNE3472-KR-XXXL', 'SET373-KR-PP-S', 'J0098-TP-L', 'SET317-KR-PP-XS', 'BL111-M', 'JNE3457-KR-XXXL', 'JNE3798-KR-A-XXL', 'JNE3510-KR-XXXL', 'SET182-KR-DH-XXL', 'JNE3878-KR-M', 'JNE3904-DR-XXXL', 'SET154-KR-NP-S', 'J0390-TP-XXXL', 'JNE3687-TU-XXXL', 'JNE3346-KR-XXL', 'JNE3788-KR-XL', 'J0175-KR-S', 'JNE3756-KR-XS', 'JNE3252-KR-XXL', 'SET436-KR-NP-XS', 'JNE3440-KR-XL', 'SET335-KR-NP-L', 'JNE3905-DR-XXXL', 'JNE3753-KR-S', 'SET341-KR-NP-M', 'SET415-KR-NP-XS', 'JNE3456-KR-S', 'JNE3265-KR-L', 'J0398-DR-XS', 'JNE3862-TU-L', 'SET357-KR-NP-M', 'JNE3905-DR-S', 'JNE3904-DR-L', 'JNE3905-DR-M', 'JNE3671-TU-XL', 'JNE3601-KR-L', 'JNE3535-KR-XL', 'SET318-KR-SHA-XXL', 'SET357-KR-NP-L', 'JNE3837-KR-XXXL', 'JNE3791-DR-L', 'J0389-TP-XXL', 'JNE3905-DR-XXL', 'J0413-DR-S', 'JNE3875-KR-L', 'SET152-KR-NP-S', 'SET139-KR-PP-XXXL', 'SET403-KR-NP-L', 'J0182-SET-S', 'JNE3928-KR-XS', 'JNE3395-KR-XXXL', 'SET404-KR-NP-XL', 'SET435-KR-NP-XS', 'J0225-SKD-XL', 'JNE3885-KR-XS', 'JNE3739-KR-S', 'SET414-KR-NP-XL', 'JNE3753-KR-XS', 'JNE3860-DR-XL', 'NW036-ST-SR-S', 'J0177-KR-S', 'JNE3485-KR-XS', 'J0390-TP-XS', 'JNE3665-TP-M', 'SET436-KR-NP-L', 'JNE3674-TU-S', 'SET433-KR-NP-M', 'JNE3871-KR-S', 'PJNE3291-KR-4XL', 'J0418-TP-XS', 'JNE3800-KR-A-XL', 'JNE3904-DR-M', 'SET299-KR-PP-S', 'J0386-KR-XL', 'JNE3928-KR-L', 'SET218-KR-NP-L', 'J0314-KR-S', 'JNE3928-KR-XL', 'J0385-KR-S', 'PJNE2270-KR-N-6XL', 'J0126-SKD-XL', 'J0402-DR-S', 'J0106-KR-XS', 'J0127-SKD-XL', 'J0226-SKD-XXL', 'PJNE3421-KR-N-5XL', 'PJNE3421-KR-N-4XL', 'JNE3445-KR-XXXL', 'SET198-KR-NP-A-S', 'JNE3389-KR-XL', 'SET327-KR-DPT-XXXL', 'SET254-KR-NP-L', 'J0164-DR-XS', 'SET274-KR-PP-XS', 'JNE3821-KR-XS', 'J0416-DR-XS', 'JNE3779-KR-XXXL', 'BTM008-B-L', 'J0397-DR-S', 'J0415-DR-XL', 'J0207-DR-L', 'JNE3905-DR-XS', 'JNE3792-KR-XL', 'SET053-KR-NP-XS', 'J0413-DR-XL', 'PJNE3421-KR-N-6XL', 'SET404-KR-NP-L', 'JNE3363-KR-1032-L', 'J0021-TP-XXL', 'J0307-TP-L', 'JNE3892-TP-L', 'JNE3904-DR-XL', 'SET340-KR-NP-S', 'JNE3887-KR-S', 'J0413-DR-XS', 'JNE3780-KR-XL', 'J0400-DR-XL', 'J0229-SKD-XL', 'J0196-TP-S', 'JNE3261-KR-XL', 'JNE3553-KR-XXL', 'SET130-KR-NP-M', 'SET272-KR-PP-L', 'J0072-KR-S', 'AN213-BROWN-L', 'JNE2300-KR-594-A-S', 'SET285-KR-SHA-XXXL', 'JNE3701-KR-S', 'JNE3739-KR-M', 'JNE2131-KR-A-S', 'J0082-TP-XS', 'NW031-TP-PJ-XS', 'JNE3548-KR-XS', 'JNE3630-KR-XS', 'JNE3628-KR-XS', 'JNE3928-KR-S', 'JNE3771-KR-L', 'JNE3891-TP-XXXL', 'J0103-SKD-A-M', 'J0252-SKD-XXL', 'NW036-ST-SR-XS', 'AN210-NAVY-M', 'SET415-KR-NP-XXXL', 'JNE3888-KR-XXXL', 'AN213-BROWN-M', 'JNE3885-KR-XL', 'JNE3767-KR-XXXL', 'JNE3255-KR-XXXL', 'SET335-KR-NP-XXXL', 'JNE3451-KR-XS', 'J0415-DR-XS', 'J0375-SKD-XS', 'JNE3865-TP-XS', 'JNE3771-KR-S', 'SET403-KR-NP-XXXL', 'J0233-SKD-XL', 'SET373-KR-PP-XL', 'JNE3888-KR-S', 'SET433-KR-NP-XXL', 'SET357-KR-NP-XXL', 'SET129-KR-NP-XL', 'JNE3928-KR-M', 'JNE3734-KR-XL', 'J0391-TP-L', 'J0390-TP-L', 'SET376-KR-NP-XL', 'J0106-KR-XXL', 'SET410-KR-NP-XS', 'PJNE3252-KR-N-5XL', 'SET409-KR-NP-S', 'J0391-TP-XL', 'J0388-TP-M', 'SET373-KR-PP-XXL', 'SAR061', 'JNE3394-KR-A-S', 'JNE3601-KR-XS', 'JNE3745-KR-XS', 'J0073-KR-L', 'J0385-KR-XS', 'J0385-KR-XL', 'SET403-KR-NP-M', 'J0145-SET-M', 'SET346-KR-PP-M', 'AN204-PURPLE-L', 'JNE3767-KR-XL', 'JNE3866-KR-XXXL', 'JNE3279-KR-A-XXXL', 'JNE2294-KR-A-XL', 'SET310-KR-NP-XXXL', 'JNE3893-TP-L', 'J0163-SKD-XL', 'SET218-KR-NP-XS', 'J0123-TP-XXXL', 'BL098-XL', 'JNE3898-KR-XXXL', 'JNE3888-KR-XXL', 'JNE3576-KR-XXXL', 'J0372-SKD-XS', 'PJNE3291-KR-6XL', 'JNE3734-KR-XXXL', 'SET154-KR-NP-L', 'SET357-KR-NP-XXXL', 'JNE3403-KR-S', 'SET373-KR-PP-XXXL', 'SET404-KR-NP-S', 'SET338-KR-NP-XL', 'JNE3768-KR-XXXL', 'SET338-KR-NP-S', 'JNE3369-KR-XXXL', 'J0014-LCD-XXL', 'SET202-KR-NP-M', 'SET414-KR-NP-XXL', 'JNE3878-KR-S', 'JNE3573-KR-XXXL', 'JNE3720-KR-S', 'J0193-SET-XXXL', 'PJNE3445-KR-N-6XL', 'BTM041-PP-L', 'J0241-SKD-XS', 'BTM021-B-XXXL', 'JNE3571-KR-L', 'JNE3467-KR-XXL', 'JNE3791-DR-S', 'JNE3898-KR-M', 'JNE3788-KR-XXL', 'JNE3700-KR-M', 'JNE3415-KR-S', 'JNE3416-KR-M', 'SET435-KR-NP-XL', 'JNE3875-KR-M', 'SET200-KR-NP-A-L', 'JNE3893-TP-XXL', 'JNE3739-KR-XS', 'SET025-KR-SP-A-XS', 'JNE2086-KR-389-M', 'SET058-KR-NP-XS', 'J0330-KR-XXXL', 'JNE3296-KR-XXL', 'JNE3811-KR-L', 'J0381-SKD-XXL', 'J0391-TP-XXXL', 'JNE3905-DR-XL', 'J0389-TP-S', 'J0112-TP-XXL', 'JNE3346-KR-M', 'JNE3765-KR-L', 'J0413-DR-L', 'J0116-TP-XXL', 'JNE3701-KR-M', 'J0290-CD-XL', 'JNE3727-KR-S', 'J0162-SKD-M', 'SET251-KR-PP-XXXL', 'JNE3475-KR-K-XXL', 'JNE3803-KR-XXXL', 'JNE3296-KR-S', 'SET352-KR-NP-S', 'J0282-SET-M', 'BTM043-PP-XXXL', 'J0228-SKD-M', 'SET147-KR-NP-XS', 'JNE3875-KR-XL', 'JNE3500-KR-XL', 'JNE3577-KR-XXXL', 'JNE3485-KR-L', 'JNE3733-KR-S', 'JNE3727-KR-XS', 'NW015-TP-PJ-XL', 'SET121-KR-NP-L', 'JNE3485-KR-XL', 'J0145-SET-L', 'SET078-KR-NP-S', 'JNE3928-KR-XXL', 'JNE3537-KR-S', 'JNE3394-KR-M', 'JNE3453-KR-M', 'JNE3313-KR-XXXL', 'JNE3485-KR-XXXL', 'SET262-KR-NP-M', 'JNE3887-KR-M', 'J0414-DR-XS', 'JNE3885-KR-XXXL', 'JNE3899-KR-S', 'J0165-TP-XS', 'J0398-DR-L', 'JNE3526-KR-XS', 'MEN5016-KR-XXL', 'SET204-KR-DPT-M', 'JNE3601-KR-M', 'SET436-KR-NP-XL', 'SET352-KR-NP-M', 'JNE3389-KR-A-XS', 'SET307-KR-DPT-XXL', 'NW001-TP-PJ-XS', 'BTM041-PP-XL', 'JNE3748-KR-L', 'SET352-KR-NP-XXXL', 'JNE3904-DR-XS', 'JNE3475-KR-K-XL', 'SAR154', 'JNE3651-TP-N-S', 'JNE3637-KR-XXXL', 'AN211-BLACK-L', 'J0142-KR-XS', 'J0419-TP-M', 'J0278-SET-S', 'J0388-TP-XS', 'J0166-DR-S', 'SET301-KR-PP-M', 'NW034-TP-PJ-S', 'J0390-TP-M', 'J0048-TP-XS', 'JNE3279-KR-A-XS', 'J0390-TP-S', 'SET232-KR-PP-XXL', 'J0319-KR-XXL', 'SET034-KR-NP-S', 'JNE3642-TP-L', 'JNE3674-TU-XXXL', 'J0103-SKD-L', 'JNE3371-KR-XXL', 'SET435-KR-NP-L', 'JNE3894-TP-L', 'JNE3880-DR-XXL', 'JNE3637-KR-XS', 'J0136-KR-XXXL', 'J0152-DR-XL', 'BTM008-L', 'NW016-ST-SR-XS', 'SET302-KR-PP-XL', 'SET221-KR-NP-XL', 'J0385-KR-XXL', 'JNE3475-KR-K-M', 'J0323-CD-XXL', 'SET158-KR-PP-XL', 'BTM029-NP-XS', 'J0105-KR-S', 'J0102-SKD-XS', 'JNE3255-KR-XXL', 'SET335-KR-NP-S', 'BL109-XL', 'BTM035-NP-XXXL', 'SET152-KR-NP-XS', 'JNE3565-KR-XL', 'SET436-KR-NP-M', 'JNE3872-KR-XL', 'AN213-BROWN-XL', 'J0386-KR-M', 'JNE3892-TP-M', 'BTM046-PP-M', 'JNE3453-KR-XL', 'SET394-KR-NP-XL', 'J0353-KR-M', 'SAR174', 'SET003-KR-NP-A-S', 'SET415-KR-NP-L', 'SET335-KR-NP-XS', 'SET276-KR-PP-L', 'JNE3426-KR-S', 'BL024-74RED-B', 'JNE3281-KR-XL', 'J0419-TP-L', 'SET306-KR-PP-XS', 'JNE3359-KR-S', 'JNE3720-KR-L', 'SET262-KR-NP-XXL', 'JNE3752-KR-XS', 'JNE3790-KR-XS', 'J0150-KR-XS', 'JNE3630-KR-XXL', 'JNE3456-KR-XS', 'JNE3823-KR-L', 'SET198-KR-NP-A-L', 'SET415-KR-NP-M', 'J0024-KR-XXL', 'JNE3892-TP-XL', 'MEN5030-KR-L', 'NW024-TP-PJ-L', 'J0192-TP-S', 'J0190-TP-XS', 'JNE3788-KR-L', 'J0279-SET-S', 'SET014-KR-PP-S', 'SET128-KR-DH-XXL', 'JNE3896-KR-XXL', 'J0072-KR-XS', 'SET401-KR-NP-XS', 'J0391-TP-XXL', 'J0389-TP-XS', 'J0251-SKD-XXXL', 'JNE3460-KR-XL', 'SET224-KR-NP-XXXL', 'JNE2205-KR-467-A-L', 'SET376-KR-NP-XXXL', 'J0103-SKD-XL', 'JNE3630-KR-S', 'JNE3578-KR-XS', 'JNE3888-KR-XS', 'J0374-KR-XXL', 'JNE3631-DR-XS', 'JNE3355-KR-XL', 'J0389-TP-XXXL', 'JNE3893-TP-M', 'BL100-XXL', 'SET435-KR-NP-XXXL', 'J0241-SKD-XXL', 'JNE3798-KR-A-S', 'SET202-KR-NP-XL', 'JNE3670-TU-XL', 'AN207-PINK-L', 'JNE3780-KR-L', 'BL098-S', 'JNE3862-TU-S', 'JNE3157-KR-M', 'J0091-TP-XS', 'SET156-KR-NP-S', 'J0177-KR-XS', 'J0250-SKD-M', 'JNE3257-KR-S', 'J0331-KR-XXL', 'JNE3860-DR-XS', 'SET159-KR-NP-XXL', 'SET313-KR-NP-L', 'JNE3788-KR-S', 'SET301-KR-PP-S', 'SET390-KR-NP-S', 'SET226-KR-PP-S', 'J0397-DR-XXL', 'J0151-KR-A-M', 'SET404-KR-NP-XXL', 'JNE3791-DR-XXL', 'J0049-TP-XL', 'J0418-TP-L', 'SET087-KR-PP-L', 'J0386-KR-L', 'BTM026-NP-XXXL', 'JNE3888-KR-L', 'J0019-SET-XS', 'J0175-KR-L', 'JNE3895-TP-XL', 'J0323-CD-L', 'JNE3296-KR-XL', 'J0282-SET-XL', 'SET004-KR-SP-XXL', 'JNE3875-KR-XXXL', 'JNE3771-KR-XXL', 'J0189-TP-XS', 'J0231-SKD-XS', 'J0354-KR-S', 'JNE3727-KR-XXXL', 'J0168-DR-L', 'JNE3485-KR-XXL', 'J0241-SKD-S', 'J0417-TP-XL', 'J0389-TP-XL', 'J0388-TP-XL', 'J0390-TP-XL', 'J0392-TP-XL', 'SET172-KR-PP-B-XXL', 'SET202-KR-NP-XXXL', 'JNE3627-KR-XXXL', 'J0330-KR-L', 'SET036-KR-NP-XXXL', 'JNE3313-KR-A-XL', 'SET352-KR-NP-XXL', 'J0172-TP-L', 'J0389-TP-L', 'J0371-SKD-XL', 'JNE3779-KR-L', 'SET435-KR-NP-XXL', 'BTM004-XXXL', 'J0379-SKD-XS', 'SET280-KR-PP-XXXL', 'JNE3261-KR-L', 'NW038-ST-SR-L', 'JNE3890-TP-S', 'SET395-KR-NP-XL', 'SET196-KR-NP-XS', 'SET436-KR-NP-XXL', 'JNE3904-DR-S', 'JNE3748-KR-M', 'J0331-KR-L', 'BL090-XS', 'BTM045-PP-M', 'SET238-KR-PP-S', 'SET280-KR-PP-L', 'JNE3798-KR-A-XXXL', 'JNE3734-KR-XXL', 'J0074-TP-XXL', 'BTM044-PP-XXL', 'BTM008-B-XXL', 'J0418-TP-M', 'SET034-KR-NP-XS', 'BTM037-PP-XXL', 'SET200-KR-NP-A-M', 'NW015-TP-PJ-L', 'J0282-SET-L', 'J0388-TP-S', 'J0138-KR-XXL', 'JNE3363-KR-1032-S', 'SET201-KR-NP-A-M', 'JNE3557-KR-XXL', 'AN208-MUSTARD-L', 'J0386-KR-S', 'J0082-TP-S', 'JNE3770-KR-XXL', 'J0089-TP-M', 'J0241-SKD-XXXL', 'JNE3881-DR-XS', 'J0229-SKD-L', 'JNE3862-TU-XL', 'AN211-BLACK-XXL', 'AN203-MAROON-XXL', 'AN207-PINK-XXL', 'J0151-KR-A-XXXL', 'SET199-KR-NP-M', 'JNE3625-DR-M', 'JNE3601-KR-S', 'JNE3791-DR-XL', 'SET403-KR-NP-XXL', 'JNE3928-KR-XXXL', 'JNE3902-KR-XXXL', 'JNE3430-KR-XS', 'JNE3416-KR-XS', 'J0225-SKD-M', 'BL075-85CHIKU', 'J0142-KR-S', 'NW038-ST-SR-XS', 'J0151-KR-A-XL', 'J0174-TP-XS', 'JNE3734-KR-XS', 'SET257-KR-PP-L', 'NW038-ST-SR-XXXL', 'NW038-ST-SR-M', 'J0377-SKD-XS', 'JNE3786-KR-XL', 'CH208-MUSTARD-M', 'JNE3447-KR-XL', 'JNE3679-TU-M', 'J0049-TP-L', 'JNE3453-KR-L', 'JNE3526-KR-XL', 'JNE2049-KR-351-M', 'JNE3252-KR-XS', 'SET372-KR-PP-M', 'BTM032-NP-M', 'SET435-KR-NP-S', 'JNE3780-KR-XS', 'JNE3602-KR-XS', 'J0225-SKD-XS', 'J0127-SKD-XXL', 'NW032-ST-CP-XS', 'JNE3902-KR-L', 'JNE3662-TP-M', 'JNE3456-KR-XL', 'JNE3820-KR-XXL', 'JNE3895-TP-XXXL', 'J0124-TP-XS', 'BTM038-PP-XXL', 'BL091-XL', 'JNE3770-KR-XS', 'JNE3390-KR-S', 'JNE3625-DR-XXL', 'SET308-KR-PP-XL', 'JNE3631-DR-XL', 'SET372-KR-PP-XL', 'JNE3749-KR-M', 'J0138-KR-S', 'J0190-TP-M', 'JNE3601-KR-XXL', 'JNE3388-KR-L', 'JNE3792-KR-L', 'J0226-SKD-L', 'J0370-SKD-L', 'J0049-TP-M', 'J0123-TP-M', 'JNE3802-KR-XXXL', 'JNE3257-KR-M', 'J0178-TP-M', 'SET248-KR-NP-XXL', 'JNE3649-TP-N-XXL', 'JNE3792-KR-M', 'PJNE3607-KR-6XL', 'NW004-TP-PJ-XS', 'MEN5005-KR-XL', 'J0078-SET-XL', 'J0176-TP-XS', 'JNE3665-TP-L', 'J0350-SET-M', 'SET308-KR-PP-XS', 'SET199-KR-NP-XL', 'SET244-KR-NP-XS', 'J0224-SKD-XXXL', 'SET315-KR-PP-M', 'JNE2251-KR-537-C-XXXL', 'SAR076', 'JNE3748-KR-XL', 'J0183-TP-XL', 'JNE3672-TU-XS', 'JNE3544-KR-XS', 'J0419-TP-S', 'JNE3889-KR-M', 'J0159-DR-XS', 'J0296-DR-M', 'SET199-KR-NP-XXXL', 'J0120-TP-M', 'SET083-KR-PP-XXL', 'J0062-DR-L', 'SET410-KR-NP-XXXL', 'JNE3520-KR-XS', 'JNE3395-KR-M', 'J0185-DR-M', 'JNE3887-KR-XXL', 'SET087-KR-PP-XXL', 'JNE3338-KR-S', 'J0225-SKD-L', 'J0293-DR-M', 'JNE3881-DR-S', 'JNE3517-KR-XXL', 'JNE3780-KR-S', 'JNE3701-KR-XXL', 'SET372-KR-PP-XXXL', 'JNE3686-TU-S', 'JNE3625-DR-L', 'PJNE3363-KR-N-6XL', 'NW028-TP-PJ-XS', 'J0197-TP-XS', 'JNE3734-KR-L', 'NW009-ST-CP-M', 'JNE3695-KR-XL', 'JNE3313-KR-A-L', 'J0127-SKD-L', 'JNE3641-TP-N-XXL', 'J0201-TP-S', 'NW015-TP-PJ-XXXL', 'J0293-DR-XL', 'J0223-SKD-XXXL', 'JNE3416-KR-S', 'NW006-ST-SR-XL', 'JNE3323-KR-A-M', 'SET240-KR-PP-M', 'SET100-KR-PP-L', 'JNE3678-TU-S', 'J0173-DR-XL', 'J0194-DR-L', 'JNE3771-KR-XS', 'JNE3753-KR-XL', 'SET242-KR-PP-XXL', 'JNE2100-KR-144-XXXL', 'SET199-KR-NP-XS', 'NW009-ST-CP-XS', 'JNE3434-KR-XXXL', 'SET235-KR-PP-S', 'JNE3823-KR-XXXL', 'JNE3750-KR-XL', 'SET346-KR-PP-XXXL', 'SET335-KR-NP-XL', 'JNE3898-KR-XL', 'SET224-KR-NP-L', 'J0323-CD-S', 'J0388-TP-L', 'JNE3500-KR-L', 'JNE3893-TP-S', 'JNE3825-KR-XXXL', 'J0040-SET-XS', 'SET230-KR-PP-XXL', 'SET238-KR-PP-XXL', 'JNE3631-DR-M', 'JNE3526-KR-XXL', 'JNE3577-KR-L', 'CH208-MUSTARD-S', 'JNE3734-KR-S', 'SET223-KR-NP-XS', 'JNE3821-KR-XXXL', 'BTM044-PP-XL', 'BTM039-PP-XL', 'JNE3821-KR-L', 'JNE3886-KR-XXXL', 'SET014-KR-PP-A-S', 'J0374-KR-L', 'JNE3563-KR-XXXL', 'J0131-KR-A-M', 'JNE3819-KR-XS', 'J0302-DR-XS', 'J0137-SET-XXXL', 'JNE3768-KR-XS', 'SET299-KR-PP-M', 'SET272-KR-PP-M', 'JNE3413-KR-XXXL', 'JNE3879-DR-S', 'J0348-SET-XXXL', 'SET372-KR-PP-XS', 'JNE3389-KR-S', 'JNE3798-KR-A-XS', 'NW028-TP-PJ-XXL', 'JNE3342-KR-S', 'SET275-KR-NP-XS', 'SET414-KR-NP-S', 'JNE3898-KR-S', 'J0153-DR-M', 'SET335-KR-NP-XXL', 'AN204-PURPLE-XL', 'JNE1408-KR-UDF19-A-L', 'J0144-SET-XS', 'JNE3500-KR-XXXL', 'JNE3395-KR-XXL', 'NW031-TP-PJ-XL', 'JNE3446-KR-M', 'J0142-KR-XXXL', 'J0188-KR-XXXL', 'SET226-KR-PP-XXXL', 'JNE2251-KR-537-XXXL', 'JNE3574-KR-XXXL', 'J0057-DR-XXXL', 'JNE3532-KR-S', 'J0133-KR-A-L', 'SET274-KR-PP-S', 'SET100-KR-PP-S', 'J0089-TP-L', 'J0082-TP-L', 'J0184-KR-A-XL', 'BTM039-PP-L', 'JNE3825-KR-L', 'JNE3534-KR-M', 'J0390-TP-XXL', 'J0345-SET-XS', 'J0418-TP-XXL', 'J0284-SKD-XL', 'BTM037-PP-M', 'JNE3042-KR-XS', 'SET214-KR-DPT-XXXL', 'JNE3456-KR-M', 'J0168-DR-M', 'JNE3825-KR-XXL', 'J0293-DR-XXL', 'J0111-TP-M', 'SET299-KR-PP-XXL', 'JNE3395-KR-XL', 'PJNE3439-KR-N-5XL', 'J0292-TP-L', 'J0350-SET-XS', 'J0212-DR-XS', 'J0307-TP-XS', 'J0330-KR-XL', 'JNE3627-KR-S', 'JNE3864-TU-S', 'J0190-TP-XXXL', 'JNE3774-KR-XXXL', 'AN211-BLACK-S', 'JNE3449-KR-M', 'J0296-DR-XXL', 'AN205-YELLOW-XL', 'J0302-DR-XL', 'J0173-DR-L', 'J0292-TP-XXXL', 'SET410-KR-NP-L', 'BL104-M', 'JNE3370-KR-L', 'JNE3875-KR-S', 'JNE3375-KR-XXXL', 'J0150-KR-M', 'J0116-TP-M', 'JNE3284-KR-XXL', 'JNE3273-KR-S', 'JNE3864-TU-XXL', 'JNE1408-KR-UDF19-A-XS', 'SET191-KR-PP-M', 'JNE3265-KR-XL', 'BTM008-B-M', 'J0331-KR-S', 'BTM008-XXXL', 'JNE3899-KR-XXL', 'J0235-SKD-L', 'SAR032', 'PSET058-KR-NP-6XL', 'BL111-XS', 'BL089-XS', 'BL098-XXL', 'JNE2251-KR-537-C-S', 'JNE3765-KR-M', 'SET299-KR-PP-XL', 'JNE3284-KR-XL', 'JNE3313-KR-A-S', 'SET275-KR-NP-XXL', 'BTM002-XXXL', 'J0254-SKD-XXL', 'CH201-RED-M', 'J0225-SKD-S', 'J0391-TP-M', 'JNE2309-KR-598-L', 'BL016-63RED-B', 'JNE3160-KR-XL', 'JNE3255-KR-M', 'JNE3284-KR-S', 'JNE3548-KR-S', 'JNE3777-KR-XS', 'JNE3736-KR-XXL', 'JNE3252-KR-S', 'JNE3862-TU-XXXL', 'JNE3030-KR-M', 'SAR036', 'SET014-KR-PP-A-XL', 'JNE3477-KR-M', 'SAR101', 'J0083-KR-XS', 'JNE3252-KR-L', 'SET436-KR-NP-S', 'J0290-CD-S', 'JNE3748-KR-S', 'JNE3489-KR-S', 'SET299-KR-PP-XS', 'JNE3725-KR-L', 'J0374-KR-XXXL', 'JNE3866-KR-S', 'SET185-KR-NP-XS', 'JNE3875-KR-XXL', 'BL096-XL', 'SET143-KR-PP-S', 'SET236-KR-PP-L', 'SET409-KR-NP-XS', 'SET162-KR-PP-XL', 'J0392-TP-L', 'JNE3477-KR-XL', 'SET131-KR-NP-XXL', 'JNE3765-KR-S', 'SET185-KR-NP-L', 'JNE3362-KR-XXXL', 'JNE3424-KR-M', 'JNE3762-KR-M', 'JNE3467-KR-S', 'J0386-KR-XXL', 'JNE3160-KR-M', 'J0418-TP-S', 'SET221-KR-NP-M', 'JNE3767-KR-XXL', 'JNE3902-KR-M', 'JNE1408-KR-UDF19-A-XXL', 'JNE3251-KR-XL', 'JNE3251-KR-M', 'J0102-SKD-S', 'J0186-SET-XS', 'NW014-ST-SR-XS', 'NW028-TP-PJ-S', 'JNE3313-KR-XXL', 'J0101-DR-S', 'J0208-DR-L', 'J0042-DR-XL', 'JNE3359-KR-XL', 'J0043-SET-S', 'JNE2294-KR-A-L', 'BTM047-PP-M', 'JNE2009-KR-310-S', 'JNE3443-KR-M', 'JNE3395-KR-L', 'J0073-KR-XXL', 'BTM042-PP-S', 'J0238-LCD-XS', 'JNE3860-DR-S', 'J0225-SKD-XXXL', 'JNE3771-KR-XL', 'SET087-KR-PP-XS', 'JNE3284-KR-M', 'JNE3672-TU-S', 'SET372-KR-PP-S', 'J0102-SKD-M', 'J0195-TP-XS', 'JNE3893-TP-XS', 'JNE3792-KR-XS', 'JNE3636-KR-XS', 'J0386-KR-XS', 'JNE3886-KR-XXL', 'JNE3251-KR-L', 'J0024-KR-M', 'JNE3897-KR-XXXL', 'SET062-KR-SP-XXL', 'SET415-KR-NP-XL', 'JNE3750-KR-XXXL', 'JNE3577-KR-XS', 'J0078-SET-XXXL', 'SET200-KR-NP-A-S', 'J0084-TP-XS', 'JNE2294-KR-A-XXL', 'SET094-KR-NP-XXL', 'JNE2324-KR-575-XXL', 'J0372-SKD-XL', 'SET026-KR-PP-A-XS', 'J0114-TP-XS', 'JNE3734-KR-M', 'JNE2131-KR-A-XXL', 'SET305-KR-DPT-XL', 'J0279-SET-L', 'SET097-KR-PP-S', 'J0235-SKD-XL', 'J0162-SKD-S', 'JNE3486-KR-XXXL', 'BL109-S', 'JNE3902-KR-XS', 'JNE3899-KR-L', 'SET210-KR-PP-XS', 'SET214-KR-DPT-XL', 'SET131-KR-NP-A-XS', 'SAR149', 'BL010-61CHIKU-B', 'JNE3629-KR-XXXL', 'SAR025', 'J0246-SKD-XXXL', 'JNE2294-KR-A-XS', 'SET372-KR-PP-L', 'J0378-SKD-XS', 'JNE3888-KR-XL', 'SET311-KR-NP-XL', 'SET311-KR-NP-XS', 'SAR039', 'SAR134', 'J0314-KR-XL', 'SAR046', 'JNE3542-KR-S', 'J0413-DR-XXXL', 'SET132-KR-NP-S', 'JNE3483-KR-XL', 'J0037-KR-XXL', 'JNE3359-KR-M', 'BTM042-PP-XXL', 'J0075-KR-XS', 'JNE2086-KR-389-XS', 'JNE1408-GREY-KR-UDF19-M', 'JNE3313-KR-XS', 'SAR053', 'JNE3363-KR-1032-XS', 'JNE3556-KR-L', 'SET091-KR-NP-XXL', 'JNE3503-KR-S', 'JNE3770-KR-XL', 'SAR056', 'JNE3366-KR-1053-A-XS', 'JNE2251-KR-537-S', 'J0100-DR-S', 'NW002-TP-PJ-XXL', 'SET185-KR-NP-S', 'BL107-XS', 'SET083-KR-PP-L', 'J0163-SKD-M', 'JNE2292-KR-588-L', 'J0145-SET-S', 'NW028-TP-PJ-XXXL', 'J0085-TP-XXL', 'JNE3445-KR-XS', 'SAR130', 'SAR097', 'J0101-DR-XS', 'JNE3736-KR-XS', 'JNE3624-KR-S', 'J0254-SKD-XL', 'SET131-KR-NP-S', 'JNE3768-KR-XL', 'AN201-RED-XXL', 'J0109-SKD-M', 'SET094-KR-NP-XS', 'SET372-KR-PP-XXL', 'SET315-KR-PP-L', 'JNE3464-KR-XXXL', 'JNE3257-KR-XXL', 'AN209-BIEGE-XXL', 'JNE3765-KR-XXXL', 'J0398-DR-XL', 'BL011-62PINK-B', 'JNE3667-TP-S', 'BTM027-NP-XXL', 'SET299-KR-PP-L', 'JNE3313-KR-M', 'J0011-LCD-A-L', 'JNE3667-TP-XS', 'BL095-XL', 'SET414-KR-NP-L', 'J0170-TP-A-M', 'BTM005-XXXL', 'JNE3369-KR-XL', 'J0120-TP-XS', 'SET311-KR-NP-S', 'JNE3748-KR-XXL', 'SAR102', 'SET194-KR-NP-XS', 'SET263-KR-NP-XL', 'SET313-KR-NP-S', 'BTM036-PP-XL', 'SET245-KR-NP-XXXL', 'JNE3364-KR-1051-XS', 'NW007-ST-CP-XL', 'JNE3403-KR-XL', 'BTM048-PP-XXXL', 'JNE3537-KR-XS', 'J0170-TP-A-L', 'JNE3555-KR-L', 'BL019-71PINK', 'JNE3486-KR-XXL', 'SET444-KR-SH-M', 'J0062-DR-M', 'SET414-KR-NP-XXXL', 'SET444-KR-SH-L', 'JNE3434-KR-XL', 'J0137-SET-XL', 'NW023-ST-SR-L', 'SET444-KR-SH-XXL', 'JNE3811-KR-XL', 'SET369-KR-NP-XL', 'JNE3484-KR-XS', 'SET444-KR-SH-S', 'J0431-DR-S', 'JNE3336-KR-S', 'SET444-KR-SH-XS', 'JNE2086-KR-389-XL', 'JNE2113-KR-381-XL', 'JNE2132-KR-398-L', 'JNE3908-KR-M', 'JNE3924-TU-L', 'JNE3621-KR-A-XXXL', 'JNE3909-KR-L', 'SET409-KR-NP-XXL', 'SET444-KR-SH-XXXL', 'JNE3906-KR-XL', 'SET444-KR-SH-XL', 'SET461-KR-NP-XL', 'JNE3900-KR-A-L', 'J0431-DR-L', 'J0434-DR-XXXL', 'JNE3656-TP-N-XL', 'JNE3885-KR-M', 'JNE3903-KR-XXXL', 'J0434-DR-XXL', 'JNE3898-KR-L', 'JNE3346-KR-XL', 'J0229-SKD-XXXL', 'SET432-KR-PP-M', 'SET338-KR-NP-XS', 'BTM005-B-L', 'SET409-KR-NP-XL', 'JNE3476-KR-XXXL', 'JNE3900-KR-A-XXL', 'JNE3744-TU-XXXL', 'JNE3413-KR-M', 'AN206-GREEN-S', 'J0378-SKD-L', 'JNE3761-KR-XXXL', 'J0244-SKD-XXL', 'BTM005-XXL', 'J0431-DR-M', 'J0294-TP-XXXL', 'J0072-KR-L', 'JNE3811-KR-XXL', 'J0374-KR-M', 'J0187-KR-XXL', 'JNE3910-KR-L', 'AN212-WHITE-XXL', 'JNE2049-KR-351-L', 'JNE2145-KR-A-XXXL', 'JNE1951-KR-155-L', 'SET003-KR-NP-A-XXL', 'JNE3891-TP-L', 'JNE3902-KR-XXL', 'AN204-PURPLE-M', 'SET414-KR-NP-XS', 'AN204-PURPLE-XXL', 'JNE3273-KR-XS', 'BL087-XS', 'SET019-KR-PP-A-S', 'JNE3910-KR-XXL', 'JNE3908-KR-XXL', 'JNE3455-KR-XL', 'MEN5029-KR-XXXL', 'SET438-KR-NP-M', 'J0429-DR-XXXL', 'J0101-DR-A-XL', 'JNE3890-TP-XL', 'SET415-KR-NP-XXL', 'JNE3896-KR-A-XL', 'SET191-KR-PP-XL', 'JNE3474-KR-E-XXXL', 'JNE3902-KR-S', 'JNE3359-KR-XXL', 'J0085-TP-L', 'JNE2294-KR-A-XXXL', 'JNE3561-KR-XXXL', 'SET340-KR-NP-M', 'J0418-TP-XL', 'JNE3889-KR-XXL', 'J0431-DR-XXL', 'J0429-DR-XXL', 'JNE3927-KR-XL', 'J0042-DR-XS', 'JNE3621-KR-A-XL', 'SAR060', 'SET431-KR-NP-L', 'SET442-KR-NP-XXXL', 'JNE2293-KR-555-XXL', 'SET437-KR-PP-XXXL', 'J0431-DR-XXXL', 'DPT052', 'JNE3924-TU-M', 'SET281-KR-PP-A-S', 'SET272-KR-PP-A-S', 'DPT041', 'DPT032', 'JNE3364-KR-1051-L', 'JNE3910-KR-XS', 'JNE3903-KR-XXL', 'J0391-TP-S', 'JNE2323-KR-574-XS', 'J0420-TP-M', 'J0314-KR-L', 'J0374-KR-XL', 'J0429-DR-XS', 'JNE3891-TP-XXL', 'JNE3909-KR-M', 'AN206-GREEN-XL', 'AN212-WHITE-XL', 'AN201-RED-XL', 'J0434-DR-L', 'JNE3888-KR-M', 'JNE3910-KR-S', 'JNE3906-KR-XXXL', 'SET271-KR-NP-XL', 'JNE3629-KR-XS', 'JNE3864-TU-XS', 'JNE3910-KR-M', 'J0429-DR-S', 'JNE3890-TP-M', 'JNE3423-KR-A-XL', 'J0420-TP-S', 'J0419-TP-XS', 'JNE3663-TP-S', 'J0434-DR-XL', 'JNE3893-TP-XL', 'J0028-KR-XS', 'J0180-DR-XS', 'AN212-WHITE-L', 'JNE3886-KR-L', 'SET415-KR-NP-S', 'CH213-BROWN-S', 'PJNE3439-KR-N-4XL', 'JNE3910-KR-XL', 'BTM003-B-L', 'J0431-DR-XS', 'J0429-DR-XL', 'JNE3336-KR-XL', 'SET410-KR-NP-M', 'SET409-KR-NP-XXXL', 'SET251-KR-PP-XXL', 'BL111-XL', 'SET437-KR-PP-XXL', 'JNE3257-KR-L', 'SET442-KR-NP-L', 'NW006-ST-SR-XS', 'JNE3903-KR-XL', 'J0417-TP-S', 'JNE3872-KR-XXXL', 'J0136-KR-XL', 'SET022-KR-SP-A-XXL', 'J0117-TP-A-XXXL', 'JNE3908-KR-XS', 'JNE3703-KR-XXXL', 'SAR028', 'JNE3897-KR-XL', 'NW036-ST-SR-L', 'JNE3460-KR-L', 'JNE3908-KR-XL', 'AN210-NAVY-XL', 'BL107-M', 'JNE3424-KR-XS', 'SET438-KR-NP-XXL', 'JNE3423-KR-A-L', 'JNE3383-KR-A-L', 'J0419-TP-XXXL', 'BL089-M', 'BL093-M', 'SET431-KR-NP-M', 'J0242-SKD-XXXL', 'SET337-KR-NP-XXL', 'CH208-MUSTARD-XXL', 'SET442-KR-NP-M', 'SAR027', 'JNE2171-KR-437-XS', 'JNE3906-KR-L', 'JNE3897-KR-S', 'SET431-KR-NP-XS', 'JNE3903-KR-XS', 'JNE3760-KR-XS', 'JNE3895-TP-M', 'JNE3862-TU-XS', 'JNE3890-TP-L', 'J0102-SKD-XXXL', 'SET410-KR-NP-XXL', 'SET281-KR-PP-A-XXXL', 'JNE3765-KR-XL', 'JNE3896-KR-A-L', 'JNE3420-KR-M', 'SET438-KR-NP-XL', 'JNE3906-KR-M', 'JNE3927-KR-XS', 'AN205-YELLOW-XXL', 'SET437-KR-PP-M', 'SET437-KR-PP-S', 'SET437-KR-PP-L', 'SET462-KR-NP-S', 'JNE3927-KR-M', 'J0136-KR-M', 'JNE3398-KR-XXXL', 'JNE2006-KR-158-S', 'JNE3811-KR-S', 'JNE3547-KR-M', 'J0037-KR-L', 'JNE3220-KR-XXL', 'JNE3621-KR-A-XXL', 'JNE3903-KR-L', 'JNE3416-KR-XL', 'BTM040-PP-M', 'J0232-SKD-M', 'SET226-KR-PP-XS', 'JNE3908-KR-S', 'JNE3909-KR-XL', 'JNE3612-KR-XS', 'JNE3878-KR-XS', 'J0241-SKD-M', 'SET431-KR-NP-S', 'JNE3862-TU-XXL', 'SET431-KR-NP-XXXL', 'NW006-ST-SR-M', 'J0073-KR-S', 'JNE3924-TU-XS', 'NW033-ST-CP-L', 'JNE3768-KR-L', 'J0279-SET-XXXL', 'SET338-KR-NP-XXL', 'SET461-KR-NP-XXL', 'J0388-TP-XXL', 'SET449-KR-NP-S', 'J0429-DR-M', 'SET445-KR-NP-S', 'SET060-KR-NP-XL', 'CH203-MAROON-S', 'JNE3441-KR-B-XS', 'JNE3899-KR-A-M', 'JNE3908-KR-L', 'SET432-KR-PP-XL', 'JNE3893-TP-XXXL', 'JNE3062-KR-M', 'SET263-KR-NP-S', 'J0420-TP-L', 'J0434-DR-S', 'SET404-KR-NP-XXXL', 'BL107-XXL', 'PJNE3445-KR-N-5XL', 'J0374-KR-XS', 'J0279-SET-XXL', 'NW033-ST-CP-XL', 'CH202-ORANGE-XXL', 'SET432-KR-PP-L', 'J0303-KR-XS', 'JNE3450-KR-XL', 'J0323-CD-M', 'J0170-TP-A-S', 'JNE3897-KR-M', 'SET446-KR-NP-XS', 'JNE3762-KR-XS', 'JNE3504-KR-XXXL', 'J0397-DR-XS', 'CH206-GREEN-M', 'CH205-YELLOW-XL', 'JNE3872-KR-L', 'AN212-WHITE-S', 'JNE3365-KR-1052-S', 'JNE3423-KR-A-XXL', 'JNE3899-KR-A-S', 'SET461-KR-NP-XS', 'SET449-KR-NP-M', 'JNE3030-KR-S', 'BTM048-PP-XXL', 'SAR182', 'JNE3628-KR-XXL', 'JNE3617-KR-M', 'JNE3777-KR-S', 'JNE3765-KR-XXL', 'J0101-DR-A-M', 'JNE3483-KR-M', 'SET262-KR-NP-A-XS', 'SET281-KR-PP-A-XS', 'JNE3403-KR-XXL', 'JNE3909-KR-S', 'JNE3257-KR-XL', 'SET301-KR-PP-XL', 'JNE3576-KR-L', 'JNE3615-KR-XXL', 'JNE3750-KR-XS', 'J0380-SKD-XS', 'SET431-KR-NP-XL', 'J0115-TP-XXL', 'JNE2307-KR-572-XL', 'J0330-KR-M', 'J0226-SKD-XL', 'J0165-TP-XXXL', 'JNE3866-KR-XS', 'JNE3910-KR-XXXL', 'JNE3441-KR-B-XXXL', 'JNE3688-TU-S', 'J0145-SET-XXXL', 'SET410-KR-NP-S', 'BTM030-NP-XL', 'JNE3483-KR-XXL', 'J0163-SKD-XXL', 'SET014-KR-PP-A-XS', 'AN212-WHITE-M', 'J0127-SKD-M', 'JNE3872-KR-M', 'J0109-SKD-XS', 'MEN5005-KR-M', 'CH207-PINK-L', 'J0431-DR-XL', 'JNE3907-KR-L', 'SET111-KR-SP-XL', 'SET247-KR-SHA-XXL', 'J0371-SKD-M', 'SET336-KR-NP-XXL', 'JNE2251-KR-537-C-XS', 'JNE3903-KR-M', 'SET289-KR-NP-XXL', 'JNE3886-KR-XL', 'JNE3892-TP-S', 'J0187-KR-L', 'JNE3896-KR-A-XXXL', 'JNE3900-KR-A-XXXL', 'SET205-KR-DPT-A-XL', 'JNE3621-KR-A-S', 'JNE3834-KR-XXXL', 'BL095-M', 'J0331-KR-XS', 'JNE3423-KR-A-S', 'BTM037-PP-S', 'J0245-SKD-XS', 'JNE3571-KR-XXXL', 'SET306-KR-PP-S', 'AN204-PURPLE-S', 'JNE3909-KR-XXL', 'J0174-TP-S', 'J0019-SET-M', 'BTM038-PP-XS', 'J0091-TP-S', 'SET091-KR-NP-XXXL', 'SET373-KR-PP-L', 'JNE2145-KR-A-L', 'SET234-KR-PP-M', 'PJNE3445-KR-N-4XL', 'JNE3791-DR-XS', 'J0057-DR-S', 'J0005-DR-B-M', 'JNE3485-KR-M', 'JNE2145-KR-A-XL', 'SET358-KR-NP-XL', 'JNE3891-TP-M', 'SET004-KR-SP-A-XS', 'SET410-KR-NP-XL', 'JNE3547-KR-XL', 'SET289-KR-NP-S', 'JNE3369-KR-S', 'SET373-KR-PP-M', 'JNE3424-KR-XXL', 'SET301-KR-PP-L', 'JNE3486-KR-L', 'JNE3719-KR-XL', 'JNE3389-KR-XS', 'JNE3491-KR-S', 'JNE3780-KR-M', 'JNE3627-KR-XS', 'J0417-TP-XS', 'J0074-TP-XS', 'JNE3460-KR-S', 'J0152-DR-M', 'SET432-KR-PP-XXL', 'BTM003-XXXL', 'JNE3517-KR-M', 'JNE3486-KR-S', 'AN207-PINK-S', 'JNE3899-KR-A-XL', 'J0279-SET-M', 'JNE3890-TP-XXXL', 'SET431-KR-NP-XXL', 'JNE2113-KR-381-L', 'JNE3644-TP-N-L', 'J0391-TP-XS', 'JNE3770-KR-M', 'J0246-SKD-XS', 'AN211-BLACK-XL', 'JNE3364-KR-1051-M', 'JNE3460-KR-XXL', 'JNE3886-KR-M', 'JNE3575-KR-XS', 'SAR037', 'J0417-TP-M', 'JNE3820-KR-XXXL', 'JNE2131-KR-A-XXXL', 'J0137-SET-M', 'NW036-ST-SR-XXL', 'SET337-KR-NP-XL', 'JNE3516-KR-E-XS', 'CH209-BIEGE-L', 'SAR148', 'BL085-S', 'SET266-KR-NP-S', 'JNE2131-KR-A-XL', 'SET192-KR-NP-XL', 'JNE3364-KR-1051-S', 'J0279-SET-XL', 'SAR059', 'JNE3416-KR-L', 'JNE3432-KR-M', 'JNE3432-KR-S', 'JNE3564-KR-XS', 'BTM048-PP-L', 'JNE3447-KR-XXXL', 'J0419-TP-XXL', 'JNE3401-KR-XXXL', 'JNE3872-KR-XXL', 'JNE3464-KR-XXL', 'SET201-KR-NP-A-XL', 'JNE2131-KR-A-M', 'SAR030', 'JNE3296-KR-M', 'J0163-SKD-XXXL', 'BL098-M', 'J0238-LCD-S', 'JNE3907-KR-S', 'JNE3907-KR-XS', 'JNE3370-KR-XXL', 'JNE3663-TP-L', 'JNE3625-DR-XL', 'SET373-KR-PP-XS', 'J0052-KR-XS', 'J0172-TP-XXL', 'JNE3665-TP-XXL', 'JNE3789-KR-L', 'JNE3432-KR-XS', 'JNE3516-KR-E-XXXL', 'JNE3694-KR-XXL', 'JNE3535-KR-XS', 'SET301-KR-PP-XXL', 'J0110-SKD-L', 'JNE3555-KR-XXXL', 'JNE3743-TP-M', 'SET414-KR-NP-M', 'PJNE3439-KR-N-6XL', 'JNE3725-KR-M', 'JNE3520-KR-XXL', 'JNE3520-KR-M', 'J0079-SKD-XL', 'JNE3438-KR-M', 'BL087-S', 'JNE3417-KR-M', 'JNE3534-KR-XL', 'JNE09210-PINK-SR-JP8101RNV-K', 'SAR113', 'NW035-ST-CP-XL', 'SAR159', 'JNE3394-KR-S', 'J0121-TP-S', 'BTM026-NP-XXL', 'J0291-JS-L', 'JNE3687-TU-S', 'SET211-KR-DPT-XXL', 'JNE09209-MULTI-SR-JP8101RMV-K', 'J0194-DR-M', 'J0039-SET-XS', 'J0319-KR-S', 'J0246-SKD-L', 'JNE2294-KR-A-S', 'JNE3559-KR-M', 'SET247-KR-SHA-XXXL', 'JNE3234-KR-M', 'BL087-L', 'J0034-SET-S', 'SET432-KR-PP-S', 'J0109-SKD-S', 'NW032-ST-CP-S', 'JNE3788-KR-XS', 'SET270-KR-PP-M', 'BL025-74BLACK', 'JNE3892-TP-XS', 'SET066-KR-PP-M', 'JNE2251-KR-537-C-XL', 'J0070-KR-S', 'JNE3678-TU-XS', 'J0116-TP-XS', 'SET232-KR-PP-XS', 'J0196-TP-XS', 'JNE3889-KR-S', 'JNE3896-KR-XL', 'BL103-M', 'J0286-KR-L', 'J0319-KR-XL', 'JNE3398-KR-XL', 'JNE3370-KR-S', 'JNE3678-TU-XXL', 'SET045-KR-NP-M']}
2023-10-30 10:02:10,490 - INFO - Executed in: 7.64732551574707s
2023-10-30 10:02:10,491 - INFO - 127.0.0.1 - - [30/Oct/2023 10:02:10] "GET /ask/List%20all%20unique%20'SKU'%20values%20in%20the%20dataset. HTTP/1.1" 200 -
2023-10-30 10:02:24,869 - INFO - Question: List all unique 'SKU' values in the dataset display as a table.
2023-10-30 10:02:24,870 - INFO - Running PandasAI with openai LLM...
2023-10-30 10:02:24,871 - INFO - Prompt ID: 447a1acc-8a71-4b7e-94eb-68fc1f72d709
2023-10-30 10:02:24,912 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
4,0104064071,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
3,3106480889,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
2,1350073013,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
0,4420969440,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
1,5383373807,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
</dataframe>

<conversation>
User 1: List all unique 'SKU' values in the dataset display as a table.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 10:02:33,471 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Extract the first dataframe from the list
    df = dfs[0]
    
    # Get unique SKU values
    unique_skus = df['SKU'].unique()
    
    # Create a dataframe to display the unique SKU values
    sku_df = pd.DataFrame({'SKU': unique_skus})
    
    # Return the dataframe as the result
    return {"type": "dataframe", "value": sku_df}
```

2023-10-30 10:02:33,473 - INFO - Saving charts to plots/447a1acc-8a71-4b7e-94eb-68fc1f72d709.png
2023-10-30 10:02:33,476 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/447a1acc-8a71-4b7e-94eb-68fc1f72d709.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/447a1acc-8a71-4b7e-94eb-68fc1f72d709.png" }
    """
    df = dfs[0]
    unique_skus = df['SKU'].unique()
    sku_df = pd.DataFrame({'SKU': unique_skus})
    return {'type': 'dataframe', 'value': sku_df}
        ```
2023-10-30 10:02:33,510 - INFO - Answer: {'type': 'dataframe', 'value':                   SKU
0      SET389-KR-NP-S
1     JNE3781-KR-XXXL
2       JNE3371-KR-XL
3          J0341-DR-L
4     JNE3671-TU-XXXL
...               ...
7190      J0319-KR-XL
7191    JNE3398-KR-XL
7192     JNE3370-KR-S
7193   JNE3678-TU-XXL
7194   SET045-KR-NP-M

[7195 rows x 1 columns]}
2023-10-30 10:02:33,510 - INFO - Executed in: 8.64118480682373s
2023-10-30 10:02:33,515 - INFO - 127.0.0.1 - - [30/Oct/2023 10:02:33] "GET /ask/List%20all%20unique%20'SKU'%20values%20in%20the%20dataset%20display%20as%20a%20table. HTTP/1.1" 200 -
2023-10-30 10:02:57,046 - INFO - Question: Create a table summarizing the average order amount for each category.
2023-10-30 10:02:57,046 - INFO - Running PandasAI with openai LLM...
2023-10-30 10:02:57,047 - INFO - Prompt ID: 3dbe4356-e509-4e14-9671-b450c577ea16
2023-10-30 10:02:57,079 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
4,0104064071,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
3,3106480889,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
2,1350073013,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
0,4420969440,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
1,5383373807,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
</dataframe>

<conversation>
User 1: Create a table summarizing the average order amount for each category.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 10:03:05,110 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0].copy()
    
    # Process
    df['Amount'] = pd.to_numeric(df['Amount'], errors='coerce')
    avg_order_amount = df.groupby('Category')['Amount'].mean().reset_index()
    
    # Analyze
    result = {
        "type": "dataframe",
        "value": avg_order_amount
    }
    
    return result
```

2023-10-30 10:03:05,112 - INFO - Saving charts to plots/3dbe4356-e509-4e14-9671-b450c577ea16.png
2023-10-30 10:03:05,115 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/3dbe4356-e509-4e14-9671-b450c577ea16.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/3dbe4356-e509-4e14-9671-b450c577ea16.png" }
    """
    df = dfs[0].copy()
    df['Amount'] = pd.to_numeric(df['Amount'], errors='coerce')
    avg_order_amount = df.groupby('Category')['Amount'].mean().reset_index()
    result = {'type': 'dataframe', 'value': avg_order_amount}
    return result
        ```
2023-10-30 10:03:05,182 - INFO - Answer: {'type': 'dataframe', 'value':         Category      Amount
0         Blouse  520.327106
1         Bottom  358.733286
2        Dupatta  305.000000
3   Ethnic Dress  723.895389
4          Saree  799.572645
5            Set  833.385571
6            Top  526.098603
7  Western Dress  762.790580
8          kurta  455.927108}
2023-10-30 10:03:05,183 - INFO - Executed in: 8.137047529220581s
2023-10-30 10:03:05,184 - INFO - 127.0.0.1 - - [30/Oct/2023 10:03:05] "GET /ask/Create%20a%20table%20summarizing%20the%20average%20order%20amount%20for%20each%20category. HTTP/1.1" 200 -
2023-10-30 10:11:12,150 - INFO - Question: What is the overall order fulfillment status breakdown in terms of percentages
2023-10-30 10:11:12,151 - INFO - Running PandasAI with openai LLM...
2023-10-30 10:11:12,152 - INFO - Prompt ID: ba9ad720-1a1d-40d7-abaf-2febe335e141
2023-10-30 10:11:12,199 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
4,0104064071,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
3,3106480889,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
2,1350073013,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
0,4420969440,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
1,5383373807,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
</dataframe>

<conversation>
User 1: What is the overall order fulfillment status breakdown in terms of percentages
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 10:11:19,884 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0]
    
    # Process
    order_status_counts = df['Status'].value_counts()
    total_orders = len(df)
    order_status_percentages = order_status_counts / total_orders * 100
    
    # Analyze
    result = {
        "type": "dataframe",
        "value": order_status_percentages
    }
    
    return result
```

2023-10-30 10:11:19,886 - INFO - Saving charts to plots/ba9ad720-1a1d-40d7-abaf-2febe335e141.png
2023-10-30 10:11:19,889 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/ba9ad720-1a1d-40d7-abaf-2febe335e141.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/ba9ad720-1a1d-40d7-abaf-2febe335e141.png" }
    """
    df = dfs[0]
    order_status_counts = df['Status'].value_counts()
    total_orders = len(df)
    order_status_percentages = order_status_counts / total_orders * 100
    result = {'type': 'dataframe', 'value': order_status_percentages}
    return result
        ```
2023-10-30 10:11:19,921 - INFO - Answer: {'type': 'dataframe', 'value': Shipped                          60.324869
Shipped - Delivered to Buyer     22.305873
Cancelled                        14.213607
Shipped - Returned to Seller      1.514247
Shipped - Picked Up               0.754410
Pending                           0.510176
Pending - Waiting for Pick Up     0.217872
Shipped - Returning to Seller     0.112425
Shipped - Out for Delivery        0.027137
Shipped - Rejected by Buyer       0.008529
Shipping                          0.006203
Shipped - Lost in Transit         0.003877
Shipped - Damaged                 0.000775
Name: Status, dtype: float64}
2023-10-30 10:11:19,921 - INFO - Executed in: 7.771313905715942s
2023-10-30 10:11:19,922 - INFO - 127.0.0.1 - - [30/Oct/2023 10:11:19] "GET /ask/What%20is%20the%20overall%20order%20fulfillment%20status%20breakdown%20in%20terms%20of%20percentages HTTP/1.1" 200 -
2023-10-30 10:13:00,614 - INFO - Question: What is the overall order fulfillment status breakdown in terms of percentages show in table
2023-10-30 10:13:00,615 - INFO - Running PandasAI with openai LLM...
2023-10-30 10:13:00,616 - INFO - Prompt ID: 09722341-eaf8-40bd-bf19-ac05dd7aabd2
2023-10-30 10:13:00,660 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
4,0104064071,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
3,3106480889,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
2,1350073013,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
0,4420969440,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
1,5383373807,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
</dataframe>

<conversation>
User 1: What is the overall order fulfillment status breakdown in terms of percentages show in table
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 10:13:09,961 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0]
    
    # Process
    order_status_counts = df['Status'].value_counts()
    total_orders = len(df)
    order_status_percentages = order_status_counts / total_orders * 100
    
    # Analyze
    order_status_breakdown = pd.DataFrame({'Order Status': order_status_counts.index, 'Percentage': order_status_percentages.values})
    
    return {"type": "dataframe", "value": order_status_breakdown}
```

2023-10-30 10:13:09,963 - INFO - Saving charts to plots/09722341-eaf8-40bd-bf19-ac05dd7aabd2.png
2023-10-30 10:13:09,966 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/09722341-eaf8-40bd-bf19-ac05dd7aabd2.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/09722341-eaf8-40bd-bf19-ac05dd7aabd2.png" }
    """
    df = dfs[0]
    order_status_counts = df['Status'].value_counts()
    total_orders = len(df)
    order_status_percentages = order_status_counts / total_orders * 100
    order_status_breakdown = pd.DataFrame({'Order Status': order_status_counts.index, 'Percentage': order_status_percentages.values})
    return {'type': 'dataframe', 'value': order_status_breakdown}
        ```
2023-10-30 10:13:09,996 - INFO - Answer: {'type': 'dataframe', 'value':                      Order Status  Percentage
0                         Shipped   60.324869
1    Shipped - Delivered to Buyer   22.305873
2                       Cancelled   14.213607
3    Shipped - Returned to Seller    1.514247
4             Shipped - Picked Up    0.754410
5                         Pending    0.510176
6   Pending - Waiting for Pick Up    0.217872
7   Shipped - Returning to Seller    0.112425
8      Shipped - Out for Delivery    0.027137
9     Shipped - Rejected by Buyer    0.008529
10                       Shipping    0.006203
11      Shipped - Lost in Transit    0.003877
12              Shipped - Damaged    0.000775}
2023-10-30 10:13:09,996 - INFO - Executed in: 9.381941318511963s
2023-10-30 10:13:09,997 - INFO - 127.0.0.1 - - [30/Oct/2023 10:13:09] "GET /ask/What%20is%20the%20overall%20order%20fulfillment%20status%20breakdown%20in%20terms%20of%20percentages%20show%20in%20table HTTP/1.1" 200 -
2023-10-30 10:14:01,446 - INFO - Question: What is the overall order fulfillment status breakdown in terms of percentages
2023-10-30 10:14:01,448 - INFO - Running PandasAI with openai LLM...
2023-10-30 10:14:01,449 - INFO - Prompt ID: d87427b0-9d0a-4ecb-8021-e0509622a034
2023-10-30 10:14:01,486 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
4,0104064071,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
3,3106480889,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
2,1350073013,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
0,4420969440,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
1,5383373807,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
</dataframe>

<conversation>
User 1: What is the overall order fulfillment status breakdown in terms of percentages
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 10:14:10,172 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0]
    
    # Process
    order_status_counts = df['Status'].value_counts()
    total_orders = len(df)
    order_status_percentages = order_status_counts / total_orders * 100
    
    # Analyze
    result = {
        "type": "dataframe",
        "value": order_status_percentages
    }
    
    return result
```

2023-10-30 10:14:10,174 - INFO - Saving charts to plots/d87427b0-9d0a-4ecb-8021-e0509622a034.png
2023-10-30 10:14:10,176 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/d87427b0-9d0a-4ecb-8021-e0509622a034.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/d87427b0-9d0a-4ecb-8021-e0509622a034.png" }
    """
    df = dfs[0]
    order_status_counts = df['Status'].value_counts()
    total_orders = len(df)
    order_status_percentages = order_status_counts / total_orders * 100
    result = {'type': 'dataframe', 'value': order_status_percentages}
    return result
        ```
2023-10-30 10:14:10,197 - INFO - Answer: {'type': 'dataframe', 'value': Shipped                          60.324869
Shipped - Delivered to Buyer     22.305873
Cancelled                        14.213607
Shipped - Returned to Seller      1.514247
Shipped - Picked Up               0.754410
Pending                           0.510176
Pending - Waiting for Pick Up     0.217872
Shipped - Returning to Seller     0.112425
Shipped - Out for Delivery        0.027137
Shipped - Rejected by Buyer       0.008529
Shipping                          0.006203
Shipped - Lost in Transit         0.003877
Shipped - Damaged                 0.000775
Name: Status, dtype: float64}
2023-10-30 10:14:10,197 - INFO - Executed in: 8.750984907150269s
2023-10-30 10:14:10,198 - INFO - 127.0.0.1 - - [30/Oct/2023 10:14:10] "GET /ask/What%20is%20the%20overall%20order%20fulfillment%20status%20breakdown%20in%20terms%20of%20percentages HTTP/1.1" 200 -
2023-10-30 10:14:49,572 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 10:14:49,572 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 10:14:54,795 - INFO - Question: What is the overall order fulfillment status breakdown in terms of percentages sho
2023-10-30 10:14:54,841 - INFO - Running PandasAI with openai LLM...
2023-10-30 10:14:54,842 - INFO - Prompt ID: bc42b5ed-c3bc-4c8e-bf97-f6bb38afd125
2023-10-30 10:14:54,893 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
3,9661310358,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
0,1060013997,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
1,9514961155,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
4,7573479346,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
2,2385679055,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
</dataframe>

<conversation>
User 1: What is the overall order fulfillment status breakdown in terms of percentages sho
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 10:15:03,628 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0]
    
    # Process
    order_status_counts = df['Status'].value_counts()
    total_orders = len(df)
    order_status_percentages = order_status_counts / total_orders * 100
    
    # Analyze
    order_status_breakdown = order_status_percentages.to_dict()
    
    return {"type": "dataframe", "value": pd.DataFrame(order_status_breakdown, columns=["Percentage"])}
```

2023-10-30 10:15:03,630 - INFO - Saving charts to plots/bc42b5ed-c3bc-4c8e-bf97-f6bb38afd125.png
2023-10-30 10:15:03,634 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/bc42b5ed-c3bc-4c8e-bf97-f6bb38afd125.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/bc42b5ed-c3bc-4c8e-bf97-f6bb38afd125.png" }
    """
    df = dfs[0]
    order_status_counts = df['Status'].value_counts()
    total_orders = len(df)
    order_status_percentages = order_status_counts / total_orders * 100
    order_status_breakdown = order_status_percentages.to_dict()
    return {'type': 'dataframe', 'value': pd.DataFrame(order_status_breakdown, columns=['Percentage'])}
        ```
2023-10-30 10:15:03,681 - INFO - Answer: {'type': 'dataframe', 'value': Empty DataFrame
Columns: [Percentage]
Index: []}
2023-10-30 10:15:03,682 - INFO - Executed in: 8.88665246963501s
2023-10-30 10:15:03,683 - INFO - 127.0.0.1 - - [30/Oct/2023 10:15:03] "GET /ask/What%20is%20the%20overall%20order%20fulfillment%20status%20breakdown%20in%20terms%20of%20percentages%20sho HTTP/1.1" 200 -
2023-10-30 10:15:10,413 - INFO - Question: What is the overall order fulfillment status breakdown in terms of percentages
2023-10-30 10:15:10,413 - INFO - Running PandasAI with openai LLM...
2023-10-30 10:15:10,414 - INFO - Prompt ID: ad438567-442c-451e-8260-d60c4dc19944
2023-10-30 10:15:10,453 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
3,9661310358,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
0,1060013997,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
1,9514961155,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
4,7573479346,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
2,2385679055,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
</dataframe>

<conversation>
User 1: What is the overall order fulfillment status breakdown in terms of percentages
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 10:15:18,955 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0]
    
    # Process
    order_status_counts = df['Status'].value_counts()
    total_orders = len(df)
    order_status_percentages = order_status_counts / total_orders * 100
    
    # Analyze
    result = {
        "type": "dataframe",
        "value": order_status_percentages
    }
    
    return result
```

2023-10-30 10:15:18,957 - INFO - Saving charts to plots/ad438567-442c-451e-8260-d60c4dc19944.png
2023-10-30 10:15:18,958 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/ad438567-442c-451e-8260-d60c4dc19944.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/ad438567-442c-451e-8260-d60c4dc19944.png" }
    """
    df = dfs[0]
    order_status_counts = df['Status'].value_counts()
    total_orders = len(df)
    order_status_percentages = order_status_counts / total_orders * 100
    result = {'type': 'dataframe', 'value': order_status_percentages}
    return result
        ```
2023-10-30 10:15:18,978 - INFO - Answer: {'type': 'dataframe', 'value': Shipped                          60.324869
Shipped - Delivered to Buyer     22.305873
Cancelled                        14.213607
Shipped - Returned to Seller      1.514247
Shipped - Picked Up               0.754410
Pending                           0.510176
Pending - Waiting for Pick Up     0.217872
Shipped - Returning to Seller     0.112425
Shipped - Out for Delivery        0.027137
Shipped - Rejected by Buyer       0.008529
Shipping                          0.006203
Shipped - Lost in Transit         0.003877
Shipped - Damaged                 0.000775
Name: Status, dtype: float64}
2023-10-30 10:15:18,978 - INFO - Executed in: 8.565534591674805s
2023-10-30 10:15:18,979 - ERROR - Error: Object of type Series is not JSON serializable
2023-10-30 10:15:18,979 - INFO - 127.0.0.1 - - [30/Oct/2023 10:15:18] "[35m[1mGET /ask/What%20is%20the%20overall%20order%20fulfillment%20status%20breakdown%20in%20terms%20of%20percentages HTTP/1.1[0m" 500 -
2023-10-30 10:15:34,735 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 10:15:34,736 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 10:15:43,602 - INFO - Question: What is the overall order fulfillment status breakdown in terms of percentages
2023-10-30 10:15:43,647 - INFO - Running PandasAI with openai LLM...
2023-10-30 10:15:43,648 - INFO - Prompt ID: 1bafc63b-c9c5-44ed-9e53-96f1b41257cf
2023-10-30 10:15:43,701 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
4,1573959701,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
2,4369400850,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
3,6547191092,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
0,3997621159,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
1,5589722922,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
</dataframe>

<conversation>
User 1: What is the overall order fulfillment status breakdown in terms of percentages
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 10:15:50,936 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0]
    
    # Process
    order_status_counts = df['Status'].value_counts()
    total_orders = len(df)
    order_status_percentages = order_status_counts / total_orders * 100
    
    # Analyze
    result = {
        "type": "dataframe",
        "value": order_status_percentages
    }
    
    return result
```

2023-10-30 10:15:50,936 - INFO - Saving charts to plots/1bafc63b-c9c5-44ed-9e53-96f1b41257cf.png
2023-10-30 10:15:50,937 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/1bafc63b-c9c5-44ed-9e53-96f1b41257cf.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/1bafc63b-c9c5-44ed-9e53-96f1b41257cf.png" }
    """
    df = dfs[0]
    order_status_counts = df['Status'].value_counts()
    total_orders = len(df)
    order_status_percentages = order_status_counts / total_orders * 100
    result = {'type': 'dataframe', 'value': order_status_percentages}
    return result
        ```
2023-10-30 10:15:50,977 - INFO - Answer: {'type': 'dataframe', 'value': Shipped                          60.324869
Shipped - Delivered to Buyer     22.305873
Cancelled                        14.213607
Shipped - Returned to Seller      1.514247
Shipped - Picked Up               0.754410
Pending                           0.510176
Pending - Waiting for Pick Up     0.217872
Shipped - Returning to Seller     0.112425
Shipped - Out for Delivery        0.027137
Shipped - Rejected by Buyer       0.008529
Shipping                          0.006203
Shipped - Lost in Transit         0.003877
Shipped - Damaged                 0.000775
Name: Status, dtype: float64}
2023-10-30 10:15:50,978 - INFO - Executed in: 7.376325845718384s
2023-10-30 10:15:50,979 - INFO - 127.0.0.1 - - [30/Oct/2023 10:15:50] "GET /ask/What%20is%20the%20overall%20order%20fulfillment%20status%20breakdown%20in%20terms%20of%20percentages HTTP/1.1" 200 -
2023-10-30 10:16:04,553 - INFO - Question: Create a table summarizing the average order amount for each category.
2023-10-30 10:16:04,554 - INFO - Running PandasAI with openai LLM...
2023-10-30 10:16:04,554 - INFO - Prompt ID: a222e247-fffa-488f-b72b-6edd1d997e6f
2023-10-30 10:16:04,591 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
4,1573959701,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
2,4369400850,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
3,6547191092,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
0,3997621159,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
1,5589722922,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
</dataframe>

<conversation>
User 1: Create a table summarizing the average order amount for each category.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 10:16:11,640 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0]
    
    # Process
    avg_order_amount = df.groupby('Category')['Amount'].mean().reset_index()
    
    # Analyze
    result = {
        "type": "dataframe",
        "value": avg_order_amount
    }
    
    return result
```

2023-10-30 10:16:11,642 - INFO - Saving charts to plots/a222e247-fffa-488f-b72b-6edd1d997e6f.png
2023-10-30 10:16:11,645 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/a222e247-fffa-488f-b72b-6edd1d997e6f.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/a222e247-fffa-488f-b72b-6edd1d997e6f.png" }
    """
    df = dfs[0]
    avg_order_amount = df.groupby('Category')['Amount'].mean().reset_index()
    result = {'type': 'dataframe', 'value': avg_order_amount}
    return result
        ```
2023-10-30 10:16:11,678 - INFO - Answer: {'type': 'dataframe', 'value':         Category      Amount
0         Blouse  520.327106
1         Bottom  358.733286
2        Dupatta  305.000000
3   Ethnic Dress  723.895389
4          Saree  799.572645
5            Set  833.385571
6            Top  526.098603
7  Western Dress  762.790580
8          kurta  455.927108}
2023-10-30 10:16:11,679 - INFO - Executed in: 7.12627100944519s
2023-10-30 10:16:11,680 - INFO - 127.0.0.1 - - [30/Oct/2023 10:16:11] "GET /ask/Create%20a%20table%20summarizing%20the%20average%20order%20amount%20for%20each%20category. HTTP/1.1" 200 -
2023-10-30 10:17:23,956 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 10:17:23,957 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 10:17:30,077 - INFO - Question: Create a table summarizing the average order amount for each category.
2023-10-30 10:17:30,124 - INFO - Running PandasAI with openai LLM...
2023-10-30 10:17:30,124 - INFO - Prompt ID: 48c1e69f-a75b-46b8-8be0-175228342d97
2023-10-30 10:17:30,174 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
3,8661281195,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
2,6201195298,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
1,5938568251,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
0,7988652654,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
4,5598942902,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
</dataframe>

<conversation>
User 1: Create a table summarizing the average order amount for each category.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 10:17:38,097 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0]
    
    # Process
    avg_order_amount = df.groupby('Category')['Amount'].mean().reset_index()
    
    # Analyze
    result = {
        "type": "dataframe",
        "value": avg_order_amount
    }
    
    return result
```

2023-10-30 10:17:38,099 - INFO - Saving charts to plots/48c1e69f-a75b-46b8-8be0-175228342d97.png
2023-10-30 10:17:38,102 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/48c1e69f-a75b-46b8-8be0-175228342d97.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/48c1e69f-a75b-46b8-8be0-175228342d97.png" }
    """
    df = dfs[0]
    avg_order_amount = df.groupby('Category')['Amount'].mean().reset_index()
    result = {'type': 'dataframe', 'value': avg_order_amount}
    return result
        ```
2023-10-30 10:17:38,148 - INFO - Answer: {'type': 'dataframe', 'value':         Category      Amount
0         Blouse  520.327106
1         Bottom  358.733286
2        Dupatta  305.000000
3   Ethnic Dress  723.895389
4          Saree  799.572645
5            Set  833.385571
6            Top  526.098603
7  Western Dress  762.790580
8          kurta  455.927108}
2023-10-30 10:17:38,149 - INFO - Executed in: 8.072279214859009s
2023-10-30 10:17:38,150 - INFO - 127.0.0.1 - - [30/Oct/2023 10:17:38] "GET /ask/Create%20a%20table%20summarizing%20the%20average%20order%20amount%20for%20each%20category. HTTP/1.1" 200 -
2023-10-30 10:20:19,990 - INFO - Question: What is the overall order fulfillment status breakdown in terms of percentages
2023-10-30 10:20:19,991 - INFO - Running PandasAI with openai LLM...
2023-10-30 10:20:19,992 - INFO - Prompt ID: cf796c4f-41ad-4d73-a0ba-cf42b75077db
2023-10-30 10:20:20,027 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
3,8661281195,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
2,6201195298,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
1,5938568251,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
0,7988652654,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
4,5598942902,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
</dataframe>

<conversation>
User 1: What is the overall order fulfillment status breakdown in terms of percentages
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 10:20:28,654 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0]
    
    # Process
    order_status_counts = df['Status'].value_counts()
    total_orders = len(df)
    order_status_percentages = order_status_counts / total_orders * 100
    
    # Analyze
    result = {
        "type": "dataframe",
        "value": order_status_percentages
    }
    
    return result
```

2023-10-30 10:20:28,656 - INFO - Saving charts to plots/cf796c4f-41ad-4d73-a0ba-cf42b75077db.png
2023-10-30 10:20:28,659 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/cf796c4f-41ad-4d73-a0ba-cf42b75077db.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/cf796c4f-41ad-4d73-a0ba-cf42b75077db.png" }
    """
    df = dfs[0]
    order_status_counts = df['Status'].value_counts()
    total_orders = len(df)
    order_status_percentages = order_status_counts / total_orders * 100
    result = {'type': 'dataframe', 'value': order_status_percentages}
    return result
        ```
2023-10-30 10:20:28,688 - INFO - Answer: {'type': 'dataframe', 'value': Shipped                          60.324869
Shipped - Delivered to Buyer     22.305873
Cancelled                        14.213607
Shipped - Returned to Seller      1.514247
Shipped - Picked Up               0.754410
Pending                           0.510176
Pending - Waiting for Pick Up     0.217872
Shipped - Returning to Seller     0.112425
Shipped - Out for Delivery        0.027137
Shipped - Rejected by Buyer       0.008529
Shipping                          0.006203
Shipped - Lost in Transit         0.003877
Shipped - Damaged                 0.000775
Name: Status, dtype: float64}
2023-10-30 10:20:28,689 - INFO - Executed in: 8.698443412780762s
2023-10-30 10:20:28,689 - ERROR - Error: Series.to_dict() got an unexpected keyword argument 'orient'
2023-10-30 10:20:28,689 - INFO - 127.0.0.1 - - [30/Oct/2023 10:20:28] "[35m[1mGET /ask/What%20is%20the%20overall%20order%20fulfillment%20status%20breakdown%20in%20terms%20of%20percentages HTTP/1.1[0m" 500 -
2023-10-30 10:22:31,404 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 10:22:31,404 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 10:22:41,820 - INFO - Question: What is the overall order fulfillment status breakdown in terms of percentages
2023-10-30 10:22:41,860 - INFO - Running PandasAI with openai LLM...
2023-10-30 10:22:41,860 - INFO - Prompt ID: b645e0e4-6744-4c6d-8262-d9f62d2eb9cf
2023-10-30 10:22:41,912 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
0,0588611005,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
4,1079826093,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
1,0874639643,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
3,5894099455,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
2,4701002547,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
</dataframe>

<conversation>
User 1: What is the overall order fulfillment status breakdown in terms of percentages
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 10:22:49,979 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0]
    
    # Process
    order_status_counts = df['Status'].value_counts()
    total_orders = len(df)
    order_status_percentages = order_status_counts / total_orders * 100
    
    # Analyze
    result = {
        "type": "dataframe",
        "value": order_status_percentages
    }
    
    return result
```

2023-10-30 10:22:49,981 - INFO - Saving charts to plots/b645e0e4-6744-4c6d-8262-d9f62d2eb9cf.png
2023-10-30 10:22:49,984 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/b645e0e4-6744-4c6d-8262-d9f62d2eb9cf.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/b645e0e4-6744-4c6d-8262-d9f62d2eb9cf.png" }
    """
    df = dfs[0]
    order_status_counts = df['Status'].value_counts()
    total_orders = len(df)
    order_status_percentages = order_status_counts / total_orders * 100
    result = {'type': 'dataframe', 'value': order_status_percentages}
    return result
        ```
2023-10-30 10:22:50,024 - INFO - Answer: {'type': 'dataframe', 'value': Shipped                          60.324869
Shipped - Delivered to Buyer     22.305873
Cancelled                        14.213607
Shipped - Returned to Seller      1.514247
Shipped - Picked Up               0.754410
Pending                           0.510176
Pending - Waiting for Pick Up     0.217872
Shipped - Returning to Seller     0.112425
Shipped - Out for Delivery        0.027137
Shipped - Rejected by Buyer       0.008529
Shipping                          0.006203
Shipped - Lost in Transit         0.003877
Shipped - Damaged                 0.000775
Name: Status, dtype: float64}
2023-10-30 10:22:50,024 - INFO - Executed in: 8.204320430755615s
2023-10-30 10:22:50,025 - INFO - 127.0.0.1 - - [30/Oct/2023 10:22:50] "GET /ask/What%20is%20the%20overall%20order%20fulfillment%20status%20breakdown%20in%20terms%20of%20percentages HTTP/1.1" 200 -
2023-10-30 10:23:16,228 - INFO - Question: What is the overall order fulfillment status breakdown in terms of percentages show in table
2023-10-30 10:23:16,228 - INFO - Running PandasAI with openai LLM...
2023-10-30 10:23:16,229 - INFO - Prompt ID: 16a0b586-280d-41e5-9c85-add14cfd7cea
2023-10-30 10:23:16,268 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
0,0588611005,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
4,1079826093,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
1,0874639643,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
3,5894099455,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
2,4701002547,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
</dataframe>

<conversation>
User 1: What is the overall order fulfillment status breakdown in terms of percentages show in table
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 10:23:25,608 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0]
    
    # Process
    order_status_counts = df['Status'].value_counts()
    total_orders = len(df)
    order_status_percentages = order_status_counts / total_orders * 100
    
    # Analyze
    order_status_breakdown = pd.DataFrame({
        'Order Status': order_status_counts.index,
        'Count': order_status_counts.values,
        'Percentage': order_status_percentages.values
    })
    
    return {
        "type": "dataframe",
        "value": order_status_breakdown
    }
```

2023-10-30 10:23:25,610 - INFO - Saving charts to plots/16a0b586-280d-41e5-9c85-add14cfd7cea.png
2023-10-30 10:23:25,613 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/16a0b586-280d-41e5-9c85-add14cfd7cea.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/16a0b586-280d-41e5-9c85-add14cfd7cea.png" }
    """
    df = dfs[0]
    order_status_counts = df['Status'].value_counts()
    total_orders = len(df)
    order_status_percentages = order_status_counts / total_orders * 100
    order_status_breakdown = pd.DataFrame({'Order Status': order_status_counts.index, 'Count': order_status_counts.values, 'Percentage': order_status_percentages.values})
    return {'type': 'dataframe', 'value': order_status_breakdown}
        ```
2023-10-30 10:23:25,636 - INFO - Answer: {'type': 'dataframe', 'value':                      Order Status  Count  Percentage
0                         Shipped  77804   60.324869
1    Shipped - Delivered to Buyer  28769   22.305873
2                       Cancelled  18332   14.213607
3    Shipped - Returned to Seller   1953    1.514247
4             Shipped - Picked Up    973    0.754410
5                         Pending    658    0.510176
6   Pending - Waiting for Pick Up    281    0.217872
7   Shipped - Returning to Seller    145    0.112425
8      Shipped - Out for Delivery     35    0.027137
9     Shipped - Rejected by Buyer     11    0.008529
10                       Shipping      8    0.006203
11      Shipped - Lost in Transit      5    0.003877
12              Shipped - Damaged      1    0.000775}
2023-10-30 10:23:25,637 - INFO - Executed in: 9.409032106399536s
2023-10-30 10:23:25,637 - INFO - 127.0.0.1 - - [30/Oct/2023 10:23:25] "GET /ask/What%20is%20the%20overall%20order%20fulfillment%20status%20breakdown%20in%20terms%20of%20percentages%20show%20in%20table HTTP/1.1" 200 -
2023-10-30 10:23:53,960 - INFO - Question: Provide a summary of the 'Amount' column, including its mean, median, and standard deviation.
2023-10-30 10:23:53,961 - INFO - Running PandasAI with openai LLM...
2023-10-30 10:23:53,962 - INFO - Prompt ID: 098f70ec-7bab-4448-a3b5-d3edfa436d3f
2023-10-30 10:23:53,995 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
0,0588611005,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
4,1079826093,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
1,0874639643,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
3,5894099455,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
2,4701002547,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
</dataframe>

<conversation>
User 1: Provide a summary of the 'Amount' column, including its mean, median, and standard deviation.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 10:24:02,780 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd
import numpy as np

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0]
    
    # Process
    amount_summary = df['Amount'].describe()
    mean = amount_summary['mean']
    median = amount_summary['50%']
    std_dev = amount_summary['std']
    
    # Analyze
    summary = f"The mean of the 'Amount' column is {mean:.2f}, the median is {median:.2f}, and the standard deviation is {std_dev:.2f}."
    
    return {"type": "string", "value": summary}
```

2023-10-30 10:24:02,782 - INFO - Saving charts to plots/098f70ec-7bab-4448-a3b5-d3edfa436d3f.png
2023-10-30 10:24:02,785 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/098f70ec-7bab-4448-a3b5-d3edfa436d3f.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/098f70ec-7bab-4448-a3b5-d3edfa436d3f.png" }
    """
    df = dfs[0]
    amount_summary = df['Amount'].describe()
    mean = amount_summary['mean']
    median = amount_summary['50%']
    std_dev = amount_summary['std']
    summary = f"The mean of the 'Amount' column is {mean:.2f}, the median is {median:.2f}, and the standard deviation is {std_dev:.2f}."
    return {'type': 'string', 'value': summary}
        ```
2023-10-30 10:24:02,815 - INFO - Answer: {'type': 'string', 'value': "The mean of the 'Amount' column is 648.56, the median is 605.00, and the standard deviation is 281.21."}
2023-10-30 10:24:02,816 - INFO - Executed in: 8.855530977249146s
2023-10-30 10:24:02,816 - INFO - 127.0.0.1 - - [30/Oct/2023 10:24:02] "GET /ask/Provide%20a%20summary%20of%20the%20'Amount'%20column,%20including%20its%20mean,%20median,%20and%20standard%20deviation. HTTP/1.1" 200 -
2023-10-30 10:24:20,779 - INFO - Question: Visualize the growth of the social network over time, showing the number of new users joining each month. Are there any significant spikes in user growth
2023-10-30 10:24:20,780 - INFO - Running PandasAI with openai LLM...
2023-10-30 10:24:20,781 - INFO - Prompt ID: d5bfc77c-c19e-4852-afc3-32340a73b592
2023-10-30 10:24:20,813 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
0,0588611005,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
4,1079826093,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
1,0874639643,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
3,5894099455,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
2,4701002547,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
</dataframe>

<conversation>
User 1: Visualize the growth of the social network over time, showing the number of new users joining each month. Are there any significant spikes in user growth
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 10:24:31,965 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd
import matplotlib.pyplot as plt

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare: Preprocessing and cleaning data if necessary
    df = dfs[0]
    df['Date'] = pd.to_datetime(df['Date'], format='%m-%d-%y')
    
    # Process: Manipulating data for analysis
    df['YearMonth'] = df['Date'].dt.to_period('M')
    new_users_per_month = df.groupby('YearMonth')['Order ID'].nunique()
    
    # Analyze: Conducting the actual analysis
    plt.figure(figsize=(10, 6))
    plt.plot(new_users_per_month.index, new_users_per_month.values, marker='o')
    plt.xlabel('Year-Month')
    plt.ylabel('Number of New Users')
    plt.title('Growth of Social Network: Number of New Users Joining Each Month')
    plt.xticks(rotation=45)
    plt.grid(True)
    plt.savefig('temp_chart.png')
    plt.close()
    
    return { "type": "plot", "value": "temp_chart.png" }
```

2023-10-30 10:24:31,967 - INFO - Saving charts to plots/d5bfc77c-c19e-4852-afc3-32340a73b592.png
2023-10-30 10:24:31,973 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/d5bfc77c-c19e-4852-afc3-32340a73b592.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/d5bfc77c-c19e-4852-afc3-32340a73b592.png" }
    """
    df = dfs[0]
    df['Date'] = pd.to_datetime(df['Date'], format='%m-%d-%y')
    df['YearMonth'] = df['Date'].dt.to_period('M')
    new_users_per_month = df.groupby('YearMonth')['Order ID'].nunique()
    plt.figure(figsize=(10, 6))
    plt.plot(new_users_per_month.index, new_users_per_month.values, marker='o')
    plt.xlabel('Year-Month')
    plt.ylabel('Number of New Users')
    plt.title('Growth of Social Network: Number of New Users Joining Each Month')
    plt.xticks(rotation=45)
    plt.grid(True)
    plt.savefig('plots/d5bfc77c-c19e-4852-afc3-32340a73b592.png')
    plt.close()
    return {'type': 'plot', 'value': 'plots/d5bfc77c-c19e-4852-afc3-32340a73b592.png'}
        ```
2023-10-30 10:24:31,991 - WARNING - Error of executing code
2023-10-30 10:24:32,069 - WARNING - Failed to execute code with a correction framework [retry number: 1]
2023-10-30 10:24:32,069 - ERROR - Failed with error: Traceback (most recent call last):
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/pandasai/smart_datalake/__init__.py", line 337, in chat
    result = self._code_manager.execute_code(
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/pandasai/helpers/code_manager.py", line 244, in execute_code
    return analyze_data(self._get_originals(dfs))
  File "<string>", line 24, in analyze_data
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/matplotlib/pyplot.py", line 3578, in plot
    return gca().plot(
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/matplotlib/axes/_axes.py", line 1723, in plot
    self.add_line(line)
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/matplotlib/axes/_base.py", line 2309, in add_line
    self._update_line_limits(line)
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/matplotlib/axes/_base.py", line 2332, in _update_line_limits
    path = line.get_path()
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/matplotlib/lines.py", line 1032, in get_path
    self.recache()
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/matplotlib/lines.py", line 669, in recache
    x = _to_unmasked_float_array(xconv).ravel()
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/matplotlib/cbook.py", line 1345, in _to_unmasked_float_array
    return np.asarray(x, float)
TypeError: float() argument must be a string or a real number, not 'Period'
. Retrying
2023-10-30 10:24:32,103 - INFO - Using prompt: 
You are provided with the following pandas DataFrames with the following metadata:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
0,0588611005,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
4,1079826093,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
1,0874639643,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
3,5894099455,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
2,4701002547,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
</dataframe>

The user asked the following question:
User 1: Visualize the growth of the social network over time, showing the number of new users joining each month. Are there any significant spikes in user growth

You generated this python code:
# TODO import all the dependencies required
import pandas as pd
import matplotlib.pyplot as plt

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare: Preprocessing and cleaning data if necessary
    df = dfs[0]
    df['Date'] = pd.to_datetime(df['Date'], format='%m-%d-%y')
    
    # Process: Manipulating data for analysis
    df['YearMonth'] = df['Date'].dt.to_period('M')
    new_users_per_month = df.groupby('YearMonth')['Order ID'].nunique()
    
    # Analyze: Conducting the actual analysis
    plt.figure(figsize=(10, 6))
    plt.plot(new_users_per_month.index, new_users_per_month.values, marker='o')
    plt.xlabel('Year-Month')
    plt.ylabel('Number of New Users')
    plt.title('Growth of Social Network: Number of New Users Joining Each Month')
    plt.xticks(rotation=45)
    plt.grid(True)
    plt.savefig('temp_chart.png')
    plt.close()
    
    return { "type": "plot", "value": "temp_chart.png" }

It fails with the following error:
Traceback (most recent call last):
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/pandasai/smart_datalake/__init__.py", line 337, in chat
    result = self._code_manager.execute_code(
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/pandasai/helpers/code_manager.py", line 244, in execute_code
    return analyze_data(self._get_originals(dfs))
  File "<string>", line 24, in analyze_data
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/matplotlib/pyplot.py", line 3578, in plot
    return gca().plot(
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/matplotlib/axes/_axes.py", line 1723, in plot
    self.add_line(line)
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/matplotlib/axes/_base.py", line 2309, in add_line
    self._update_line_limits(line)
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/matplotlib/axes/_base.py", line 2332, in _update_line_limits
    path = line.get_path()
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/matplotlib/lines.py", line 1032, in get_path
    self.recache()
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/matplotlib/lines.py", line 669, in recache
    x = _to_unmasked_float_array(xconv).ravel()
  File "/home/mohammadsafi/.local/lib/python3.10/site-packages/matplotlib/cbook.py", line 1345, in _to_unmasked_float_array
    return np.asarray(x, float)
TypeError: float() argument must be a string or a real number, not 'Period'


Correct the python code and return a new python code that fixes the above mentioned error. Do not generate the same code again.

2023-10-30 10:24:43,331 - INFO - Saving charts to plots/d5bfc77c-c19e-4852-afc3-32340a73b592.png
2023-10-30 10:24:43,335 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/d5bfc77c-c19e-4852-afc3-32340a73b592.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/d5bfc77c-c19e-4852-afc3-32340a73b592.png" }
    """
    df = dfs[0]
    df['Date'] = pd.to_datetime(df['Date'], format='%m-%d-%y')
    df['YearMonth'] = df['Date'].dt.to_period('M')
    new_users_per_month = df.groupby('YearMonth')['Order ID'].nunique()
    plt.figure(figsize=(10, 6))
    plt.plot(new_users_per_month.index.astype(str), new_users_per_month.values, marker='o')
    plt.xlabel('Year-Month')
    plt.ylabel('Number of New Users')
    plt.title('Growth of Social Network: Number of New Users Joining Each Month')
    plt.xticks(rotation=45)
    plt.grid(True)
    plt.savefig('plots/d5bfc77c-c19e-4852-afc3-32340a73b592.png')
    plt.close()
    return {'type': 'plot', 'value': 'plots/d5bfc77c-c19e-4852-afc3-32340a73b592.png'}
        ```
2023-10-30 10:24:43,343 - INFO - Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-10-30 10:24:43,344 - INFO - Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-10-30 10:24:43,458 - INFO - Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-10-30 10:24:43,459 - INFO - Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-10-30 10:24:43,522 - INFO - Answer: {'type': 'plot', 'value': 'plots/d5bfc77c-c19e-4852-afc3-32340a73b592.png'}
2023-10-30 10:24:43,527 - INFO - Executed in: 22.747575521469116s
2023-10-30 10:24:43,539 - INFO - 127.0.0.1 - - [30/Oct/2023 10:24:43] "GET /ask/Visualize%20the%20growth%20of%20the%20social%20network%20over%20time,%20showing%20the%20number%20of%20new%20users%20joining%20each%20month.%20Are%20there%20any%20significant%20spikes%20in%20user%20growth HTTP/1.1" 200 -
2023-10-30 10:46:21,271 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 10:46:21,271 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 10:46:23,223 - INFO - 127.0.0.1 - - [30/Oct/2023 10:46:23] "[33mGET / HTTP/1.1[0m" 404 -
2023-10-30 10:46:31,951 - INFO - Question: Create a table summarizing the average order amount for each category.
2023-10-30 10:46:31,995 - INFO - Running PandasAI with openai LLM...
2023-10-30 10:46:31,995 - INFO - Prompt ID: ae5db6e3-ed1a-4ac5-a93d-3a2570f9d18a
2023-10-30 10:46:32,047 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
1,4750686122,04-30-22,Shipped - Delivered to...,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,9891298384,False,Easy Ship,
3,9890177131,04-30-22,Cancelled...,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,5627241183,False,Easy Ship,
0,3409338316,04-30-22,Cancelled...,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,1097667004,False,Easy Ship,
4,9927118327,04-30-22,Shipped...,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,5830233358,False,,
2,3603265789,04-30-22,Shipped...,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,5638512107,True,,
</dataframe>

<conversation>
User 1: Create a table summarizing the average order amount for each category.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 10:46:39,710 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare: Preprocessing and cleaning data if necessary
    df = dfs[0]
    
    # Process: Manipulating data for analysis
    avg_order_amount = df.groupby('Category')['Amount'].mean().reset_index()
    
    # Analyze: Conducting the actual analysis
    table = avg_order_amount.to_string(index=False)
    
    return {"type": "string", "value": table}
```

2023-10-30 10:46:39,711 - INFO - Saving charts to plots/ae5db6e3-ed1a-4ac5-a93d-3a2570f9d18a.png
2023-10-30 10:46:39,713 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/ae5db6e3-ed1a-4ac5-a93d-3a2570f9d18a.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/ae5db6e3-ed1a-4ac5-a93d-3a2570f9d18a.png" }
    """
    df = dfs[0]
    avg_order_amount = df.groupby('Category')['Amount'].mean().reset_index()
    table = avg_order_amount.to_string(index=False)
    return {'type': 'string', 'value': table}
        ```
2023-10-30 10:46:39,755 - INFO - Answer: {'type': 'string', 'value': '     Category     Amount\n       Blouse 520.327106\n       Bottom 358.733286\n      Dupatta 305.000000\n Ethnic Dress 723.895389\n        Saree 799.572645\n          Set 833.385571\n          Top 526.098603\nWestern Dress 762.790580\n        kurta 455.927108'}
2023-10-30 10:46:39,755 - INFO - Executed in: 7.8040149211883545s
2023-10-30 10:46:39,756 - INFO - 127.0.0.1 - - [30/Oct/2023 10:46:39] "GET /ask/Create%20a%20table%20summarizing%20the%20average%20order%20amount%20for%20each%20category. HTTP/1.1" 200 -
2023-10-30 15:29:02,821 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 15:29:02,821 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 15:29:06,017 - INFO - 127.0.0.1 - - [30/Oct/2023 15:29:06] "[33mGET / HTTP/1.1[0m" 404 -
2023-10-30 15:29:06,247 - INFO - 127.0.0.1 - - [30/Oct/2023 15:29:06] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
2023-10-30 15:29:47,141 - INFO - Question: Show a table listing all orders with a 'Status' of 'Pending'.
2023-10-30 15:29:47,188 - INFO - Running PandasAI with openai LLM...
2023-10-30 15:29:47,189 - INFO - Prompt ID: 1b32da24-658e-4b79-93f7-5401b13411c4
2023-10-30 15:29:47,245 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
0,8869056895,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
3,6667487830,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
1,1333647620,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
4,3712372056,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
2,7053325765,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
</dataframe>

<conversation>
User 1: Show a table listing all orders with a 'Status' of 'Pending'.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 15:29:56,622 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare: Preprocessing and cleaning data if necessary
    df = dfs[0]
    
    # Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    pending_orders = df[df['Status'] == 'Pending']
    
    # Analyze: Conducting the actual analysis
    result = {
        "type": "dataframe",
        "value": pending_orders
    }
    
    return result
```

2023-10-30 15:29:56,623 - INFO - Saving charts to plots/1b32da24-658e-4b79-93f7-5401b13411c4.png
2023-10-30 15:29:56,624 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/1b32da24-658e-4b79-93f7-5401b13411c4.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/1b32da24-658e-4b79-93f7-5401b13411c4.png" }
    """
    df = dfs[0]
    pending_orders = df[df['Status'] == 'Pending']
    result = {'type': 'dataframe', 'value': pending_orders}
    return result
        ```
2023-10-30 15:29:56,675 - INFO - Answer: {'type': 'dataframe', 'value':          index             Order ID      Date   Status Fulfilment  ... ship-country                                 promotion-ids    B2B fulfilled-by Unnamed: 22
44043    44043  405-0700572-9554710  04-04-22  Pending     Amazon  ...           IN                                           NaN  False          NaN         NaN
56068    56068  402-6584761-5651552  05-26-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58985    58985  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58986    58986  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58987    58987  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
...        ...                  ...       ...      ...        ...  ...          ...                                           ...    ...          ...         ...
104125  104125  408-5037495-2261103  06-18-22  Pending   Merchant  ...           IN                                           NaN  False    Easy Ship       False
104369  104369  407-2011116-9461143  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
104534  104534  403-2722181-3437921  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
105179  105179  404-2763455-4282753  06-17-22  Pending     Amazon  ...           IN                                           NaN  False          NaN       False
123903  123903  406-7258755-6702715  06-04-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False

[658 rows x 24 columns]}
2023-10-30 15:29:56,675 - INFO - Executed in: 9.534132480621338s
2023-10-30 15:29:56,689 - INFO - 127.0.0.1 - - [30/Oct/2023 15:29:56] "GET /ask/Show%20a%20table%20listing%20all%20orders%20with%20a%20'Status'%20of%20'Pending'. HTTP/1.1" 200 -
2023-10-30 15:36:47,916 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 15:36:47,916 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 15:36:52,660 - INFO - Question: Show a table listing all orders with a 'Status' of 'Pending'.
2023-10-30 15:36:52,711 - INFO - Running PandasAI with openai LLM...
2023-10-30 15:36:52,711 - INFO - Prompt ID: 16ecf52f-339f-4252-a62d-bcaedcd16183
2023-10-30 15:36:52,766 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
4,3432377970,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
0,7179584975,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
2,8479357924,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
3,3928887021,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
1,9253711104,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
</dataframe>

<conversation>
User 1: Show a table listing all orders with a 'Status' of 'Pending'.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 15:37:01,135 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0].copy()
    
    # Process
    pending_orders = df[df['Status'] == 'Pending']
    
    # Analyze
    result = {
        "type": "dataframe",
        "value": pending_orders
    }
    
    return result
```

2023-10-30 15:37:01,137 - INFO - Saving charts to plots/16ecf52f-339f-4252-a62d-bcaedcd16183.png
2023-10-30 15:37:01,141 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/16ecf52f-339f-4252-a62d-bcaedcd16183.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/16ecf52f-339f-4252-a62d-bcaedcd16183.png" }
    """
    df = dfs[0].copy()
    pending_orders = df[df['Status'] == 'Pending']
    result = {'type': 'dataframe', 'value': pending_orders}
    return result
        ```
2023-10-30 15:37:01,223 - INFO - Answer: {'type': 'dataframe', 'value':          index             Order ID      Date   Status Fulfilment  ... ship-country                                 promotion-ids    B2B fulfilled-by Unnamed: 22
44043    44043  405-0700572-9554710  04-04-22  Pending     Amazon  ...           IN                                           NaN  False          NaN         NaN
56068    56068  402-6584761-5651552  05-26-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58985    58985  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58986    58986  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58987    58987  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
...        ...                  ...       ...      ...        ...  ...          ...                                           ...    ...          ...         ...
104125  104125  408-5037495-2261103  06-18-22  Pending   Merchant  ...           IN                                           NaN  False    Easy Ship       False
104369  104369  407-2011116-9461143  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
104534  104534  403-2722181-3437921  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
105179  105179  404-2763455-4282753  06-17-22  Pending     Amazon  ...           IN                                           NaN  False          NaN       False
123903  123903  406-7258755-6702715  06-04-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False

[658 rows x 24 columns]}
2023-10-30 15:37:01,223 - INFO - Executed in: 8.563016414642334s
2023-10-30 15:37:01,238 - INFO - 127.0.0.1 - - [30/Oct/2023 15:37:01] "GET /ask/Show%20a%20table%20listing%20all%20orders%20with%20a%20'Status'%20of%20'Pending'. HTTP/1.1" 200 -
2023-10-30 15:40:44,750 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 15:40:44,750 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 15:40:49,173 - INFO - Question: Show a table listing all orders with a 'Status' of 'Pending'.
2023-10-30 15:40:49,225 - INFO - Running PandasAI with openai LLM...
2023-10-30 15:40:49,225 - INFO - Prompt ID: ba60ac58-9bca-4f4a-af0d-41ba40e44db7
2023-10-30 15:40:49,284 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
3,8639212418,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
4,8273268277,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
0,6577533081,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
2,2681055176,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
1,9863654602,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
</dataframe>

<conversation>
User 1: Show a table listing all orders with a 'Status' of 'Pending'.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 15:40:57,709 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare: Preprocessing and cleaning data if necessary
    df = dfs[0]
    
    # Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    pending_orders = df[df['Status'] == 'Pending']
    
    # Analyze: Conducting the actual analysis
    result = {
        "type": "dataframe",
        "value": pending_orders
    }
    
    return result
```

2023-10-30 15:40:57,711 - INFO - Saving charts to plots/ba60ac58-9bca-4f4a-af0d-41ba40e44db7.png
2023-10-30 15:40:57,712 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/ba60ac58-9bca-4f4a-af0d-41ba40e44db7.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/ba60ac58-9bca-4f4a-af0d-41ba40e44db7.png" }
    """
    df = dfs[0]
    pending_orders = df[df['Status'] == 'Pending']
    result = {'type': 'dataframe', 'value': pending_orders}
    return result
        ```
2023-10-30 15:40:57,764 - INFO - Answer: {'type': 'dataframe', 'value':          index             Order ID      Date   Status Fulfilment  ... ship-country                                 promotion-ids    B2B fulfilled-by Unnamed: 22
44043    44043  405-0700572-9554710  04-04-22  Pending     Amazon  ...           IN                                           NaN  False          NaN         NaN
56068    56068  402-6584761-5651552  05-26-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58985    58985  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58986    58986  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58987    58987  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
...        ...                  ...       ...      ...        ...  ...          ...                                           ...    ...          ...         ...
104125  104125  408-5037495-2261103  06-18-22  Pending   Merchant  ...           IN                                           NaN  False    Easy Ship       False
104369  104369  407-2011116-9461143  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
104534  104534  403-2722181-3437921  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
105179  105179  404-2763455-4282753  06-17-22  Pending     Amazon  ...           IN                                           NaN  False          NaN       False
123903  123903  406-7258755-6702715  06-04-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False

[658 rows x 24 columns]}
2023-10-30 15:40:57,764 - INFO - Executed in: 8.591302394866943s
2023-10-30 15:40:57,780 - INFO - 127.0.0.1 - - [30/Oct/2023 15:40:57] "GET /ask/Show%20a%20table%20listing%20all%20orders%20with%20a%20'Status'%20of%20'Pending'. HTTP/1.1" 200 -
2023-10-30 15:41:31,701 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 15:41:31,701 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 15:41:36,751 - INFO - Question: Show a table listing all orders with a 'Status' of 'Pending'.
2023-10-30 15:41:36,809 - INFO - Running PandasAI with openai LLM...
2023-10-30 15:41:36,809 - INFO - Prompt ID: f266da94-217c-40dd-b3aa-8be33dabcbc5
2023-10-30 15:41:36,865 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
0,1712033668,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
2,6373714724,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
4,7577328962,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
3,3740569742,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
1,0678882188,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
</dataframe>

<conversation>
User 1: Show a table listing all orders with a 'Status' of 'Pending'.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 15:41:44,402 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0].copy()
    
    # Process
    pending_orders = df[df['Status'] == 'Pending']
    
    # Analyze
    result = {
        "type": "dataframe",
        "value": pending_orders
    }
    
    return result
```

2023-10-30 15:41:44,404 - INFO - Saving charts to plots/f266da94-217c-40dd-b3aa-8be33dabcbc5.png
2023-10-30 15:41:44,407 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/f266da94-217c-40dd-b3aa-8be33dabcbc5.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/f266da94-217c-40dd-b3aa-8be33dabcbc5.png" }
    """
    df = dfs[0].copy()
    pending_orders = df[df['Status'] == 'Pending']
    result = {'type': 'dataframe', 'value': pending_orders}
    return result
        ```
2023-10-30 15:41:44,484 - INFO - Answer: {'type': 'dataframe', 'value':          index             Order ID      Date   Status Fulfilment  ... ship-country                                 promotion-ids    B2B fulfilled-by Unnamed: 22
44043    44043  405-0700572-9554710  04-04-22  Pending     Amazon  ...           IN                                           NaN  False          NaN         NaN
56068    56068  402-6584761-5651552  05-26-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58985    58985  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58986    58986  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58987    58987  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
...        ...                  ...       ...      ...        ...  ...          ...                                           ...    ...          ...         ...
104125  104125  408-5037495-2261103  06-18-22  Pending   Merchant  ...           IN                                           NaN  False    Easy Ship       False
104369  104369  407-2011116-9461143  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
104534  104534  403-2722181-3437921  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
105179  105179  404-2763455-4282753  06-17-22  Pending     Amazon  ...           IN                                           NaN  False          NaN       False
123903  123903  406-7258755-6702715  06-04-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False

[658 rows x 24 columns]}
2023-10-30 15:41:44,485 - INFO - Executed in: 7.734349489212036s
2023-10-30 15:41:44,485 - ERROR - Error: isinstance expected 2 arguments, got 4
2023-10-30 15:41:44,486 - INFO - 127.0.0.1 - - [30/Oct/2023 15:41:44] "[35m[1mGET /ask/Show%20a%20table%20listing%20all%20orders%20with%20a%20'Status'%20of%20'Pending'. HTTP/1.1[0m" 500 -
2023-10-30 15:42:11,614 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 15:42:11,614 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 15:42:16,527 - INFO - Question: Show a table listing all orders with a 'Status' of 'Pending'.
2023-10-30 15:42:16,587 - INFO - Running PandasAI with openai LLM...
2023-10-30 15:42:16,587 - INFO - Prompt ID: 49707121-b36a-463c-9eaf-a1d099204fa7
2023-10-30 15:42:16,655 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
0,6078738336,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
4,7503677923,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
3,6740042238,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
2,1906028901,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
1,5787808149,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
</dataframe>

<conversation>
User 1: Show a table listing all orders with a 'Status' of 'Pending'.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 15:42:25,830 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare: Preprocessing and cleaning data if necessary
    df = dfs[0]
    
    # Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    pending_orders = df[df['Status'] == 'Pending']
    
    # Analyze: Conducting the actual analysis
    result = {
        "type": "dataframe",
        "value": pending_orders
    }
    
    return result
```

2023-10-30 15:42:25,833 - INFO - Saving charts to plots/49707121-b36a-463c-9eaf-a1d099204fa7.png
2023-10-30 15:42:25,837 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/49707121-b36a-463c-9eaf-a1d099204fa7.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/49707121-b36a-463c-9eaf-a1d099204fa7.png" }
    """
    df = dfs[0]
    pending_orders = df[df['Status'] == 'Pending']
    result = {'type': 'dataframe', 'value': pending_orders}
    return result
        ```
2023-10-30 15:42:25,898 - INFO - Answer: {'type': 'dataframe', 'value':          index             Order ID      Date   Status Fulfilment  ... ship-country                                 promotion-ids    B2B fulfilled-by Unnamed: 22
44043    44043  405-0700572-9554710  04-04-22  Pending     Amazon  ...           IN                                           NaN  False          NaN         NaN
56068    56068  402-6584761-5651552  05-26-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58985    58985  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58986    58986  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58987    58987  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
...        ...                  ...       ...      ...        ...  ...          ...                                           ...    ...          ...         ...
104125  104125  408-5037495-2261103  06-18-22  Pending   Merchant  ...           IN                                           NaN  False    Easy Ship       False
104369  104369  407-2011116-9461143  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
104534  104534  403-2722181-3437921  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
105179  105179  404-2763455-4282753  06-17-22  Pending     Amazon  ...           IN                                           NaN  False          NaN       False
123903  123903  406-7258755-6702715  06-04-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False

[658 rows x 24 columns]}
2023-10-30 15:42:25,898 - INFO - Executed in: 9.37198519706726s
2023-10-30 15:42:25,899 - ERROR - Error: isinstance() arg 2 must be a type, a tuple of types, or a union
2023-10-30 15:42:25,899 - INFO - 127.0.0.1 - - [30/Oct/2023 15:42:25] "[35m[1mGET /ask/Show%20a%20table%20listing%20all%20orders%20with%20a%20'Status'%20of%20'Pending'. HTTP/1.1[0m" 500 -
2023-10-30 15:45:59,785 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 15:45:59,785 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 15:46:03,657 - INFO - Question: Show a table listing all orders with a 'Status' of 'Pending'.
2023-10-30 15:46:03,705 - INFO - Running PandasAI with openai LLM...
2023-10-30 15:46:03,706 - INFO - Prompt ID: 6c89d42c-ff20-4b66-b7f3-00ec8cd28fde
2023-10-30 15:46:03,768 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
2,7754079295,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping ...,True,,
0,9883066442,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
4,8136961981,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
1,1489373839,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,Amazon PLCC Free-Finan...,False,Easy Ship,
3,5290559232,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
</dataframe>

<conversation>
User 1: Show a table listing all orders with a 'Status' of 'Pending'.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 15:46:12,067 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare: Preprocessing and cleaning data if necessary
    df = dfs[0]
    
    # Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    pending_orders = df[df['Status'] == 'Pending']
    
    # Analyze: Conducting the actual analysis
    result = {
        "type": "dataframe",
        "value": pending_orders
    }
    
    return result
```

2023-10-30 15:46:12,069 - INFO - Saving charts to plots/6c89d42c-ff20-4b66-b7f3-00ec8cd28fde.png
2023-10-30 15:46:12,072 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/6c89d42c-ff20-4b66-b7f3-00ec8cd28fde.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/6c89d42c-ff20-4b66-b7f3-00ec8cd28fde.png" }
    """
    df = dfs[0]
    pending_orders = df[df['Status'] == 'Pending']
    result = {'type': 'dataframe', 'value': pending_orders}
    return result
        ```
2023-10-30 15:46:12,135 - INFO - Answer: {'type': 'dataframe', 'value':          index             Order ID      Date   Status Fulfilment  ... ship-country                                 promotion-ids    B2B fulfilled-by Unnamed: 22
44043    44043  405-0700572-9554710  04-04-22  Pending     Amazon  ...           IN                                           NaN  False          NaN         NaN
56068    56068  402-6584761-5651552  05-26-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58985    58985  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58986    58986  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58987    58987  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
...        ...                  ...       ...      ...        ...  ...          ...                                           ...    ...          ...         ...
104125  104125  408-5037495-2261103  06-18-22  Pending   Merchant  ...           IN                                           NaN  False    Easy Ship       False
104369  104369  407-2011116-9461143  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
104534  104534  403-2722181-3437921  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
105179  105179  404-2763455-4282753  06-17-22  Pending     Amazon  ...           IN                                           NaN  False          NaN       False
123903  123903  406-7258755-6702715  06-04-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False

[658 rows x 24 columns]}
2023-10-30 15:46:12,135 - INFO - Executed in: 8.478576421737671s
2023-10-30 15:46:12,157 - INFO - 127.0.0.1 - - [30/Oct/2023 15:46:12] "GET /ask/Show%20a%20table%20listing%20all%20orders%20with%20a%20'Status'%20of%20'Pending'. HTTP/1.1" 200 -
2023-10-30 15:47:08,513 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 15:47:08,513 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 15:47:16,047 - INFO - Question: Show a table listing all orders with a 'Status' of 'Pending'.
2023-10-30 15:47:16,089 - INFO - Running PandasAI with openai LLM...
2023-10-30 15:47:16,089 - INFO - Prompt ID: 17b3dabc-c9fc-4399-8f5e-595e118a3751
2023-10-30 15:47:16,143 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
2,1706170493,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping ...,True,,
3,3728377571,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
4,6004692681,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
1,4002117465,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,Amazon PLCC Free-Finan...,False,Easy Ship,
0,1186538156,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
</dataframe>

<conversation>
User 1: Show a table listing all orders with a 'Status' of 'Pending'.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 15:47:24,611 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare: Preprocessing and cleaning data if necessary
    df = dfs[0]
    
    # Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    pending_orders = df[df['Status'] == 'Pending']
    
    # Analyze: Conducting the actual analysis
    result = {
        "type": "dataframe",
        "value": pending_orders
    }
    
    return result
```

2023-10-30 15:47:24,613 - INFO - Saving charts to plots/17b3dabc-c9fc-4399-8f5e-595e118a3751.png
2023-10-30 15:47:24,616 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/17b3dabc-c9fc-4399-8f5e-595e118a3751.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/17b3dabc-c9fc-4399-8f5e-595e118a3751.png" }
    """
    df = dfs[0]
    pending_orders = df[df['Status'] == 'Pending']
    result = {'type': 'dataframe', 'value': pending_orders}
    return result
        ```
2023-10-30 15:47:24,675 - INFO - Answer: {'type': 'dataframe', 'value':          index             Order ID      Date   Status Fulfilment  ... ship-country                                 promotion-ids    B2B fulfilled-by Unnamed: 22
44043    44043  405-0700572-9554710  04-04-22  Pending     Amazon  ...           IN                                           NaN  False          NaN         NaN
56068    56068  402-6584761-5651552  05-26-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58985    58985  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58986    58986  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58987    58987  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
...        ...                  ...       ...      ...        ...  ...          ...                                           ...    ...          ...         ...
104125  104125  408-5037495-2261103  06-18-22  Pending   Merchant  ...           IN                                           NaN  False    Easy Ship       False
104369  104369  407-2011116-9461143  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
104534  104534  403-2722181-3437921  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
105179  105179  404-2763455-4282753  06-17-22  Pending     Amazon  ...           IN                                           NaN  False          NaN       False
123903  123903  406-7258755-6702715  06-04-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False

[658 rows x 24 columns]}
2023-10-30 15:47:24,675 - INFO - Executed in: 8.628098249435425s
2023-10-30 15:47:24,692 - INFO - 127.0.0.1 - - [30/Oct/2023 15:47:24] "GET /ask/Show%20a%20table%20listing%20all%20orders%20with%20a%20'Status'%20of%20'Pending'. HTTP/1.1" 200 -
2023-10-30 15:47:38,212 - INFO - Question: Show a table listing all orders with a 'Status' of 'Pending'.
2023-10-30 15:47:38,212 - INFO - Running PandasAI with openai LLM...
2023-10-30 15:47:38,213 - INFO - Prompt ID: a4bc952f-6892-41b9-aea0-6258042ee691
2023-10-30 15:47:38,248 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
2,1706170493,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping ...,True,,
3,3728377571,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
4,6004692681,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
1,4002117465,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,Amazon PLCC Free-Finan...,False,Easy Ship,
0,1186538156,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
</dataframe>

<conversation>
User 1: Show a table listing all orders with a 'Status' of 'Pending'.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 15:47:46,750 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare: Preprocessing and cleaning data if necessary
    df = dfs[0]
    
    # Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    pending_orders = df[df['Status'] == 'Pending']
    
    # Analyze: Conducting the actual analysis
    result = {
        "type": "dataframe",
        "value": pending_orders
    }
    
    return result
```

2023-10-30 15:47:46,753 - INFO - Saving charts to plots/a4bc952f-6892-41b9-aea0-6258042ee691.png
2023-10-30 15:47:46,754 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/a4bc952f-6892-41b9-aea0-6258042ee691.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/a4bc952f-6892-41b9-aea0-6258042ee691.png" }
    """
    df = dfs[0]
    pending_orders = df[df['Status'] == 'Pending']
    result = {'type': 'dataframe', 'value': pending_orders}
    return result
        ```
2023-10-30 15:47:46,788 - INFO - Answer: {'type': 'dataframe', 'value':          index             Order ID      Date   Status Fulfilment  ... ship-country                                 promotion-ids    B2B fulfilled-by Unnamed: 22
44043    44043  405-0700572-9554710  04-04-22  Pending     Amazon  ...           IN                                           NaN  False          NaN         NaN
56068    56068  402-6584761-5651552  05-26-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58985    58985  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58986    58986  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58987    58987  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
...        ...                  ...       ...      ...        ...  ...          ...                                           ...    ...          ...         ...
104125  104125  408-5037495-2261103  06-18-22  Pending   Merchant  ...           IN                                           NaN  False    Easy Ship       False
104369  104369  407-2011116-9461143  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
104534  104534  403-2722181-3437921  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
105179  105179  404-2763455-4282753  06-17-22  Pending     Amazon  ...           IN                                           NaN  False          NaN       False
123903  123903  406-7258755-6702715  06-04-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False

[658 rows x 24 columns]}
2023-10-30 15:47:46,789 - INFO - Executed in: 8.577190637588501s
2023-10-30 15:47:46,805 - INFO - 127.0.0.1 - - [30/Oct/2023 15:47:46] "GET /ask/Show%20a%20table%20listing%20all%20orders%20with%20a%20'Status'%20of%20'Pending'. HTTP/1.1" 200 -
2023-10-30 15:48:02,838 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 15:48:02,838 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 15:48:05,488 - INFO - Question: Show a table listing all orders with a 'Status' of 'Pending'.
2023-10-30 15:48:05,533 - INFO - Running PandasAI with openai LLM...
2023-10-30 15:48:05,533 - INFO - Prompt ID: fd1f47f2-9b1f-4f3f-a5d8-6396e9796588
2023-10-30 15:48:05,597 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
1,2988117636,04-30-22,Shipped - Delivered to...,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,7710362283,False,Easy Ship,
0,8950581749,04-30-22,Cancelled...,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,6173311942,False,Easy Ship,
2,3793282167,04-30-22,Shipped...,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,4100700365,True,,
4,2315453481,04-30-22,Shipped...,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,4775395858,False,,
3,0123203403,04-30-22,Cancelled...,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,8453398599,False,Easy Ship,
</dataframe>

<conversation>
User 1: Show a table listing all orders with a 'Status' of 'Pending'.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 15:48:14,563 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare: Preprocessing and cleaning data if necessary
    df = dfs[0]
    
    # Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    pending_orders = df[df['Status'] == 'Pending']
    
    # Analyze: Conducting the actual analysis
    result = {
        "type": "dataframe",
        "value": pending_orders
    }
    
    return result
```

2023-10-30 15:48:14,565 - INFO - Saving charts to plots/fd1f47f2-9b1f-4f3f-a5d8-6396e9796588.png
2023-10-30 15:48:14,568 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/fd1f47f2-9b1f-4f3f-a5d8-6396e9796588.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/fd1f47f2-9b1f-4f3f-a5d8-6396e9796588.png" }
    """
    df = dfs[0]
    pending_orders = df[df['Status'] == 'Pending']
    result = {'type': 'dataframe', 'value': pending_orders}
    return result
        ```
2023-10-30 15:48:14,620 - INFO - Answer: {'type': 'dataframe', 'value':          index             Order ID      Date   Status Fulfilment  ... ship-country                                 promotion-ids    B2B fulfilled-by Unnamed: 22
44043    44043  405-0700572-9554710  04-04-22  Pending     Amazon  ...           IN                                           NaN  False          NaN         NaN
56068    56068  402-6584761-5651552  05-26-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58985    58985  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58986    58986  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58987    58987  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
...        ...                  ...       ...      ...        ...  ...          ...                                           ...    ...          ...         ...
104125  104125  408-5037495-2261103  06-18-22  Pending   Merchant  ...           IN                                           NaN  False    Easy Ship       False
104369  104369  407-2011116-9461143  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
104534  104534  403-2722181-3437921  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
105179  105179  404-2763455-4282753  06-17-22  Pending     Amazon  ...           IN                                           NaN  False          NaN       False
123903  123903  406-7258755-6702715  06-04-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False

[658 rows x 24 columns]}
2023-10-30 15:48:14,621 - INFO - Executed in: 9.132914066314697s
2023-10-30 15:48:14,635 - INFO - 127.0.0.1 - - [30/Oct/2023 15:48:14] "GET /ask/Show%20a%20table%20listing%20all%20orders%20with%20a%20'Status'%20of%20'Pending'. HTTP/1.1" 200 -
2023-10-30 15:51:45,750 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 15:51:45,750 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 15:51:48,836 - INFO - Question: Show a table listing all orders with a 'Status' of 'Pending'.
2023-10-30 15:51:48,879 - INFO - Running PandasAI with openai LLM...
2023-10-30 15:51:48,880 - INFO - Prompt ID: f06c3ad8-47a1-42b3-a90d-c0ab0791e6f4
2023-10-30 15:51:48,933 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
1,4916062056,04-30-22,Shipped - Delivered to...,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,1140383333,False,Easy Ship,
4,4015703225,04-30-22,Shipped...,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,3070609697,False,,
0,2820478615,04-30-22,Cancelled...,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,9753450988,False,Easy Ship,
2,3951382978,04-30-22,Shipped...,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,3370651513,True,,
3,7733822546,04-30-22,Cancelled...,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,3048917867,False,Easy Ship,
</dataframe>

<conversation>
User 1: Show a table listing all orders with a 'Status' of 'Pending'.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 15:51:56,558 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare: Preprocessing and cleaning data if necessary
    df = dfs[0]
    
    # Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    pending_orders = df[df['Status'] == 'Pending']
    
    # Analyze: Conducting the actual analysis
    result = {
        "type": "dataframe",
        "value": pending_orders
    }
    
    return result
```

2023-10-30 15:51:56,560 - INFO - Saving charts to plots/f06c3ad8-47a1-42b3-a90d-c0ab0791e6f4.png
2023-10-30 15:51:56,561 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/f06c3ad8-47a1-42b3-a90d-c0ab0791e6f4.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/f06c3ad8-47a1-42b3-a90d-c0ab0791e6f4.png" }
    """
    df = dfs[0]
    pending_orders = df[df['Status'] == 'Pending']
    result = {'type': 'dataframe', 'value': pending_orders}
    return result
        ```
2023-10-30 15:51:56,612 - INFO - Answer: {'type': 'dataframe', 'value':          index             Order ID      Date   Status Fulfilment  ... ship-country                                 promotion-ids    B2B fulfilled-by Unnamed: 22
44043    44043  405-0700572-9554710  04-04-22  Pending     Amazon  ...           IN                                           NaN  False          NaN         NaN
56068    56068  402-6584761-5651552  05-26-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58985    58985  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58986    58986  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58987    58987  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
...        ...                  ...       ...      ...        ...  ...          ...                                           ...    ...          ...         ...
104125  104125  408-5037495-2261103  06-18-22  Pending   Merchant  ...           IN                                           NaN  False    Easy Ship       False
104369  104369  407-2011116-9461143  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
104534  104534  403-2722181-3437921  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
105179  105179  404-2763455-4282753  06-17-22  Pending     Amazon  ...           IN                                           NaN  False          NaN       False
123903  123903  406-7258755-6702715  06-04-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False

[658 rows x 24 columns]}
2023-10-30 15:51:56,613 - INFO - Executed in: 7.7772376537323s
2023-10-30 15:51:56,616 - INFO - 127.0.0.1 - - [30/Oct/2023 15:51:56] "GET /ask/Show%20a%20table%20listing%20all%20orders%20with%20a%20'Status'%20of%20'Pending'. HTTP/1.1" 200 -
2023-10-30 15:52:54,756 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 15:52:54,757 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 15:52:58,046 - INFO - Question: Show a table listing all orders with a 'Status' of 'Pending'.
2023-10-30 15:52:58,092 - INFO - Running PandasAI with openai LLM...
2023-10-30 15:52:58,093 - INFO - Prompt ID: 4b404771-3264-4a72-9f7c-9753bac014bc
2023-10-30 15:52:58,146 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
3,1182823105,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
1,1557946959,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
0,7431205307,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
4,2288059606,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
2,2715487822,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
</dataframe>

<conversation>
User 1: Show a table listing all orders with a 'Status' of 'Pending'.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 15:53:07,834 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare: Preprocessing and cleaning data if necessary
    df = dfs[0]
    
    # Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    pending_orders = df[df['Status'] == 'Pending']
    
    # Analyze: Conducting the actual analysis
    result = {
        "type": "dataframe",
        "value": pending_orders
    }
    
    return result
```

2023-10-30 15:53:07,836 - INFO - Saving charts to plots/4b404771-3264-4a72-9f7c-9753bac014bc.png
2023-10-30 15:53:07,839 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/4b404771-3264-4a72-9f7c-9753bac014bc.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/4b404771-3264-4a72-9f7c-9753bac014bc.png" }
    """
    df = dfs[0]
    pending_orders = df[df['Status'] == 'Pending']
    result = {'type': 'dataframe', 'value': pending_orders}
    return result
        ```
2023-10-30 15:53:07,899 - INFO - Answer: {'type': 'dataframe', 'value':          index             Order ID      Date   Status Fulfilment  ... ship-country                                 promotion-ids    B2B fulfilled-by Unnamed: 22
44043    44043  405-0700572-9554710  04-04-22  Pending     Amazon  ...           IN                                           NaN  False          NaN         NaN
56068    56068  402-6584761-5651552  05-26-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58985    58985  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58986    58986  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58987    58987  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
...        ...                  ...       ...      ...        ...  ...          ...                                           ...    ...          ...         ...
104125  104125  408-5037495-2261103  06-18-22  Pending   Merchant  ...           IN                                           NaN  False    Easy Ship       False
104369  104369  407-2011116-9461143  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
104534  104534  403-2722181-3437921  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
105179  105179  404-2763455-4282753  06-17-22  Pending     Amazon  ...           IN                                           NaN  False          NaN       False
123903  123903  406-7258755-6702715  06-04-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False

[658 rows x 24 columns]}
2023-10-30 15:53:07,900 - INFO - Executed in: 9.853752613067627s
2023-10-30 15:53:07,903 - INFO - 127.0.0.1 - - [30/Oct/2023 15:53:07] "GET /ask/Show%20a%20table%20listing%20all%20orders%20with%20a%20'Status'%20of%20'Pending'. HTTP/1.1" 200 -
2023-10-30 15:54:03,385 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 15:54:03,385 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 15:54:07,121 - INFO - Question: Show a table listing all orders with a 'Status' of 'Pending'.
2023-10-30 15:54:07,181 - INFO - Running PandasAI with openai LLM...
2023-10-30 15:54:07,181 - INFO - Prompt ID: de30eb08-840d-49bc-8f2c-5c4f2f3ccaed
2023-10-30 15:54:07,233 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
1,1071179989,04-30-22,Shipped - Delivered to...,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,6895956657,False,Easy Ship,
2,7666521601,04-30-22,Shipped...,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,8324829865,True,,
3,3684816952,04-30-22,Cancelled...,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,4261890812,False,Easy Ship,
4,3236011100,04-30-22,Shipped...,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,8675765366,False,,
0,6791511802,04-30-22,Cancelled...,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,2824644998,False,Easy Ship,
</dataframe>

<conversation>
User 1: Show a table listing all orders with a 'Status' of 'Pending'.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 15:54:15,524 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare: Preprocessing and cleaning data if necessary
    df = dfs[0]
    
    # Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    pending_orders = df[df['Status'] == 'Pending']
    
    # Analyze: Conducting the actual analysis
    result = {
        "type": "dataframe",
        "value": pending_orders
    }
    
    return result
```

2023-10-30 15:54:15,525 - INFO - Saving charts to plots/de30eb08-840d-49bc-8f2c-5c4f2f3ccaed.png
2023-10-30 15:54:15,528 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/de30eb08-840d-49bc-8f2c-5c4f2f3ccaed.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/de30eb08-840d-49bc-8f2c-5c4f2f3ccaed.png" }
    """
    df = dfs[0]
    pending_orders = df[df['Status'] == 'Pending']
    result = {'type': 'dataframe', 'value': pending_orders}
    return result
        ```
2023-10-30 15:54:15,588 - INFO - Answer: {'type': 'dataframe', 'value':          index             Order ID      Date   Status Fulfilment  ... ship-country                                 promotion-ids    B2B fulfilled-by Unnamed: 22
44043    44043  405-0700572-9554710  04-04-22  Pending     Amazon  ...           IN                                           NaN  False          NaN         NaN
56068    56068  402-6584761-5651552  05-26-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58985    58985  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58986    58986  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58987    58987  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
...        ...                  ...       ...      ...        ...  ...          ...                                           ...    ...          ...         ...
104125  104125  408-5037495-2261103  06-18-22  Pending   Merchant  ...           IN                                           NaN  False    Easy Ship       False
104369  104369  407-2011116-9461143  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
104534  104534  403-2722181-3437921  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
105179  105179  404-2763455-4282753  06-17-22  Pending     Amazon  ...           IN                                           NaN  False          NaN       False
123903  123903  406-7258755-6702715  06-04-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False

[658 rows x 24 columns]}
2023-10-30 15:54:15,589 - INFO - Executed in: 8.4674654006958s
2023-10-30 15:54:15,592 - INFO - 127.0.0.1 - - [30/Oct/2023 15:54:15] "GET /ask/Show%20a%20table%20listing%20all%20orders%20with%20a%20'Status'%20of%20'Pending'. HTTP/1.1" 200 -
2023-10-30 15:54:54,317 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 15:54:54,317 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 15:55:00,374 - INFO - Question: Show a table listing all orders with a 'Status' of 'Pending'.
2023-10-30 15:55:00,418 - INFO - Running PandasAI with openai LLM...
2023-10-30 15:55:00,419 - INFO - Prompt ID: be323518-4e97-4268-a1e4-1b72fd958a0a
2023-10-30 15:55:00,471 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
0,1982377342,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
4,5496965426,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
1,4809958815,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
3,1874266960,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
2,2898599812,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
</dataframe>

<conversation>
User 1: Show a table listing all orders with a 'Status' of 'Pending'.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 15:55:08,969 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare: Preprocessing and cleaning data if necessary
    df = dfs[0]
    
    # Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    pending_orders = df[df['Status'] == 'Pending']
    
    # Analyze: Conducting the actual analysis
    result = {
        "type": "dataframe",
        "value": pending_orders
    }
    
    return result
```

2023-10-30 15:55:08,970 - INFO - Saving charts to plots/be323518-4e97-4268-a1e4-1b72fd958a0a.png
2023-10-30 15:55:08,971 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/be323518-4e97-4268-a1e4-1b72fd958a0a.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/be323518-4e97-4268-a1e4-1b72fd958a0a.png" }
    """
    df = dfs[0]
    pending_orders = df[df['Status'] == 'Pending']
    result = {'type': 'dataframe', 'value': pending_orders}
    return result
        ```
2023-10-30 15:55:09,021 - INFO - Answer: {'type': 'dataframe', 'value':          index             Order ID      Date   Status Fulfilment  ... ship-country                                 promotion-ids    B2B fulfilled-by Unnamed: 22
44043    44043  405-0700572-9554710  04-04-22  Pending     Amazon  ...           IN                                           NaN  False          NaN         NaN
56068    56068  402-6584761-5651552  05-26-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58985    58985  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58986    58986  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58987    58987  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
...        ...                  ...       ...      ...        ...  ...          ...                                           ...    ...          ...         ...
104125  104125  408-5037495-2261103  06-18-22  Pending   Merchant  ...           IN                                           NaN  False    Easy Ship       False
104369  104369  407-2011116-9461143  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
104534  104534  403-2722181-3437921  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
105179  105179  404-2763455-4282753  06-17-22  Pending     Amazon  ...           IN                                           NaN  False          NaN       False
123903  123903  406-7258755-6702715  06-04-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False

[658 rows x 24 columns]}
2023-10-30 15:55:09,022 - INFO - Executed in: 8.64758849143982s
2023-10-30 15:55:09,026 - INFO - 127.0.0.1 - - [30/Oct/2023 15:55:09] "GET /ask/Show%20a%20table%20listing%20all%20orders%20with%20a%20'Status'%20of%20'Pending'. HTTP/1.1" 200 -
2023-10-30 15:55:34,695 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 15:55:34,695 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 15:55:36,993 - INFO - Question: Show a table listing all orders with a 'Status' of 'Pending'.
2023-10-30 15:55:37,034 - INFO - Running PandasAI with openai LLM...
2023-10-30 15:55:37,035 - INFO - Prompt ID: 43aaa997-39ae-40c2-a7b1-4a3d3b2b04b3
2023-10-30 15:55:37,099 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
2,9832957402,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping ...,True,,
1,9783734416,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,Amazon PLCC Free-Finan...,False,Easy Ship,
4,5447682684,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
3,4669445802,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
0,1936722830,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
</dataframe>

<conversation>
User 1: Show a table listing all orders with a 'Status' of 'Pending'.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 15:55:46,540 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare: Preprocessing and cleaning data if necessary
    df = dfs[0]
    
    # Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    pending_orders = df[df['Status'] == 'Pending']
    
    # Analyze: Conducting the actual analysis
    result = {
        "type": "dataframe",
        "value": pending_orders
    }
    
    return result
```

2023-10-30 15:55:46,542 - INFO - Saving charts to plots/43aaa997-39ae-40c2-a7b1-4a3d3b2b04b3.png
2023-10-30 15:55:46,544 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/43aaa997-39ae-40c2-a7b1-4a3d3b2b04b3.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/43aaa997-39ae-40c2-a7b1-4a3d3b2b04b3.png" }
    """
    df = dfs[0]
    pending_orders = df[df['Status'] == 'Pending']
    result = {'type': 'dataframe', 'value': pending_orders}
    return result
        ```
2023-10-30 15:55:46,593 - INFO - Answer: {'type': 'dataframe', 'value':          index             Order ID      Date   Status Fulfilment  ... ship-country                                 promotion-ids    B2B fulfilled-by Unnamed: 22
44043    44043  405-0700572-9554710  04-04-22  Pending     Amazon  ...           IN                                           NaN  False          NaN         NaN
56068    56068  402-6584761-5651552  05-26-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58985    58985  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58986    58986  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58987    58987  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
...        ...                  ...       ...      ...        ...  ...          ...                                           ...    ...          ...         ...
104125  104125  408-5037495-2261103  06-18-22  Pending   Merchant  ...           IN                                           NaN  False    Easy Ship       False
104369  104369  407-2011116-9461143  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
104534  104534  403-2722181-3437921  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
105179  105179  404-2763455-4282753  06-17-22  Pending     Amazon  ...           IN                                           NaN  False          NaN       False
123903  123903  406-7258755-6702715  06-04-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False

[658 rows x 24 columns]}
2023-10-30 15:55:46,594 - INFO - Executed in: 9.600659370422363s
2023-10-30 15:55:46,597 - INFO - 127.0.0.1 - - [30/Oct/2023 15:55:46] "GET /ask/Show%20a%20table%20listing%20all%20orders%20with%20a%20'Status'%20of%20'Pending'. HTTP/1.1" 200 -
2023-10-30 15:56:09,373 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 15:56:09,373 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 15:56:13,989 - INFO - Question: Show a table listing all orders with a 'Status' of 'Pending'.
2023-10-30 15:56:14,032 - INFO - Running PandasAI with openai LLM...
2023-10-30 15:56:14,032 - INFO - Prompt ID: 54c1e72b-a80b-4ad3-8199-ba813fab86e2
2023-10-30 15:56:14,085 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
4,5494536994,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
3,0460060467,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
1,5588776295,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
2,9593582580,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
0,8628021355,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
</dataframe>

<conversation>
User 1: Show a table listing all orders with a 'Status' of 'Pending'.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 15:56:22,073 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0].copy()
    
    # Process
    pending_orders = df[df['Status'] == 'Pending']
    
    # Analyze
    result = {
        "type": "dataframe",
        "value": pending_orders
    }
    
    return result
```

2023-10-30 15:56:22,075 - INFO - Saving charts to plots/54c1e72b-a80b-4ad3-8199-ba813fab86e2.png
2023-10-30 15:56:22,078 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/54c1e72b-a80b-4ad3-8199-ba813fab86e2.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/54c1e72b-a80b-4ad3-8199-ba813fab86e2.png" }
    """
    df = dfs[0].copy()
    pending_orders = df[df['Status'] == 'Pending']
    result = {'type': 'dataframe', 'value': pending_orders}
    return result
        ```
2023-10-30 15:56:22,153 - INFO - Answer: {'type': 'dataframe', 'value':          index             Order ID      Date   Status Fulfilment  ... ship-country                                 promotion-ids    B2B fulfilled-by Unnamed: 22
44043    44043  405-0700572-9554710  04-04-22  Pending     Amazon  ...           IN                                           NaN  False          NaN         NaN
56068    56068  402-6584761-5651552  05-26-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58985    58985  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58986    58986  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58987    58987  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
...        ...                  ...       ...      ...        ...  ...          ...                                           ...    ...          ...         ...
104125  104125  408-5037495-2261103  06-18-22  Pending   Merchant  ...           IN                                           NaN  False    Easy Ship       False
104369  104369  407-2011116-9461143  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
104534  104534  403-2722181-3437921  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
105179  105179  404-2763455-4282753  06-17-22  Pending     Amazon  ...           IN                                           NaN  False          NaN       False
123903  123903  406-7258755-6702715  06-04-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False

[658 rows x 24 columns]}
2023-10-30 15:56:22,154 - INFO - Executed in: 8.165056705474854s
2023-10-30 15:56:22,158 - INFO - 127.0.0.1 - - [30/Oct/2023 15:56:22] "GET /ask/Show%20a%20table%20listing%20all%20orders%20with%20a%20'Status'%20of%20'Pending'. HTTP/1.1" 200 -
2023-10-30 16:36:24,710 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 16:36:24,710 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 16:36:37,616 - INFO - 127.0.0.1 - - [30/Oct/2023 16:36:37] "[33mGET / HTTP/1.1[0m" 404 -
2023-10-30 16:36:52,928 - INFO - Question: Show a table listing all orders with a 'Status' of 'Pending'.
2023-10-30 16:36:52,972 - INFO - Running PandasAI with openai LLM...
2023-10-30 16:36:52,973 - INFO - Prompt ID: 3a2e9c89-deef-4e3e-843a-9ea19f1036b8
2023-10-30 16:36:53,030 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
0,2598140236,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
2,7620173151,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
1,1519935913,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
4,1094736284,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
3,4384388079,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
</dataframe>

<conversation>
User 1: Show a table listing all orders with a 'Status' of 'Pending'.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 16:37:01,272 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0].copy()
    
    # Process
    pending_orders = df[df['Status'] == 'Pending']
    
    # Analyze
    result = {
        "type": "dataframe",
        "value": pending_orders
    }
    
    return result
```

2023-10-30 16:37:01,274 - INFO - Saving charts to plots/3a2e9c89-deef-4e3e-843a-9ea19f1036b8.png
2023-10-30 16:37:01,276 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/3a2e9c89-deef-4e3e-843a-9ea19f1036b8.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/3a2e9c89-deef-4e3e-843a-9ea19f1036b8.png" }
    """
    df = dfs[0].copy()
    pending_orders = df[df['Status'] == 'Pending']
    result = {'type': 'dataframe', 'value': pending_orders}
    return result
        ```
2023-10-30 16:37:01,345 - INFO - Answer: {'type': 'dataframe', 'value':          index             Order ID      Date   Status Fulfilment  ... ship-country                                 promotion-ids    B2B fulfilled-by Unnamed: 22
44043    44043  405-0700572-9554710  04-04-22  Pending     Amazon  ...           IN                                           NaN  False          NaN         NaN
56068    56068  402-6584761-5651552  05-26-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58985    58985  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58986    58986  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58987    58987  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
...        ...                  ...       ...      ...        ...  ...          ...                                           ...    ...          ...         ...
104125  104125  408-5037495-2261103  06-18-22  Pending   Merchant  ...           IN                                           NaN  False    Easy Ship       False
104369  104369  407-2011116-9461143  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
104534  104534  403-2722181-3437921  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
105179  105179  404-2763455-4282753  06-17-22  Pending     Amazon  ...           IN                                           NaN  False          NaN       False
123903  123903  406-7258755-6702715  06-04-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False

[658 rows x 24 columns]}
2023-10-30 16:37:01,345 - INFO - Executed in: 8.417667865753174s
2023-10-30 16:37:01,360 - INFO - 127.0.0.1 - - [30/Oct/2023 16:37:01] "GET /ask/Show%20a%20table%20listing%20all%20orders%20with%20a%20'Status'%20of%20'Pending'. HTTP/1.1" 200 -
2023-10-30 16:38:37,860 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 16:38:37,860 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 16:38:43,139 - INFO - Question: Show a table listing all orders with a 'Status' of 'Pending'.
2023-10-30 16:38:43,185 - INFO - Running PandasAI with openai LLM...
2023-10-30 16:38:43,186 - INFO - Prompt ID: ebf3e70a-2709-4ab4-aee0-d870ddba920c
2023-10-30 16:38:43,240 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
2,1712546470,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping ...,True,,
4,0719414685,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
3,2704200478,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
0,4012404270,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
1,5550130772,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,Amazon PLCC Free-Finan...,False,Easy Ship,
</dataframe>

<conversation>
User 1: Show a table listing all orders with a 'Status' of 'Pending'.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 16:38:51,421 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare: Preprocessing and cleaning data if necessary
    df = dfs[0]
    
    # Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    pending_orders = df[df['Status'] == 'Pending']
    
    # Analyze: Conducting the actual analysis
    result = {
        "type": "dataframe",
        "value": pending_orders
    }
    
    return result
```

2023-10-30 16:38:51,423 - INFO - Saving charts to plots/ebf3e70a-2709-4ab4-aee0-d870ddba920c.png
2023-10-30 16:38:51,424 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/ebf3e70a-2709-4ab4-aee0-d870ddba920c.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/ebf3e70a-2709-4ab4-aee0-d870ddba920c.png" }
    """
    df = dfs[0]
    pending_orders = df[df['Status'] == 'Pending']
    result = {'type': 'dataframe', 'value': pending_orders}
    return result
        ```
2023-10-30 16:38:51,476 - INFO - Answer: {'type': 'dataframe', 'value':          index             Order ID      Date   Status Fulfilment  ... ship-country                                 promotion-ids    B2B fulfilled-by Unnamed: 22
44043    44043  405-0700572-9554710  04-04-22  Pending     Amazon  ...           IN                                           NaN  False          NaN         NaN
56068    56068  402-6584761-5651552  05-26-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58985    58985  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58986    58986  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58987    58987  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
...        ...                  ...       ...      ...        ...  ...          ...                                           ...    ...          ...         ...
104125  104125  408-5037495-2261103  06-18-22  Pending   Merchant  ...           IN                                           NaN  False    Easy Ship       False
104369  104369  407-2011116-9461143  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
104534  104534  403-2722181-3437921  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
105179  105179  404-2763455-4282753  06-17-22  Pending     Amazon  ...           IN                                           NaN  False          NaN       False
123903  123903  406-7258755-6702715  06-04-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False

[658 rows x 24 columns]}
2023-10-30 16:38:51,476 - INFO - Executed in: 8.33731985092163s
2023-10-30 16:38:51,495 - INFO - 127.0.0.1 - - [30/Oct/2023 16:38:51] "GET /ask/Show%20a%20table%20listing%20all%20orders%20with%20a%20'Status'%20of%20'Pending'. HTTP/1.1" 200 -
2023-10-30 16:41:24,222 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 16:41:24,222 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 16:42:11,654 - INFO - Question: Show a table listing all orders with a 'Status' of 'Pending'.
2023-10-30 16:42:11,698 - INFO - Running PandasAI with openai LLM...
2023-10-30 16:42:11,698 - INFO - Prompt ID: 5d753e47-48b6-4a49-96ec-135ebee3fdde
2023-10-30 16:42:11,763 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
3,4022906337,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
2,1497221001,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
0,0381975079,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
4,2198271359,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
1,5334539676,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
</dataframe>

<conversation>
User 1: Show a table listing all orders with a 'Status' of 'Pending'.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 16:42:20,669 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0].copy()
    
    # Process
    pending_orders = df[df['Status'] == 'Pending']
    
    # Analyze
    result = {
        "type": "dataframe",
        "value": pending_orders
    }
    
    return result
```

2023-10-30 16:42:20,670 - INFO - Saving charts to plots/5d753e47-48b6-4a49-96ec-135ebee3fdde.png
2023-10-30 16:42:20,671 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/5d753e47-48b6-4a49-96ec-135ebee3fdde.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/5d753e47-48b6-4a49-96ec-135ebee3fdde.png" }
    """
    df = dfs[0].copy()
    pending_orders = df[df['Status'] == 'Pending']
    result = {'type': 'dataframe', 'value': pending_orders}
    return result
        ```
2023-10-30 16:42:20,741 - INFO - Answer: {'type': 'dataframe', 'value':          index             Order ID      Date   Status Fulfilment  ... ship-country                                 promotion-ids    B2B fulfilled-by Unnamed: 22
44043    44043  405-0700572-9554710  04-04-22  Pending     Amazon  ...           IN                                           NaN  False          NaN         NaN
56068    56068  402-6584761-5651552  05-26-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58985    58985  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58986    58986  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58987    58987  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
...        ...                  ...       ...      ...        ...  ...          ...                                           ...    ...          ...         ...
104125  104125  408-5037495-2261103  06-18-22  Pending   Merchant  ...           IN                                           NaN  False    Easy Ship       False
104369  104369  407-2011116-9461143  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
104534  104534  403-2722181-3437921  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
105179  105179  404-2763455-4282753  06-17-22  Pending     Amazon  ...           IN                                           NaN  False          NaN       False
123903  123903  406-7258755-6702715  06-04-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False

[658 rows x 24 columns]}
2023-10-30 16:42:20,742 - INFO - Executed in: 9.08798623085022s
2023-10-30 16:42:20,759 - INFO - 127.0.0.1 - - [30/Oct/2023 16:42:20] "GET /ask/Show%20a%20table%20listing%20all%20orders%20with%20a%20'Status'%20of%20'Pending'. HTTP/1.1" 200 -
2023-10-30 16:42:46,778 - INFO - Question: What is the overall order fulfillment status breakdown in terms of percentages
2023-10-30 16:42:46,779 - INFO - Running PandasAI with openai LLM...
2023-10-30 16:42:46,779 - INFO - Prompt ID: 6f5b18ba-89ed-4435-968d-9538760060b3
2023-10-30 16:42:46,816 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
3,4022906337,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
2,1497221001,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
0,0381975079,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
4,2198271359,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
1,5334539676,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
</dataframe>

<conversation>
User 1: What is the overall order fulfillment status breakdown in terms of percentages
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 16:42:55,689 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0]
    
    # Process
    order_status_counts = df['Status'].value_counts()
    total_orders = len(df)
    order_status_percentages = order_status_counts / total_orders * 100
    
    # Analyze
    result = {
        "type": "dataframe",
        "value": order_status_percentages
    }
    
    return result
```

2023-10-30 16:42:55,691 - INFO - Saving charts to plots/6f5b18ba-89ed-4435-968d-9538760060b3.png
2023-10-30 16:42:55,694 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/6f5b18ba-89ed-4435-968d-9538760060b3.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/6f5b18ba-89ed-4435-968d-9538760060b3.png" }
    """
    df = dfs[0]
    order_status_counts = df['Status'].value_counts()
    total_orders = len(df)
    order_status_percentages = order_status_counts / total_orders * 100
    result = {'type': 'dataframe', 'value': order_status_percentages}
    return result
        ```
2023-10-30 16:42:55,720 - INFO - Answer: {'type': 'dataframe', 'value': Shipped                          60.324869
Shipped - Delivered to Buyer     22.305873
Cancelled                        14.213607
Shipped - Returned to Seller      1.514247
Shipped - Picked Up               0.754410
Pending                           0.510176
Pending - Waiting for Pick Up     0.217872
Shipped - Returning to Seller     0.112425
Shipped - Out for Delivery        0.027137
Shipped - Rejected by Buyer       0.008529
Shipping                          0.006203
Shipped - Lost in Transit         0.003877
Shipped - Damaged                 0.000775
Name: Status, dtype: float64}
2023-10-30 16:42:55,721 - INFO - Executed in: 8.943151235580444s
2023-10-30 16:42:55,722 - ERROR - Error: 'Series' object has no attribute 'applymap'
2023-10-30 16:42:55,722 - INFO - 127.0.0.1 - - [30/Oct/2023 16:42:55] "[35m[1mGET /ask/What%20is%20the%20overall%20order%20fulfillment%20status%20breakdown%20in%20terms%20of%20percentages HTTP/1.1[0m" 500 -
2023-10-30 16:43:11,443 - INFO - Question: What is the overall order fulfillment status breakdown in terms of percentages
2023-10-30 16:43:11,445 - INFO - Running PandasAI with openai LLM...
2023-10-30 16:43:11,445 - INFO - Prompt ID: 4640f474-d22f-4844-b747-75031295a435
2023-10-30 16:43:11,478 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
3,4022906337,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
2,1497221001,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
0,0381975079,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
4,2198271359,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
1,5334539676,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
</dataframe>

<conversation>
User 1: What is the overall order fulfillment status breakdown in terms of percentages
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 16:43:20,266 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0]
    
    # Process
    order_status_counts = df['Status'].value_counts()
    total_orders = len(df)
    order_status_percentages = order_status_counts / total_orders * 100
    
    # Analyze
    result = {
        "type": "dataframe",
        "value": order_status_percentages
    }
    
    return result
```

2023-10-30 16:43:20,268 - INFO - Saving charts to plots/4640f474-d22f-4844-b747-75031295a435.png
2023-10-30 16:43:20,271 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/4640f474-d22f-4844-b747-75031295a435.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/4640f474-d22f-4844-b747-75031295a435.png" }
    """
    df = dfs[0]
    order_status_counts = df['Status'].value_counts()
    total_orders = len(df)
    order_status_percentages = order_status_counts / total_orders * 100
    result = {'type': 'dataframe', 'value': order_status_percentages}
    return result
        ```
2023-10-30 16:43:20,302 - INFO - Answer: {'type': 'dataframe', 'value': Shipped                          60.324869
Shipped - Delivered to Buyer     22.305873
Cancelled                        14.213607
Shipped - Returned to Seller      1.514247
Shipped - Picked Up               0.754410
Pending                           0.510176
Pending - Waiting for Pick Up     0.217872
Shipped - Returning to Seller     0.112425
Shipped - Out for Delivery        0.027137
Shipped - Rejected by Buyer       0.008529
Shipping                          0.006203
Shipped - Lost in Transit         0.003877
Shipped - Damaged                 0.000775
Name: Status, dtype: float64}
2023-10-30 16:43:20,303 - INFO - Executed in: 8.859767198562622s
2023-10-30 16:43:20,304 - ERROR - Error: 'Series' object has no attribute 'applymap'
2023-10-30 16:43:20,304 - INFO - 127.0.0.1 - - [30/Oct/2023 16:43:20] "[35m[1mGET /ask/What%20is%20the%20overall%20order%20fulfillment%20status%20breakdown%20in%20terms%20of%20percentages HTTP/1.1[0m" 500 -
2023-10-30 16:43:26,775 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 16:43:26,775 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 16:43:29,462 - INFO - 127.0.0.1 - - [30/Oct/2023 16:43:29] "[33mGET / HTTP/1.1[0m" 404 -
2023-10-30 16:43:34,820 - INFO - Question: What is the overall order fulfillment status breakdown in terms of percentages
2023-10-30 16:43:34,863 - INFO - Running PandasAI with openai LLM...
2023-10-30 16:43:34,864 - INFO - Prompt ID: 659273e0-fc03-4ee3-8bbb-65dd59242ccb
2023-10-30 16:43:34,917 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
4,6597662314,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
2,4464916035,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
0,6522356523,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
1,9040200303,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
3,6797208784,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
</dataframe>

<conversation>
User 1: What is the overall order fulfillment status breakdown in terms of percentages
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 16:43:43,614 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0]
    
    # Process
    order_status_counts = df['Status'].value_counts()
    total_orders = len(df)
    order_status_percentages = order_status_counts / total_orders * 100
    
    # Analyze
    result = {
        "type": "dataframe",
        "value": order_status_percentages
    }
    
    return result
```

2023-10-30 16:43:43,616 - INFO - Saving charts to plots/659273e0-fc03-4ee3-8bbb-65dd59242ccb.png
2023-10-30 16:43:43,619 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/659273e0-fc03-4ee3-8bbb-65dd59242ccb.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/659273e0-fc03-4ee3-8bbb-65dd59242ccb.png" }
    """
    df = dfs[0]
    order_status_counts = df['Status'].value_counts()
    total_orders = len(df)
    order_status_percentages = order_status_counts / total_orders * 100
    result = {'type': 'dataframe', 'value': order_status_percentages}
    return result
        ```
2023-10-30 16:43:43,667 - INFO - Answer: {'type': 'dataframe', 'value': Shipped                          60.324869
Shipped - Delivered to Buyer     22.305873
Cancelled                        14.213607
Shipped - Returned to Seller      1.514247
Shipped - Picked Up               0.754410
Pending                           0.510176
Pending - Waiting for Pick Up     0.217872
Shipped - Returning to Seller     0.112425
Shipped - Out for Delivery        0.027137
Shipped - Rejected by Buyer       0.008529
Shipping                          0.006203
Shipped - Lost in Transit         0.003877
Shipped - Damaged                 0.000775
Name: Status, dtype: float64}
2023-10-30 16:43:43,667 - INFO - Executed in: 8.847354650497437s
2023-10-30 16:43:43,668 - INFO - 127.0.0.1 - - [30/Oct/2023 16:43:43] "GET /ask/What%20is%20the%20overall%20order%20fulfillment%20status%20breakdown%20in%20terms%20of%20percentages HTTP/1.1" 200 -
2023-10-30 16:44:16,762 - INFO - Question: What is the overall order fulfillment status breakdown in terms of percentages show in table
2023-10-30 16:44:16,763 - INFO - Running PandasAI with openai LLM...
2023-10-30 16:44:16,763 - INFO - Prompt ID: 3be1bed3-9d96-49dd-9932-a96e645f4093
2023-10-30 16:44:16,800 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
4,6597662314,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
2,4464916035,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
0,6522356523,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
1,9040200303,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
3,6797208784,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
</dataframe>

<conversation>
User 1: What is the overall order fulfillment status breakdown in terms of percentages show in table
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 16:44:26,590 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0]
    
    # Process
    order_status_counts = df['Status'].value_counts()
    total_orders = len(df)
    order_status_percentages = order_status_counts / total_orders * 100
    
    # Analyze
    order_status_breakdown = pd.DataFrame({
        'Order Status': order_status_counts.index,
        'Count': order_status_counts.values,
        'Percentage': order_status_percentages.values
    })
    
    return {
        "type": "dataframe",
        "value": order_status_breakdown
    }
```

2023-10-30 16:44:26,592 - INFO - Saving charts to plots/3be1bed3-9d96-49dd-9932-a96e645f4093.png
2023-10-30 16:44:26,596 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/3be1bed3-9d96-49dd-9932-a96e645f4093.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/3be1bed3-9d96-49dd-9932-a96e645f4093.png" }
    """
    df = dfs[0]
    order_status_counts = df['Status'].value_counts()
    total_orders = len(df)
    order_status_percentages = order_status_counts / total_orders * 100
    order_status_breakdown = pd.DataFrame({'Order Status': order_status_counts.index, 'Count': order_status_counts.values, 'Percentage': order_status_percentages.values})
    return {'type': 'dataframe', 'value': order_status_breakdown}
        ```
2023-10-30 16:44:26,625 - INFO - Answer: {'type': 'dataframe', 'value':                      Order Status  Count  Percentage
0                         Shipped  77804   60.324869
1    Shipped - Delivered to Buyer  28769   22.305873
2                       Cancelled  18332   14.213607
3    Shipped - Returned to Seller   1953    1.514247
4             Shipped - Picked Up    973    0.754410
5                         Pending    658    0.510176
6   Pending - Waiting for Pick Up    281    0.217872
7   Shipped - Returning to Seller    145    0.112425
8      Shipped - Out for Delivery     35    0.027137
9     Shipped - Rejected by Buyer     11    0.008529
10                       Shipping      8    0.006203
11      Shipped - Lost in Transit      5    0.003877
12              Shipped - Damaged      1    0.000775}
2023-10-30 16:44:26,625 - INFO - Executed in: 9.86345100402832s
2023-10-30 16:44:26,627 - INFO - 127.0.0.1 - - [30/Oct/2023 16:44:26] "GET /ask/What%20is%20the%20overall%20order%20fulfillment%20status%20breakdown%20in%20terms%20of%20percentages%20show%20in%20table HTTP/1.1" 200 -
2023-10-30 16:46:03,880 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 16:46:03,880 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 16:46:13,574 - INFO - Question: What is the overall order fulfillment status breakdown in terms of percentages
2023-10-30 16:46:13,617 - INFO - Running PandasAI with openai LLM...
2023-10-30 16:46:13,617 - INFO - Prompt ID: 934fb2f5-cf21-4271-8d0c-889ab18cf918
2023-10-30 16:46:13,673 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
3,2743655649,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
1,9876538341,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
4,7393244043,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
2,5037420604,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
0,6330524173,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
</dataframe>

<conversation>
User 1: What is the overall order fulfillment status breakdown in terms of percentages
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 16:46:22,953 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare
    df = dfs[0]
    
    # Process
    order_status_counts = df['Status'].value_counts()
    total_orders = len(df)
    order_status_percentages = order_status_counts / total_orders * 100
    
    # Analyze
    result = {
        "type": "dataframe",
        "value": order_status_percentages
    }
    
    return result
```

2023-10-30 16:46:22,955 - INFO - Saving charts to plots/934fb2f5-cf21-4271-8d0c-889ab18cf918.png
2023-10-30 16:46:22,957 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/934fb2f5-cf21-4271-8d0c-889ab18cf918.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/934fb2f5-cf21-4271-8d0c-889ab18cf918.png" }
    """
    df = dfs[0]
    order_status_counts = df['Status'].value_counts()
    total_orders = len(df)
    order_status_percentages = order_status_counts / total_orders * 100
    result = {'type': 'dataframe', 'value': order_status_percentages}
    return result
        ```
2023-10-30 16:46:23,005 - INFO - Answer: {'type': 'dataframe', 'value': Shipped                          60.324869
Shipped - Delivered to Buyer     22.305873
Cancelled                        14.213607
Shipped - Returned to Seller      1.514247
Shipped - Picked Up               0.754410
Pending                           0.510176
Pending - Waiting for Pick Up     0.217872
Shipped - Returning to Seller     0.112425
Shipped - Out for Delivery        0.027137
Shipped - Rejected by Buyer       0.008529
Shipping                          0.006203
Shipped - Lost in Transit         0.003877
Shipped - Damaged                 0.000775
Name: Status, dtype: float64}
2023-10-30 16:46:23,006 - INFO - Executed in: 9.432387828826904s
2023-10-30 16:46:23,006 - ERROR - Error: Object of type Series is not JSON serializable
2023-10-30 16:46:23,007 - INFO - 127.0.0.1 - - [30/Oct/2023 16:46:23] "[35m[1mGET /ask/What%20is%20the%20overall%20order%20fulfillment%20status%20breakdown%20in%20terms%20of%20percentages HTTP/1.1[0m" 500 -
2023-10-30 16:49:48,816 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 16:49:48,816 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 16:50:09,453 - INFO - Question: Show a table listing all orders with a 'Status' of 'Pending'.
2023-10-30 16:50:09,498 - INFO - Running PandasAI with openai LLM...
2023-10-30 16:50:09,499 - INFO - Prompt ID: 2d372a62-b2aa-41f7-bf67-329ad495116e
2023-10-30 16:50:09,551 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
3,6753968778,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
2,7572272476,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
4,5494562127,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
0,1236198385,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
1,2229549709,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
</dataframe>

<conversation>
User 1: Show a table listing all orders with a 'Status' of 'Pending'.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 16:50:18,116 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare: Preprocessing and cleaning data if necessary
    df = dfs[0]
    
    # Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    pending_orders = df[df['Status'] == 'Pending']
    
    # Analyze: Conducting the actual analysis
    result = {
        "type": "dataframe",
        "value": pending_orders
    }
    
    return result
```

2023-10-30 16:50:18,118 - INFO - Saving charts to plots/2d372a62-b2aa-41f7-bf67-329ad495116e.png
2023-10-30 16:50:18,121 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/2d372a62-b2aa-41f7-bf67-329ad495116e.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/2d372a62-b2aa-41f7-bf67-329ad495116e.png" }
    """
    df = dfs[0]
    pending_orders = df[df['Status'] == 'Pending']
    result = {'type': 'dataframe', 'value': pending_orders}
    return result
        ```
2023-10-30 16:50:18,179 - INFO - Answer: {'type': 'dataframe', 'value':          index             Order ID      Date   Status Fulfilment  ... ship-country                                 promotion-ids    B2B fulfilled-by Unnamed: 22
44043    44043  405-0700572-9554710  04-04-22  Pending     Amazon  ...           IN                                           NaN  False          NaN         NaN
56068    56068  402-6584761-5651552  05-26-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58985    58985  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58986    58986  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58987    58987  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
...        ...                  ...       ...      ...        ...  ...          ...                                           ...    ...          ...         ...
104125  104125  408-5037495-2261103  06-18-22  Pending   Merchant  ...           IN                                           NaN  False    Easy Ship       False
104369  104369  407-2011116-9461143  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
104534  104534  403-2722181-3437921  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
105179  105179  404-2763455-4282753  06-17-22  Pending     Amazon  ...           IN                                           NaN  False          NaN       False
123903  123903  406-7258755-6702715  06-04-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False

[658 rows x 24 columns]}
2023-10-30 16:50:18,180 - INFO - Executed in: 8.726985216140747s
2023-10-30 16:50:18,193 - INFO - 127.0.0.1 - - [30/Oct/2023 16:50:18] "GET /ask/Show%20a%20table%20listing%20all%20orders%20with%20a%20'Status'%20of%20'Pending'. HTTP/1.1" 200 -
2023-10-30 16:51:46,404 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 16:51:46,404 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 16:51:49,682 - INFO - 127.0.0.1 - - [30/Oct/2023 16:51:49] "[33mGET / HTTP/1.1[0m" 404 -
2023-10-30 16:52:09,275 - INFO - Question: Show a table listing all orders with a 'Status' of 'Pending'
2023-10-30 16:52:09,319 - INFO - Running PandasAI with openai LLM...
2023-10-30 16:52:09,319 - INFO - Prompt ID: 352b1c27-9654-4c74-ac2c-0a14c5acfbc7
2023-10-30 16:52:09,371 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
4,8764879798,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
1,4411944005,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
2,7640212262,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
3,0525923995,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
0,5809809930,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
</dataframe>

<conversation>
User 1: Show a table listing all orders with a 'Status' of 'Pending'
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 16:52:19,478 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare: Preprocessing and cleaning data if necessary
    df = dfs[0]
    
    # Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    pending_orders = df[df['Status'] == 'Pending']
    
    # Analyze: Conducting the actual analysis
    result = {
        "type": "dataframe",
        "value": pending_orders
    }
    
    return result
```

2023-10-30 16:52:19,480 - INFO - Saving charts to plots/352b1c27-9654-4c74-ac2c-0a14c5acfbc7.png
2023-10-30 16:52:19,483 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/352b1c27-9654-4c74-ac2c-0a14c5acfbc7.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/352b1c27-9654-4c74-ac2c-0a14c5acfbc7.png" }
    """
    df = dfs[0]
    pending_orders = df[df['Status'] == 'Pending']
    result = {'type': 'dataframe', 'value': pending_orders}
    return result
        ```
2023-10-30 16:52:19,542 - INFO - Answer: {'type': 'dataframe', 'value':          index             Order ID      Date   Status Fulfilment  ... ship-country                                 promotion-ids    B2B fulfilled-by Unnamed: 22
44043    44043  405-0700572-9554710  04-04-22  Pending     Amazon  ...           IN                                           NaN  False          NaN         NaN
56068    56068  402-6584761-5651552  05-26-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58985    58985  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58986    58986  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58987    58987  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
...        ...                  ...       ...      ...        ...  ...          ...                                           ...    ...          ...         ...
104125  104125  408-5037495-2261103  06-18-22  Pending   Merchant  ...           IN                                           NaN  False    Easy Ship       False
104369  104369  407-2011116-9461143  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
104534  104534  403-2722181-3437921  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
105179  105179  404-2763455-4282753  06-17-22  Pending     Amazon  ...           IN                                           NaN  False          NaN       False
123903  123903  406-7258755-6702715  06-04-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False

[658 rows x 24 columns]}
2023-10-30 16:52:19,542 - INFO - Executed in: 10.267915964126587s
2023-10-30 16:52:19,558 - INFO - 127.0.0.1 - - [30/Oct/2023 16:52:19] "GET /ask/Show%20a%20table%20listing%20all%20orders%20with%20a%20'Status'%20of%20'Pending' HTTP/1.1" 200 -
2023-10-30 16:54:25,965 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 16:54:25,965 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 16:54:35,735 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2023-10-30 16:54:35,735 - INFO - [33mPress CTRL+C to quit[0m
2023-10-30 16:54:39,159 - INFO - Question: Show a table listing all orders with a 'Status' of 'Pending'
2023-10-30 16:54:39,215 - INFO - Running PandasAI with openai LLM...
2023-10-30 16:54:39,215 - INFO - Prompt ID: 3d6d1c9d-cc53-42c0-9f5b-7517f03e96b6
2023-10-30 16:54:39,273 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
1,1577002993,04-30-22,Shipped - Delivered to...,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,5283660181,False,Easy Ship,
3,1398812855,04-30-22,Cancelled...,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,2058181849,False,Easy Ship,
2,6049613395,04-30-22,Shipped...,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,0226626063,True,,
0,9305125073,04-30-22,Cancelled...,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,8298408222,False,Easy Ship,
4,0519685957,04-30-22,Shipped...,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,5243460206,False,,
</dataframe>

<conversation>
User 1: Show a table listing all orders with a 'Status' of 'Pending'
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 16:54:48,670 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare: Preprocessing and cleaning data if necessary
    df = dfs[0]
    
    # Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    pending_orders = df[df['Status'] == 'Pending']
    
    # Analyze: Conducting the actual analysis
    result = {
        "type": "dataframe",
        "value": pending_orders
    }
    
    return result
```

2023-10-30 16:54:48,672 - INFO - Saving charts to plots/3d6d1c9d-cc53-42c0-9f5b-7517f03e96b6.png
2023-10-30 16:54:48,673 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/3d6d1c9d-cc53-42c0-9f5b-7517f03e96b6.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/3d6d1c9d-cc53-42c0-9f5b-7517f03e96b6.png" }
    """
    df = dfs[0]
    pending_orders = df[df['Status'] == 'Pending']
    result = {'type': 'dataframe', 'value': pending_orders}
    return result
        ```
2023-10-30 16:54:48,725 - INFO - Answer: {'type': 'dataframe', 'value':          index             Order ID      Date   Status Fulfilment  ... ship-country                                 promotion-ids    B2B fulfilled-by Unnamed: 22
44043    44043  405-0700572-9554710  04-04-22  Pending     Amazon  ...           IN                                           NaN  False          NaN         NaN
56068    56068  402-6584761-5651552  05-26-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58985    58985  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58986    58986  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58987    58987  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
...        ...                  ...       ...      ...        ...  ...          ...                                           ...    ...          ...         ...
104125  104125  408-5037495-2261103  06-18-22  Pending   Merchant  ...           IN                                           NaN  False    Easy Ship       False
104369  104369  407-2011116-9461143  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
104534  104534  403-2722181-3437921  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
105179  105179  404-2763455-4282753  06-17-22  Pending     Amazon  ...           IN                                           NaN  False          NaN       False
123903  123903  406-7258755-6702715  06-04-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False

[658 rows x 24 columns]}
2023-10-30 16:54:48,725 - INFO - Executed in: 9.566233158111572s
2023-10-30 16:54:48,743 - INFO - 127.0.0.1 - - [30/Oct/2023 16:54:48] "GET /ask/Show%20a%20table%20listing%20all%20orders%20with%20a%20'Status'%20of%20'Pending' HTTP/1.1" 200 -
2023-10-30 16:55:37,760 - INFO - Question: Show a table listing all orders with a 'Status' of 'Pending'.
2023-10-30 16:55:37,761 - INFO - Running PandasAI with openai LLM...
2023-10-30 16:55:37,761 - INFO - Prompt ID: dfaccae6-c9de-4ac0-96c4-cc063ccf5e6f
2023-10-30 16:55:37,798 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
1,1577002993,04-30-22,Shipped - Delivered to...,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,5283660181,False,Easy Ship,
3,1398812855,04-30-22,Cancelled...,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,2058181849,False,Easy Ship,
2,6049613395,04-30-22,Shipped...,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,0226626063,True,,
0,9305125073,04-30-22,Cancelled...,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,8298408222,False,Easy Ship,
4,0519685957,04-30-22,Shipped...,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,5243460206,False,,
</dataframe>

<conversation>
User 1: Show a table listing all orders with a 'Status' of 'Pending'.
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2023-10-30 16:55:46,449 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    # Prepare: Preprocessing and cleaning data if necessary
    df = dfs[0]
    
    # Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    pending_orders = df[df['Status'] == 'Pending']
    
    # Analyze: Conducting the actual analysis
    result = {
        "type": "dataframe",
        "value": pending_orders
    }
    
    return result
```

2023-10-30 16:55:46,451 - INFO - Saving charts to plots/dfaccae6-c9de-4ac0-96c4-cc063ccf5e6f.png
2023-10-30 16:55:46,454 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/dfaccae6-c9de-4ac0-96c4-cc063ccf5e6f.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/dfaccae6-c9de-4ac0-96c4-cc063ccf5e6f.png" }
    """
    df = dfs[0]
    pending_orders = df[df['Status'] == 'Pending']
    result = {'type': 'dataframe', 'value': pending_orders}
    return result
        ```
2023-10-30 16:55:46,501 - INFO - Answer: {'type': 'dataframe', 'value':          index             Order ID      Date   Status Fulfilment  ... ship-country                                 promotion-ids    B2B fulfilled-by Unnamed: 22
44043    44043  405-0700572-9554710  04-04-22  Pending     Amazon  ...           IN                                           NaN  False          NaN         NaN
56068    56068  402-6584761-5651552  05-26-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58985    58985  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58986    58986  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
58987    58987  403-7066611-8150715  05-24-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
...        ...                  ...       ...      ...        ...  ...          ...                                           ...    ...          ...         ...
104125  104125  408-5037495-2261103  06-18-22  Pending   Merchant  ...           IN                                           NaN  False    Easy Ship       False
104369  104369  407-2011116-9461143  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
104534  104534  403-2722181-3437921  06-18-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False
105179  105179  404-2763455-4282753  06-17-22  Pending     Amazon  ...           IN                                           NaN  False          NaN       False
123903  123903  406-7258755-6702715  06-04-22  Pending     Amazon  ...           IN  IN Core Free Shipping 2015/04/08 23-48-5-108  False          NaN       False

[658 rows x 24 columns]}
2023-10-30 16:55:46,502 - INFO - Executed in: 8.741669416427612s
2023-10-30 16:55:46,518 - INFO - 127.0.0.1 - - [30/Oct/2023 16:55:46] "GET /ask/Show%20a%20table%20listing%20all%20orders%20with%20a%20'Status'%20of%20'Pending'. HTTP/1.1" 200 -
2024-03-05 15:49:08,212 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2024-03-05 15:49:08,212 - INFO - [33mPress CTRL+C to quit[0m
2024-03-05 15:49:12,892 - INFO - 127.0.0.1 - - [05/Mar/2024 15:49:12] "[33mGET / HTTP/1.1[0m" 404 -
2024-03-05 15:49:13,074 - INFO - 127.0.0.1 - - [05/Mar/2024 15:49:13] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
2024-03-05 15:49:32,450 - INFO - Question: Which customer placed the most orders in Quarter 2 of 2022, and what was the total quantity of items they ordered during that quarter
2024-03-05 15:49:32,508 - INFO - Running PandasAI with openai LLM...
2024-03-05 15:49:32,509 - INFO - Prompt ID: 4734c41d-3fe9-4886-95ca-56058eb3184b
2024-03-05 15:49:32,572 - INFO - Using prompt: 
You are provided with the following pandas DataFrames:

<dataframe>
Dataframe dfs[0], with 128975 rows and 24 columns.
This is the metadata of the dataframe dfs[0]:
index,Order ID,Date,Status,Fulfilment,Sales Channel ,ship-service-level,Style,SKU,Category,Size,ASIN,Courier Status,Qty,currency,Amount,ship-city,ship-state,ship-postal-code,ship-country,promotion-ids,B2B,fulfilled-by,Unnamed: 22
4,8915619431,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3671,JNE3671-TU-XXXL,Top,3XL,B098714BZP,Shipped,1,INR,574.0,CHENNAI,TAMIL NADU,600073.0,IN,,False,,
0,7252428236,04-30-22,Cancelled,Merchant,Amazon.in,Standard,SET389,SET389-KR-NP-S,Set,S,B09KXVBD7Z,,0,INR,647.62,MUMBAI,MAHARASHTRA,400081.0,IN,,False,Easy Ship,
2,8857486063,04-30-22,Shipped,Amazon,Amazon.in,Expedited,JNE3371,JNE3371-KR-XL,kurta,XL,B07WV4JV4D,Shipped,1,INR,329.0,NAVI MUMBAI,MAHARASHTRA,410210.0,IN,IN Core Free Shipping 2015/04/08 23-48-5-108,True,,
3,3811301495,04-30-22,Cancelled,Merchant,Amazon.in,Standard,J0341,J0341-DR-L,Western Dress,L,B099NRCT7B,,0,INR,753.33,PUDUCHERRY,PUDUCHERRY,605008.0,IN,,False,Easy Ship,
1,7066434403,04-30-22,Shipped - Delivered to Buyer,Merchant,Amazon.in,Standard,JNE3781,JNE3781-KR-XXXL,kurta,3XL,B09K3WFS32,Shipped,1,INR,406.0,BENGALURU,KARNATAKA,560085.0,IN,"Amazon PLCC Free-Financing Universal Merchant AAT-WNKTBO3K27EJC,Amazon PLCC Free-Financing Universal Merchant AAT-QX3UCCJESKPA2,Amazon PLCC Free-Financing Universal Merchant AAT-5QQ7BIYYQEDN2,Amazon PLCC Free-Financing Universal Merchant AAT-DSJ2QRXXWXVMQ,Amazon PLCC Free-Financing Universal Merchant AAT-CXJHMC2YJUK76,Amazon PLCC Free-Financing Universal Merchant AAT-CC4FAVTYR4X7C,Amazon PLCC Free-Financing Universal Merchant AAT-XXRCW6NZEPZI4,Amazon PLCC Free-Financing Universal Merchant AAT-CXNSLNBROFDW4,Amazon PLCC Free-Financing Universal Merchant AAT-R7GXNZWISTRFA,Amazon PLCC Free-Financing Universal Merchant AAT-WSJLDN3X7KEMO,Amazon PLCC Free-Financing Universal Merchant AAT-VL6FGQVGQVXUS,Amazon PLCC Free-Financing Universal Merchant AAT-EOKPWFWYW7Y6I,Amazon PLCC Free-Financing Universal Merchant AAT-ZYL5UPUNW6T62,Amazon PLCC Free-Financing Universal Merchant AAT-XVPICCHRWDCAI,Amazon PLCC Free-Financing Universal Merchant AAT-ETXQ3XXWMRXBG,Amazon PLCC Free-Financing Universal Merchant AAT-7X3XCTYG64VBE,Amazon PLCC Free-Financing Universal Merchant AAT-7CHGD3WTS3MHM,Amazon PLCC Free-Financing Universal Merchant AAT-26ZDKNME27X42,Amazon PLCC Free-Financing Universal Merchant AAT-4ZF5KN6E4LJK4,Amazon PLCC Free-Financing Universal Merchant AAT-7RCXIKUAX7DDY,Amazon PLCC Free-Financing Universal Merchant AAT-BRSZZ45H6MHAO,Amazon PLCC Free-Financing Universal Merchant AAT-MKLXOOZWQL7GO,Amazon PLCC Free-Financing Universal Merchant AAT-CB7UNXEXGIJTC,Amazon PLCC Free-Financing Universal Merchant #MP-gzasho-1593152694811,Amazon PLCC Free-Financing Universal Merchant AAT-WLBA4GZ52EAH4",False,Easy Ship,
</dataframe>

<conversation>
User 1: Which customer placed the most orders in Quarter 2 of 2022, and what was the total quantity of items they ordered during that quarter
</conversation>

This is the initial python code to be updated:
```python
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
```

Using the provided dataframes (`dfs`), update the python code based on the last question in the conversation.

Updated code:

2024-03-05 15:49:40,895 - INFO - Code generated:
```
# TODO import all the dependencies required
import pandas as pd

def analyze_data(dfs: list[pd.DataFrame]) -> dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in temp_chart.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "temp_chart.png" }
    """
    
    # Process: Find the customer who placed the most orders in Quarter 2 of 2022
    quarter_2_orders = dfs[0][(dfs[0]['Date'] >= '04-01-22') & (dfs[0]['Date'] <= '06-30-22')]
    customer_most_orders = quarter_2_orders['Order ID'].value_counts().idxmax()
    
    # Process: Calculate the total quantity of items ordered by the customer with the most orders
    total_quantity = quarter_2_orders[quarter_2_orders['Order ID'] == customer_most_orders]['Qty'].sum()
    
    result_string = f"The customer who placed the most orders in Quarter 2 of 2022 is {customer_most_orders} with a total quantity of {total_quantity} items ordered."
    
    return { "type": "string", "value": result_string }
```

2024-03-05 15:49:40,897 - INFO - Saving charts to plots/4734c41d-3fe9-4886-95ca-56058eb3184b.png
2024-03-05 15:49:40,901 - INFO - 
Code running:
```
def analyze_data(dfs: list[pd.DataFrame]) ->dict:
    """
    Analyze the data
    1. Prepare: Preprocessing and cleaning data if necessary
    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)
    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart save it to an image in plots/4734c41d-3fe9-4886-95ca-56058eb3184b.png and do not show the chart.)
    At the end, return a dictionary of:
    - type (possible values "string", "number", "dataframe", "plot")
    - value (can be a string, a dataframe or the path of the plot, NOT a dictionary)
    Examples: 
        { "type": "string", "value": "The highest salary is $9,000." }
        or
        { "type": "number", "value": 125 }
        or
        { "type": "dataframe", "value": pd.DataFrame({...}) }
        or
        { "type": "plot", "value": "plots/4734c41d-3fe9-4886-95ca-56058eb3184b.png" }
    """
    quarter_2_orders = dfs[0][(dfs[0]['Date'] >= '04-01-22') & (dfs[0]['Date'] <= '06-30-22')]
    customer_most_orders = quarter_2_orders['Order ID'].value_counts().idxmax()
    total_quantity = quarter_2_orders[quarter_2_orders['Order ID'] == customer_most_orders]['Qty'].sum()
    result_string = f'The customer who placed the most orders in Quarter 2 of 2022 is {customer_most_orders} with a total quantity of {total_quantity} items ordered.'
    return {'type': 'string', 'value': result_string}
        ```
2024-03-05 15:49:41,031 - INFO - Answer: {'type': 'string', 'value': 'The customer who placed the most orders in Quarter 2 of 2022 is 403-4984515-8861958 with a total quantity of 12 items ordered.'}
2024-03-05 15:49:41,032 - INFO - Executed in: 8.58215045928955s
2024-03-05 15:49:41,033 - INFO - 127.0.0.1 - - [05/Mar/2024 15:49:41] "GET /ask/Which%20customer%20placed%20the%20most%20orders%20in%20Quarter%202%20of%202022,%20and%20what%20was%20the%20total%20quantity%20of%20items%20they%20ordered%20during%20that%20quarter HTTP/1.1" 200 -
